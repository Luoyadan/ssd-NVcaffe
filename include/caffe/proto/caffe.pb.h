// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/caffe/proto/caffe.proto

#ifndef PROTOBUF_src_2fcaffe_2fproto_2fcaffe_2eproto__INCLUDED
#define PROTOBUF_src_2fcaffe_2fproto_2fcaffe_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace caffe {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

class BlobShape;
class BlobProto;
class BlobProtoVector;
class Datum;
class LabelMapItem;
class LabelMap;
class Sampler;
class SampleConstraint;
class BatchSampler;
class EmitConstraint;
class NormalizedBBox;
class Annotation;
class AnnotationGroup;
class AnnotatedDatum;
class FillerParameter;
class NetParameter;
class SolverParameter;
class SolverState;
class NetState;
class NetStateRule;
class ParamSpec;
class LayerParameter;
class TransformationParameter;
class ResizeParameter;
class SaltPepperParameter;
class NoiseParameter;
class DistortionParameter;
class ExpansionParameter;
class DetectNetGroundTruthParameter;
class DetectNetGroundTruthParameter_ClassMapping;
class DetectNetAugmentationParameter;
class LossParameter;
class AccuracyParameter;
class AnnotatedDataParameter;
class ArgMaxParameter;
class ConcatParameter;
class BatchNormParameter;
class BiasParameter;
class ContrastiveLossParameter;
class ConvolutionParameter;
class CropParameter;
class DataParameter;
class DropoutParameter;
class DummyDataParameter;
class EltwiseParameter;
class ELUParameter;
class EmbedParameter;
class ExpParameter;
class FlattenParameter;
class HDF5DataParameter;
class HDF5OutputParameter;
class HingeLossParameter;
class ImageDataParameter;
class InfogainLossParameter;
class InnerProductParameter;
class InputParameter;
class LogParameter;
class LRNParameter;
class MemoryDataParameter;
class MultiBoxLossParameter;
class NonMaximumSuppressionParameter;
class MVNParameter;
class NormalizeParameter;
class ParameterParameter;
class PermuteParameter;
class PoolingParameter;
class PowerParameter;
class PriorBoxParameter;
class PythonParameter;
class ReductionParameter;
class ReLUParameter;
class ReshapeParameter;
class ScaleParameter;
class SigmoidParameter;
class SliceParameter;
class SoftmaxParameter;
class TanHParameter;
class TileParameter;
class ThresholdParameter;
class WindowDataParameter;
class SPPParameter;
class V1LayerParameter;
class V0LayerParameter;
class PReLUParameter;

enum EmitConstraint_EmitType {
  EmitConstraint_EmitType_CENTER = 0,
  EmitConstraint_EmitType_MIN_OVERLAP = 1
};
bool EmitConstraint_EmitType_IsValid(int value);
const EmitConstraint_EmitType EmitConstraint_EmitType_EmitType_MIN = EmitConstraint_EmitType_CENTER;
const EmitConstraint_EmitType EmitConstraint_EmitType_EmitType_MAX = EmitConstraint_EmitType_MIN_OVERLAP;
const int EmitConstraint_EmitType_EmitType_ARRAYSIZE = EmitConstraint_EmitType_EmitType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EmitConstraint_EmitType_descriptor();
inline const ::std::string& EmitConstraint_EmitType_Name(EmitConstraint_EmitType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmitConstraint_EmitType_descriptor(), value);
}
inline bool EmitConstraint_EmitType_Parse(
    const ::std::string& name, EmitConstraint_EmitType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmitConstraint_EmitType>(
    EmitConstraint_EmitType_descriptor(), name, value);
}
enum AnnotatedDatum_AnnotationType {
  AnnotatedDatum_AnnotationType_BBOX = 0
};
bool AnnotatedDatum_AnnotationType_IsValid(int value);
const AnnotatedDatum_AnnotationType AnnotatedDatum_AnnotationType_AnnotationType_MIN = AnnotatedDatum_AnnotationType_BBOX;
const AnnotatedDatum_AnnotationType AnnotatedDatum_AnnotationType_AnnotationType_MAX = AnnotatedDatum_AnnotationType_BBOX;
const int AnnotatedDatum_AnnotationType_AnnotationType_ARRAYSIZE = AnnotatedDatum_AnnotationType_AnnotationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AnnotatedDatum_AnnotationType_descriptor();
inline const ::std::string& AnnotatedDatum_AnnotationType_Name(AnnotatedDatum_AnnotationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AnnotatedDatum_AnnotationType_descriptor(), value);
}
inline bool AnnotatedDatum_AnnotationType_Parse(
    const ::std::string& name, AnnotatedDatum_AnnotationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AnnotatedDatum_AnnotationType>(
    AnnotatedDatum_AnnotationType_descriptor(), name, value);
}
enum FillerParameter_VarianceNorm {
  FillerParameter_VarianceNorm_FAN_IN = 0,
  FillerParameter_VarianceNorm_FAN_OUT = 1,
  FillerParameter_VarianceNorm_AVERAGE = 2
};
bool FillerParameter_VarianceNorm_IsValid(int value);
const FillerParameter_VarianceNorm FillerParameter_VarianceNorm_VarianceNorm_MIN = FillerParameter_VarianceNorm_FAN_IN;
const FillerParameter_VarianceNorm FillerParameter_VarianceNorm_VarianceNorm_MAX = FillerParameter_VarianceNorm_AVERAGE;
const int FillerParameter_VarianceNorm_VarianceNorm_ARRAYSIZE = FillerParameter_VarianceNorm_VarianceNorm_MAX + 1;

const ::google::protobuf::EnumDescriptor* FillerParameter_VarianceNorm_descriptor();
inline const ::std::string& FillerParameter_VarianceNorm_Name(FillerParameter_VarianceNorm value) {
  return ::google::protobuf::internal::NameOfEnum(
    FillerParameter_VarianceNorm_descriptor(), value);
}
inline bool FillerParameter_VarianceNorm_Parse(
    const ::std::string& name, FillerParameter_VarianceNorm* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FillerParameter_VarianceNorm>(
    FillerParameter_VarianceNorm_descriptor(), name, value);
}
enum SolverParameter_SnapshotFormat {
  SolverParameter_SnapshotFormat_HDF5 = 0,
  SolverParameter_SnapshotFormat_BINARYPROTO = 1
};
bool SolverParameter_SnapshotFormat_IsValid(int value);
const SolverParameter_SnapshotFormat SolverParameter_SnapshotFormat_SnapshotFormat_MIN = SolverParameter_SnapshotFormat_HDF5;
const SolverParameter_SnapshotFormat SolverParameter_SnapshotFormat_SnapshotFormat_MAX = SolverParameter_SnapshotFormat_BINARYPROTO;
const int SolverParameter_SnapshotFormat_SnapshotFormat_ARRAYSIZE = SolverParameter_SnapshotFormat_SnapshotFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* SolverParameter_SnapshotFormat_descriptor();
inline const ::std::string& SolverParameter_SnapshotFormat_Name(SolverParameter_SnapshotFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    SolverParameter_SnapshotFormat_descriptor(), value);
}
inline bool SolverParameter_SnapshotFormat_Parse(
    const ::std::string& name, SolverParameter_SnapshotFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolverParameter_SnapshotFormat>(
    SolverParameter_SnapshotFormat_descriptor(), name, value);
}
enum SolverParameter_SolverMode {
  SolverParameter_SolverMode_CPU = 0,
  SolverParameter_SolverMode_GPU = 1
};
bool SolverParameter_SolverMode_IsValid(int value);
const SolverParameter_SolverMode SolverParameter_SolverMode_SolverMode_MIN = SolverParameter_SolverMode_CPU;
const SolverParameter_SolverMode SolverParameter_SolverMode_SolverMode_MAX = SolverParameter_SolverMode_GPU;
const int SolverParameter_SolverMode_SolverMode_ARRAYSIZE = SolverParameter_SolverMode_SolverMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* SolverParameter_SolverMode_descriptor();
inline const ::std::string& SolverParameter_SolverMode_Name(SolverParameter_SolverMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    SolverParameter_SolverMode_descriptor(), value);
}
inline bool SolverParameter_SolverMode_Parse(
    const ::std::string& name, SolverParameter_SolverMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolverParameter_SolverMode>(
    SolverParameter_SolverMode_descriptor(), name, value);
}
enum SolverParameter_SolverType {
  SolverParameter_SolverType_SGD = 0,
  SolverParameter_SolverType_NESTEROV = 1,
  SolverParameter_SolverType_ADAGRAD = 2,
  SolverParameter_SolverType_RMSPROP = 3,
  SolverParameter_SolverType_ADADELTA = 4,
  SolverParameter_SolverType_ADAM = 5
};
bool SolverParameter_SolverType_IsValid(int value);
const SolverParameter_SolverType SolverParameter_SolverType_SolverType_MIN = SolverParameter_SolverType_SGD;
const SolverParameter_SolverType SolverParameter_SolverType_SolverType_MAX = SolverParameter_SolverType_ADAM;
const int SolverParameter_SolverType_SolverType_ARRAYSIZE = SolverParameter_SolverType_SolverType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SolverParameter_SolverType_descriptor();
inline const ::std::string& SolverParameter_SolverType_Name(SolverParameter_SolverType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SolverParameter_SolverType_descriptor(), value);
}
inline bool SolverParameter_SolverType_Parse(
    const ::std::string& name, SolverParameter_SolverType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolverParameter_SolverType>(
    SolverParameter_SolverType_descriptor(), name, value);
}
enum ParamSpec_DimCheckMode {
  ParamSpec_DimCheckMode_STRICT = 0,
  ParamSpec_DimCheckMode_PERMISSIVE = 1
};
bool ParamSpec_DimCheckMode_IsValid(int value);
const ParamSpec_DimCheckMode ParamSpec_DimCheckMode_DimCheckMode_MIN = ParamSpec_DimCheckMode_STRICT;
const ParamSpec_DimCheckMode ParamSpec_DimCheckMode_DimCheckMode_MAX = ParamSpec_DimCheckMode_PERMISSIVE;
const int ParamSpec_DimCheckMode_DimCheckMode_ARRAYSIZE = ParamSpec_DimCheckMode_DimCheckMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ParamSpec_DimCheckMode_descriptor();
inline const ::std::string& ParamSpec_DimCheckMode_Name(ParamSpec_DimCheckMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ParamSpec_DimCheckMode_descriptor(), value);
}
inline bool ParamSpec_DimCheckMode_Parse(
    const ::std::string& name, ParamSpec_DimCheckMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ParamSpec_DimCheckMode>(
    ParamSpec_DimCheckMode_descriptor(), name, value);
}
enum ResizeParameter_Resize_mode {
  ResizeParameter_Resize_mode_WARP = 1,
  ResizeParameter_Resize_mode_FIT_SMALL_SIZE = 2,
  ResizeParameter_Resize_mode_FIT_LARGE_SIZE_AND_PAD = 3
};
bool ResizeParameter_Resize_mode_IsValid(int value);
const ResizeParameter_Resize_mode ResizeParameter_Resize_mode_Resize_mode_MIN = ResizeParameter_Resize_mode_WARP;
const ResizeParameter_Resize_mode ResizeParameter_Resize_mode_Resize_mode_MAX = ResizeParameter_Resize_mode_FIT_LARGE_SIZE_AND_PAD;
const int ResizeParameter_Resize_mode_Resize_mode_ARRAYSIZE = ResizeParameter_Resize_mode_Resize_mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResizeParameter_Resize_mode_descriptor();
inline const ::std::string& ResizeParameter_Resize_mode_Name(ResizeParameter_Resize_mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResizeParameter_Resize_mode_descriptor(), value);
}
inline bool ResizeParameter_Resize_mode_Parse(
    const ::std::string& name, ResizeParameter_Resize_mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResizeParameter_Resize_mode>(
    ResizeParameter_Resize_mode_descriptor(), name, value);
}
enum ResizeParameter_Pad_mode {
  ResizeParameter_Pad_mode_CONSTANT = 1,
  ResizeParameter_Pad_mode_MIRRORED = 2,
  ResizeParameter_Pad_mode_REPEAT_NEAREST = 3
};
bool ResizeParameter_Pad_mode_IsValid(int value);
const ResizeParameter_Pad_mode ResizeParameter_Pad_mode_Pad_mode_MIN = ResizeParameter_Pad_mode_CONSTANT;
const ResizeParameter_Pad_mode ResizeParameter_Pad_mode_Pad_mode_MAX = ResizeParameter_Pad_mode_REPEAT_NEAREST;
const int ResizeParameter_Pad_mode_Pad_mode_ARRAYSIZE = ResizeParameter_Pad_mode_Pad_mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResizeParameter_Pad_mode_descriptor();
inline const ::std::string& ResizeParameter_Pad_mode_Name(ResizeParameter_Pad_mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResizeParameter_Pad_mode_descriptor(), value);
}
inline bool ResizeParameter_Pad_mode_Parse(
    const ::std::string& name, ResizeParameter_Pad_mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResizeParameter_Pad_mode>(
    ResizeParameter_Pad_mode_descriptor(), name, value);
}
enum ResizeParameter_Interp_mode {
  ResizeParameter_Interp_mode_LINEAR = 1,
  ResizeParameter_Interp_mode_AREA = 2,
  ResizeParameter_Interp_mode_NEAREST = 3,
  ResizeParameter_Interp_mode_CUBIC = 4,
  ResizeParameter_Interp_mode_LANCZOS4 = 5
};
bool ResizeParameter_Interp_mode_IsValid(int value);
const ResizeParameter_Interp_mode ResizeParameter_Interp_mode_Interp_mode_MIN = ResizeParameter_Interp_mode_LINEAR;
const ResizeParameter_Interp_mode ResizeParameter_Interp_mode_Interp_mode_MAX = ResizeParameter_Interp_mode_LANCZOS4;
const int ResizeParameter_Interp_mode_Interp_mode_ARRAYSIZE = ResizeParameter_Interp_mode_Interp_mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResizeParameter_Interp_mode_descriptor();
inline const ::std::string& ResizeParameter_Interp_mode_Name(ResizeParameter_Interp_mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResizeParameter_Interp_mode_descriptor(), value);
}
inline bool ResizeParameter_Interp_mode_Parse(
    const ::std::string& name, ResizeParameter_Interp_mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResizeParameter_Interp_mode>(
    ResizeParameter_Interp_mode_descriptor(), name, value);
}
enum DetectNetGroundTruthParameter_GridboxType {
  DetectNetGroundTruthParameter_GridboxType_GRIDBOX_MAX = 0,
  DetectNetGroundTruthParameter_GridboxType_GRIDBOX_MIN = 1
};
bool DetectNetGroundTruthParameter_GridboxType_IsValid(int value);
const DetectNetGroundTruthParameter_GridboxType DetectNetGroundTruthParameter_GridboxType_GridboxType_MIN = DetectNetGroundTruthParameter_GridboxType_GRIDBOX_MAX;
const DetectNetGroundTruthParameter_GridboxType DetectNetGroundTruthParameter_GridboxType_GridboxType_MAX = DetectNetGroundTruthParameter_GridboxType_GRIDBOX_MIN;
const int DetectNetGroundTruthParameter_GridboxType_GridboxType_ARRAYSIZE = DetectNetGroundTruthParameter_GridboxType_GridboxType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DetectNetGroundTruthParameter_GridboxType_descriptor();
inline const ::std::string& DetectNetGroundTruthParameter_GridboxType_Name(DetectNetGroundTruthParameter_GridboxType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DetectNetGroundTruthParameter_GridboxType_descriptor(), value);
}
inline bool DetectNetGroundTruthParameter_GridboxType_Parse(
    const ::std::string& name, DetectNetGroundTruthParameter_GridboxType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DetectNetGroundTruthParameter_GridboxType>(
    DetectNetGroundTruthParameter_GridboxType_descriptor(), name, value);
}
enum DetectNetGroundTruthParameter_CoverageType {
  DetectNetGroundTruthParameter_CoverageType_RECTANGULAR = 0
};
bool DetectNetGroundTruthParameter_CoverageType_IsValid(int value);
const DetectNetGroundTruthParameter_CoverageType DetectNetGroundTruthParameter_CoverageType_CoverageType_MIN = DetectNetGroundTruthParameter_CoverageType_RECTANGULAR;
const DetectNetGroundTruthParameter_CoverageType DetectNetGroundTruthParameter_CoverageType_CoverageType_MAX = DetectNetGroundTruthParameter_CoverageType_RECTANGULAR;
const int DetectNetGroundTruthParameter_CoverageType_CoverageType_ARRAYSIZE = DetectNetGroundTruthParameter_CoverageType_CoverageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DetectNetGroundTruthParameter_CoverageType_descriptor();
inline const ::std::string& DetectNetGroundTruthParameter_CoverageType_Name(DetectNetGroundTruthParameter_CoverageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DetectNetGroundTruthParameter_CoverageType_descriptor(), value);
}
inline bool DetectNetGroundTruthParameter_CoverageType_Parse(
    const ::std::string& name, DetectNetGroundTruthParameter_CoverageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DetectNetGroundTruthParameter_CoverageType>(
    DetectNetGroundTruthParameter_CoverageType_descriptor(), name, value);
}
enum LossParameter_NormalizationMode {
  LossParameter_NormalizationMode_FULL = 0,
  LossParameter_NormalizationMode_VALID = 1,
  LossParameter_NormalizationMode_BATCH_SIZE = 2,
  LossParameter_NormalizationMode_NONE = 3
};
bool LossParameter_NormalizationMode_IsValid(int value);
const LossParameter_NormalizationMode LossParameter_NormalizationMode_NormalizationMode_MIN = LossParameter_NormalizationMode_FULL;
const LossParameter_NormalizationMode LossParameter_NormalizationMode_NormalizationMode_MAX = LossParameter_NormalizationMode_NONE;
const int LossParameter_NormalizationMode_NormalizationMode_ARRAYSIZE = LossParameter_NormalizationMode_NormalizationMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* LossParameter_NormalizationMode_descriptor();
inline const ::std::string& LossParameter_NormalizationMode_Name(LossParameter_NormalizationMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    LossParameter_NormalizationMode_descriptor(), value);
}
inline bool LossParameter_NormalizationMode_Parse(
    const ::std::string& name, LossParameter_NormalizationMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LossParameter_NormalizationMode>(
    LossParameter_NormalizationMode_descriptor(), name, value);
}
enum BatchNormParameter_Engine {
  BatchNormParameter_Engine_DEFAULT = 0,
  BatchNormParameter_Engine_CAFFE = 1,
  BatchNormParameter_Engine_CUDNN = 2
};
bool BatchNormParameter_Engine_IsValid(int value);
const BatchNormParameter_Engine BatchNormParameter_Engine_Engine_MIN = BatchNormParameter_Engine_DEFAULT;
const BatchNormParameter_Engine BatchNormParameter_Engine_Engine_MAX = BatchNormParameter_Engine_CUDNN;
const int BatchNormParameter_Engine_Engine_ARRAYSIZE = BatchNormParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* BatchNormParameter_Engine_descriptor();
inline const ::std::string& BatchNormParameter_Engine_Name(BatchNormParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    BatchNormParameter_Engine_descriptor(), value);
}
inline bool BatchNormParameter_Engine_Parse(
    const ::std::string& name, BatchNormParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BatchNormParameter_Engine>(
    BatchNormParameter_Engine_descriptor(), name, value);
}
enum ConvolutionParameter_Engine {
  ConvolutionParameter_Engine_DEFAULT = 0,
  ConvolutionParameter_Engine_CAFFE = 1,
  ConvolutionParameter_Engine_CUDNN = 2
};
bool ConvolutionParameter_Engine_IsValid(int value);
const ConvolutionParameter_Engine ConvolutionParameter_Engine_Engine_MIN = ConvolutionParameter_Engine_DEFAULT;
const ConvolutionParameter_Engine ConvolutionParameter_Engine_Engine_MAX = ConvolutionParameter_Engine_CUDNN;
const int ConvolutionParameter_Engine_Engine_ARRAYSIZE = ConvolutionParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConvolutionParameter_Engine_descriptor();
inline const ::std::string& ConvolutionParameter_Engine_Name(ConvolutionParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConvolutionParameter_Engine_descriptor(), value);
}
inline bool ConvolutionParameter_Engine_Parse(
    const ::std::string& name, ConvolutionParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConvolutionParameter_Engine>(
    ConvolutionParameter_Engine_descriptor(), name, value);
}
enum ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker {
  ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_GET = 0,
  ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_FINDEX = 1
};
bool ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_IsValid(int value);
const ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_CuDNNConvolutionAlgorithmSeeker_MIN = ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_GET;
const ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_CuDNNConvolutionAlgorithmSeeker_MAX = ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_FINDEX;
const int ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_CuDNNConvolutionAlgorithmSeeker_ARRAYSIZE = ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_CuDNNConvolutionAlgorithmSeeker_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_descriptor();
inline const ::std::string& ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_Name(ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_descriptor(), value);
}
inline bool ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_Parse(
    const ::std::string& name, ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker>(
    ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_descriptor(), name, value);
}
enum DataParameter_DB {
  DataParameter_DB_LEVELDB = 0,
  DataParameter_DB_LMDB = 1
};
bool DataParameter_DB_IsValid(int value);
const DataParameter_DB DataParameter_DB_DB_MIN = DataParameter_DB_LEVELDB;
const DataParameter_DB DataParameter_DB_DB_MAX = DataParameter_DB_LMDB;
const int DataParameter_DB_DB_ARRAYSIZE = DataParameter_DB_DB_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataParameter_DB_descriptor();
inline const ::std::string& DataParameter_DB_Name(DataParameter_DB value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataParameter_DB_descriptor(), value);
}
inline bool DataParameter_DB_Parse(
    const ::std::string& name, DataParameter_DB* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataParameter_DB>(
    DataParameter_DB_descriptor(), name, value);
}
enum DropoutParameter_Engine {
  DropoutParameter_Engine_DEFAULT = 0,
  DropoutParameter_Engine_CAFFE = 1,
  DropoutParameter_Engine_CUDNN = 2
};
bool DropoutParameter_Engine_IsValid(int value);
const DropoutParameter_Engine DropoutParameter_Engine_Engine_MIN = DropoutParameter_Engine_DEFAULT;
const DropoutParameter_Engine DropoutParameter_Engine_Engine_MAX = DropoutParameter_Engine_CUDNN;
const int DropoutParameter_Engine_Engine_ARRAYSIZE = DropoutParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* DropoutParameter_Engine_descriptor();
inline const ::std::string& DropoutParameter_Engine_Name(DropoutParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    DropoutParameter_Engine_descriptor(), value);
}
inline bool DropoutParameter_Engine_Parse(
    const ::std::string& name, DropoutParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DropoutParameter_Engine>(
    DropoutParameter_Engine_descriptor(), name, value);
}
enum EltwiseParameter_EltwiseOp {
  EltwiseParameter_EltwiseOp_PROD = 0,
  EltwiseParameter_EltwiseOp_SUM = 1,
  EltwiseParameter_EltwiseOp_MAX = 2
};
bool EltwiseParameter_EltwiseOp_IsValid(int value);
const EltwiseParameter_EltwiseOp EltwiseParameter_EltwiseOp_EltwiseOp_MIN = EltwiseParameter_EltwiseOp_PROD;
const EltwiseParameter_EltwiseOp EltwiseParameter_EltwiseOp_EltwiseOp_MAX = EltwiseParameter_EltwiseOp_MAX;
const int EltwiseParameter_EltwiseOp_EltwiseOp_ARRAYSIZE = EltwiseParameter_EltwiseOp_EltwiseOp_MAX + 1;

const ::google::protobuf::EnumDescriptor* EltwiseParameter_EltwiseOp_descriptor();
inline const ::std::string& EltwiseParameter_EltwiseOp_Name(EltwiseParameter_EltwiseOp value) {
  return ::google::protobuf::internal::NameOfEnum(
    EltwiseParameter_EltwiseOp_descriptor(), value);
}
inline bool EltwiseParameter_EltwiseOp_Parse(
    const ::std::string& name, EltwiseParameter_EltwiseOp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EltwiseParameter_EltwiseOp>(
    EltwiseParameter_EltwiseOp_descriptor(), name, value);
}
enum HingeLossParameter_Norm {
  HingeLossParameter_Norm_L1 = 1,
  HingeLossParameter_Norm_L2 = 2
};
bool HingeLossParameter_Norm_IsValid(int value);
const HingeLossParameter_Norm HingeLossParameter_Norm_Norm_MIN = HingeLossParameter_Norm_L1;
const HingeLossParameter_Norm HingeLossParameter_Norm_Norm_MAX = HingeLossParameter_Norm_L2;
const int HingeLossParameter_Norm_Norm_ARRAYSIZE = HingeLossParameter_Norm_Norm_MAX + 1;

const ::google::protobuf::EnumDescriptor* HingeLossParameter_Norm_descriptor();
inline const ::std::string& HingeLossParameter_Norm_Name(HingeLossParameter_Norm value) {
  return ::google::protobuf::internal::NameOfEnum(
    HingeLossParameter_Norm_descriptor(), value);
}
inline bool HingeLossParameter_Norm_Parse(
    const ::std::string& name, HingeLossParameter_Norm* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HingeLossParameter_Norm>(
    HingeLossParameter_Norm_descriptor(), name, value);
}
enum LRNParameter_NormRegion {
  LRNParameter_NormRegion_ACROSS_CHANNELS = 0,
  LRNParameter_NormRegion_WITHIN_CHANNEL = 1
};
bool LRNParameter_NormRegion_IsValid(int value);
const LRNParameter_NormRegion LRNParameter_NormRegion_NormRegion_MIN = LRNParameter_NormRegion_ACROSS_CHANNELS;
const LRNParameter_NormRegion LRNParameter_NormRegion_NormRegion_MAX = LRNParameter_NormRegion_WITHIN_CHANNEL;
const int LRNParameter_NormRegion_NormRegion_ARRAYSIZE = LRNParameter_NormRegion_NormRegion_MAX + 1;

const ::google::protobuf::EnumDescriptor* LRNParameter_NormRegion_descriptor();
inline const ::std::string& LRNParameter_NormRegion_Name(LRNParameter_NormRegion value) {
  return ::google::protobuf::internal::NameOfEnum(
    LRNParameter_NormRegion_descriptor(), value);
}
inline bool LRNParameter_NormRegion_Parse(
    const ::std::string& name, LRNParameter_NormRegion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LRNParameter_NormRegion>(
    LRNParameter_NormRegion_descriptor(), name, value);
}
enum LRNParameter_Engine {
  LRNParameter_Engine_DEFAULT = 0,
  LRNParameter_Engine_CAFFE = 1,
  LRNParameter_Engine_CUDNN = 2
};
bool LRNParameter_Engine_IsValid(int value);
const LRNParameter_Engine LRNParameter_Engine_Engine_MIN = LRNParameter_Engine_DEFAULT;
const LRNParameter_Engine LRNParameter_Engine_Engine_MAX = LRNParameter_Engine_CUDNN;
const int LRNParameter_Engine_Engine_ARRAYSIZE = LRNParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* LRNParameter_Engine_descriptor();
inline const ::std::string& LRNParameter_Engine_Name(LRNParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    LRNParameter_Engine_descriptor(), value);
}
inline bool LRNParameter_Engine_Parse(
    const ::std::string& name, LRNParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LRNParameter_Engine>(
    LRNParameter_Engine_descriptor(), name, value);
}
enum MultiBoxLossParameter_LocLossType {
  MultiBoxLossParameter_LocLossType_L2 = 0,
  MultiBoxLossParameter_LocLossType_SMOOTH_L1 = 1
};
bool MultiBoxLossParameter_LocLossType_IsValid(int value);
const MultiBoxLossParameter_LocLossType MultiBoxLossParameter_LocLossType_LocLossType_MIN = MultiBoxLossParameter_LocLossType_L2;
const MultiBoxLossParameter_LocLossType MultiBoxLossParameter_LocLossType_LocLossType_MAX = MultiBoxLossParameter_LocLossType_SMOOTH_L1;
const int MultiBoxLossParameter_LocLossType_LocLossType_ARRAYSIZE = MultiBoxLossParameter_LocLossType_LocLossType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MultiBoxLossParameter_LocLossType_descriptor();
inline const ::std::string& MultiBoxLossParameter_LocLossType_Name(MultiBoxLossParameter_LocLossType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MultiBoxLossParameter_LocLossType_descriptor(), value);
}
inline bool MultiBoxLossParameter_LocLossType_Parse(
    const ::std::string& name, MultiBoxLossParameter_LocLossType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MultiBoxLossParameter_LocLossType>(
    MultiBoxLossParameter_LocLossType_descriptor(), name, value);
}
enum MultiBoxLossParameter_ConfLossType {
  MultiBoxLossParameter_ConfLossType_SOFTMAX = 0,
  MultiBoxLossParameter_ConfLossType_LOGISTIC = 1
};
bool MultiBoxLossParameter_ConfLossType_IsValid(int value);
const MultiBoxLossParameter_ConfLossType MultiBoxLossParameter_ConfLossType_ConfLossType_MIN = MultiBoxLossParameter_ConfLossType_SOFTMAX;
const MultiBoxLossParameter_ConfLossType MultiBoxLossParameter_ConfLossType_ConfLossType_MAX = MultiBoxLossParameter_ConfLossType_LOGISTIC;
const int MultiBoxLossParameter_ConfLossType_ConfLossType_ARRAYSIZE = MultiBoxLossParameter_ConfLossType_ConfLossType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MultiBoxLossParameter_ConfLossType_descriptor();
inline const ::std::string& MultiBoxLossParameter_ConfLossType_Name(MultiBoxLossParameter_ConfLossType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MultiBoxLossParameter_ConfLossType_descriptor(), value);
}
inline bool MultiBoxLossParameter_ConfLossType_Parse(
    const ::std::string& name, MultiBoxLossParameter_ConfLossType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MultiBoxLossParameter_ConfLossType>(
    MultiBoxLossParameter_ConfLossType_descriptor(), name, value);
}
enum MultiBoxLossParameter_MatchType {
  MultiBoxLossParameter_MatchType_BIPARTITE = 0,
  MultiBoxLossParameter_MatchType_PER_PREDICTION = 1
};
bool MultiBoxLossParameter_MatchType_IsValid(int value);
const MultiBoxLossParameter_MatchType MultiBoxLossParameter_MatchType_MatchType_MIN = MultiBoxLossParameter_MatchType_BIPARTITE;
const MultiBoxLossParameter_MatchType MultiBoxLossParameter_MatchType_MatchType_MAX = MultiBoxLossParameter_MatchType_PER_PREDICTION;
const int MultiBoxLossParameter_MatchType_MatchType_ARRAYSIZE = MultiBoxLossParameter_MatchType_MatchType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MultiBoxLossParameter_MatchType_descriptor();
inline const ::std::string& MultiBoxLossParameter_MatchType_Name(MultiBoxLossParameter_MatchType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MultiBoxLossParameter_MatchType_descriptor(), value);
}
inline bool MultiBoxLossParameter_MatchType_Parse(
    const ::std::string& name, MultiBoxLossParameter_MatchType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MultiBoxLossParameter_MatchType>(
    MultiBoxLossParameter_MatchType_descriptor(), name, value);
}
enum MultiBoxLossParameter_MiningType {
  MultiBoxLossParameter_MiningType_NONE = 0,
  MultiBoxLossParameter_MiningType_MAX_NEGATIVE = 1,
  MultiBoxLossParameter_MiningType_HARD_EXAMPLE = 2
};
bool MultiBoxLossParameter_MiningType_IsValid(int value);
const MultiBoxLossParameter_MiningType MultiBoxLossParameter_MiningType_MiningType_MIN = MultiBoxLossParameter_MiningType_NONE;
const MultiBoxLossParameter_MiningType MultiBoxLossParameter_MiningType_MiningType_MAX = MultiBoxLossParameter_MiningType_HARD_EXAMPLE;
const int MultiBoxLossParameter_MiningType_MiningType_ARRAYSIZE = MultiBoxLossParameter_MiningType_MiningType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MultiBoxLossParameter_MiningType_descriptor();
inline const ::std::string& MultiBoxLossParameter_MiningType_Name(MultiBoxLossParameter_MiningType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MultiBoxLossParameter_MiningType_descriptor(), value);
}
inline bool MultiBoxLossParameter_MiningType_Parse(
    const ::std::string& name, MultiBoxLossParameter_MiningType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MultiBoxLossParameter_MiningType>(
    MultiBoxLossParameter_MiningType_descriptor(), name, value);
}
enum PoolingParameter_PoolMethod {
  PoolingParameter_PoolMethod_MAX = 0,
  PoolingParameter_PoolMethod_AVE = 1,
  PoolingParameter_PoolMethod_STOCHASTIC = 2
};
bool PoolingParameter_PoolMethod_IsValid(int value);
const PoolingParameter_PoolMethod PoolingParameter_PoolMethod_PoolMethod_MIN = PoolingParameter_PoolMethod_MAX;
const PoolingParameter_PoolMethod PoolingParameter_PoolMethod_PoolMethod_MAX = PoolingParameter_PoolMethod_STOCHASTIC;
const int PoolingParameter_PoolMethod_PoolMethod_ARRAYSIZE = PoolingParameter_PoolMethod_PoolMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* PoolingParameter_PoolMethod_descriptor();
inline const ::std::string& PoolingParameter_PoolMethod_Name(PoolingParameter_PoolMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    PoolingParameter_PoolMethod_descriptor(), value);
}
inline bool PoolingParameter_PoolMethod_Parse(
    const ::std::string& name, PoolingParameter_PoolMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PoolingParameter_PoolMethod>(
    PoolingParameter_PoolMethod_descriptor(), name, value);
}
enum PoolingParameter_Engine {
  PoolingParameter_Engine_DEFAULT = 0,
  PoolingParameter_Engine_CAFFE = 1,
  PoolingParameter_Engine_CUDNN = 2
};
bool PoolingParameter_Engine_IsValid(int value);
const PoolingParameter_Engine PoolingParameter_Engine_Engine_MIN = PoolingParameter_Engine_DEFAULT;
const PoolingParameter_Engine PoolingParameter_Engine_Engine_MAX = PoolingParameter_Engine_CUDNN;
const int PoolingParameter_Engine_Engine_ARRAYSIZE = PoolingParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* PoolingParameter_Engine_descriptor();
inline const ::std::string& PoolingParameter_Engine_Name(PoolingParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    PoolingParameter_Engine_descriptor(), value);
}
inline bool PoolingParameter_Engine_Parse(
    const ::std::string& name, PoolingParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PoolingParameter_Engine>(
    PoolingParameter_Engine_descriptor(), name, value);
}
enum PriorBoxParameter_CodeType {
  PriorBoxParameter_CodeType_CORNER = 1,
  PriorBoxParameter_CodeType_CENTER_SIZE = 2,
  PriorBoxParameter_CodeType_CORNER_SIZE = 3
};
bool PriorBoxParameter_CodeType_IsValid(int value);
const PriorBoxParameter_CodeType PriorBoxParameter_CodeType_CodeType_MIN = PriorBoxParameter_CodeType_CORNER;
const PriorBoxParameter_CodeType PriorBoxParameter_CodeType_CodeType_MAX = PriorBoxParameter_CodeType_CORNER_SIZE;
const int PriorBoxParameter_CodeType_CodeType_ARRAYSIZE = PriorBoxParameter_CodeType_CodeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PriorBoxParameter_CodeType_descriptor();
inline const ::std::string& PriorBoxParameter_CodeType_Name(PriorBoxParameter_CodeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PriorBoxParameter_CodeType_descriptor(), value);
}
inline bool PriorBoxParameter_CodeType_Parse(
    const ::std::string& name, PriorBoxParameter_CodeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PriorBoxParameter_CodeType>(
    PriorBoxParameter_CodeType_descriptor(), name, value);
}
enum ReductionParameter_ReductionOp {
  ReductionParameter_ReductionOp_SUM = 1,
  ReductionParameter_ReductionOp_ASUM = 2,
  ReductionParameter_ReductionOp_SUMSQ = 3,
  ReductionParameter_ReductionOp_MEAN = 4
};
bool ReductionParameter_ReductionOp_IsValid(int value);
const ReductionParameter_ReductionOp ReductionParameter_ReductionOp_ReductionOp_MIN = ReductionParameter_ReductionOp_SUM;
const ReductionParameter_ReductionOp ReductionParameter_ReductionOp_ReductionOp_MAX = ReductionParameter_ReductionOp_MEAN;
const int ReductionParameter_ReductionOp_ReductionOp_ARRAYSIZE = ReductionParameter_ReductionOp_ReductionOp_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReductionParameter_ReductionOp_descriptor();
inline const ::std::string& ReductionParameter_ReductionOp_Name(ReductionParameter_ReductionOp value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReductionParameter_ReductionOp_descriptor(), value);
}
inline bool ReductionParameter_ReductionOp_Parse(
    const ::std::string& name, ReductionParameter_ReductionOp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReductionParameter_ReductionOp>(
    ReductionParameter_ReductionOp_descriptor(), name, value);
}
enum ReLUParameter_Engine {
  ReLUParameter_Engine_DEFAULT = 0,
  ReLUParameter_Engine_CAFFE = 1,
  ReLUParameter_Engine_CUDNN = 2
};
bool ReLUParameter_Engine_IsValid(int value);
const ReLUParameter_Engine ReLUParameter_Engine_Engine_MIN = ReLUParameter_Engine_DEFAULT;
const ReLUParameter_Engine ReLUParameter_Engine_Engine_MAX = ReLUParameter_Engine_CUDNN;
const int ReLUParameter_Engine_Engine_ARRAYSIZE = ReLUParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReLUParameter_Engine_descriptor();
inline const ::std::string& ReLUParameter_Engine_Name(ReLUParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReLUParameter_Engine_descriptor(), value);
}
inline bool ReLUParameter_Engine_Parse(
    const ::std::string& name, ReLUParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReLUParameter_Engine>(
    ReLUParameter_Engine_descriptor(), name, value);
}
enum SigmoidParameter_Engine {
  SigmoidParameter_Engine_DEFAULT = 0,
  SigmoidParameter_Engine_CAFFE = 1,
  SigmoidParameter_Engine_CUDNN = 2
};
bool SigmoidParameter_Engine_IsValid(int value);
const SigmoidParameter_Engine SigmoidParameter_Engine_Engine_MIN = SigmoidParameter_Engine_DEFAULT;
const SigmoidParameter_Engine SigmoidParameter_Engine_Engine_MAX = SigmoidParameter_Engine_CUDNN;
const int SigmoidParameter_Engine_Engine_ARRAYSIZE = SigmoidParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* SigmoidParameter_Engine_descriptor();
inline const ::std::string& SigmoidParameter_Engine_Name(SigmoidParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    SigmoidParameter_Engine_descriptor(), value);
}
inline bool SigmoidParameter_Engine_Parse(
    const ::std::string& name, SigmoidParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SigmoidParameter_Engine>(
    SigmoidParameter_Engine_descriptor(), name, value);
}
enum SoftmaxParameter_Engine {
  SoftmaxParameter_Engine_DEFAULT = 0,
  SoftmaxParameter_Engine_CAFFE = 1,
  SoftmaxParameter_Engine_CUDNN = 2
};
bool SoftmaxParameter_Engine_IsValid(int value);
const SoftmaxParameter_Engine SoftmaxParameter_Engine_Engine_MIN = SoftmaxParameter_Engine_DEFAULT;
const SoftmaxParameter_Engine SoftmaxParameter_Engine_Engine_MAX = SoftmaxParameter_Engine_CUDNN;
const int SoftmaxParameter_Engine_Engine_ARRAYSIZE = SoftmaxParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* SoftmaxParameter_Engine_descriptor();
inline const ::std::string& SoftmaxParameter_Engine_Name(SoftmaxParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    SoftmaxParameter_Engine_descriptor(), value);
}
inline bool SoftmaxParameter_Engine_Parse(
    const ::std::string& name, SoftmaxParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SoftmaxParameter_Engine>(
    SoftmaxParameter_Engine_descriptor(), name, value);
}
enum TanHParameter_Engine {
  TanHParameter_Engine_DEFAULT = 0,
  TanHParameter_Engine_CAFFE = 1,
  TanHParameter_Engine_CUDNN = 2
};
bool TanHParameter_Engine_IsValid(int value);
const TanHParameter_Engine TanHParameter_Engine_Engine_MIN = TanHParameter_Engine_DEFAULT;
const TanHParameter_Engine TanHParameter_Engine_Engine_MAX = TanHParameter_Engine_CUDNN;
const int TanHParameter_Engine_Engine_ARRAYSIZE = TanHParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* TanHParameter_Engine_descriptor();
inline const ::std::string& TanHParameter_Engine_Name(TanHParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    TanHParameter_Engine_descriptor(), value);
}
inline bool TanHParameter_Engine_Parse(
    const ::std::string& name, TanHParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TanHParameter_Engine>(
    TanHParameter_Engine_descriptor(), name, value);
}
enum SPPParameter_PoolMethod {
  SPPParameter_PoolMethod_MAX = 0,
  SPPParameter_PoolMethod_AVE = 1,
  SPPParameter_PoolMethod_STOCHASTIC = 2
};
bool SPPParameter_PoolMethod_IsValid(int value);
const SPPParameter_PoolMethod SPPParameter_PoolMethod_PoolMethod_MIN = SPPParameter_PoolMethod_MAX;
const SPPParameter_PoolMethod SPPParameter_PoolMethod_PoolMethod_MAX = SPPParameter_PoolMethod_STOCHASTIC;
const int SPPParameter_PoolMethod_PoolMethod_ARRAYSIZE = SPPParameter_PoolMethod_PoolMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* SPPParameter_PoolMethod_descriptor();
inline const ::std::string& SPPParameter_PoolMethod_Name(SPPParameter_PoolMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    SPPParameter_PoolMethod_descriptor(), value);
}
inline bool SPPParameter_PoolMethod_Parse(
    const ::std::string& name, SPPParameter_PoolMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SPPParameter_PoolMethod>(
    SPPParameter_PoolMethod_descriptor(), name, value);
}
enum SPPParameter_Engine {
  SPPParameter_Engine_DEFAULT = 0,
  SPPParameter_Engine_CAFFE = 1,
  SPPParameter_Engine_CUDNN = 2
};
bool SPPParameter_Engine_IsValid(int value);
const SPPParameter_Engine SPPParameter_Engine_Engine_MIN = SPPParameter_Engine_DEFAULT;
const SPPParameter_Engine SPPParameter_Engine_Engine_MAX = SPPParameter_Engine_CUDNN;
const int SPPParameter_Engine_Engine_ARRAYSIZE = SPPParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* SPPParameter_Engine_descriptor();
inline const ::std::string& SPPParameter_Engine_Name(SPPParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    SPPParameter_Engine_descriptor(), value);
}
inline bool SPPParameter_Engine_Parse(
    const ::std::string& name, SPPParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SPPParameter_Engine>(
    SPPParameter_Engine_descriptor(), name, value);
}
enum V1LayerParameter_LayerType {
  V1LayerParameter_LayerType_NONE = 0,
  V1LayerParameter_LayerType_ABSVAL = 35,
  V1LayerParameter_LayerType_ACCURACY = 1,
  V1LayerParameter_LayerType_ARGMAX = 30,
  V1LayerParameter_LayerType_BNLL = 2,
  V1LayerParameter_LayerType_CONCAT = 3,
  V1LayerParameter_LayerType_CONTRASTIVE_LOSS = 37,
  V1LayerParameter_LayerType_CONVOLUTION = 4,
  V1LayerParameter_LayerType_DATA = 5,
  V1LayerParameter_LayerType_DECONVOLUTION = 39,
  V1LayerParameter_LayerType_DROPOUT = 6,
  V1LayerParameter_LayerType_DUMMY_DATA = 32,
  V1LayerParameter_LayerType_EUCLIDEAN_LOSS = 7,
  V1LayerParameter_LayerType_ELTWISE = 25,
  V1LayerParameter_LayerType_EXP = 38,
  V1LayerParameter_LayerType_FLATTEN = 8,
  V1LayerParameter_LayerType_HDF5_DATA = 9,
  V1LayerParameter_LayerType_HDF5_OUTPUT = 10,
  V1LayerParameter_LayerType_HINGE_LOSS = 28,
  V1LayerParameter_LayerType_IM2COL = 11,
  V1LayerParameter_LayerType_IMAGE_DATA = 12,
  V1LayerParameter_LayerType_INFOGAIN_LOSS = 13,
  V1LayerParameter_LayerType_INNER_PRODUCT = 14,
  V1LayerParameter_LayerType_LRN = 15,
  V1LayerParameter_LayerType_MEMORY_DATA = 29,
  V1LayerParameter_LayerType_MULTINOMIAL_LOGISTIC_LOSS = 16,
  V1LayerParameter_LayerType_MVN = 34,
  V1LayerParameter_LayerType_POOLING = 17,
  V1LayerParameter_LayerType_POWER = 26,
  V1LayerParameter_LayerType_RELU = 18,
  V1LayerParameter_LayerType_SIGMOID = 19,
  V1LayerParameter_LayerType_SIGMOID_CROSS_ENTROPY_LOSS = 27,
  V1LayerParameter_LayerType_SILENCE = 36,
  V1LayerParameter_LayerType_SOFTMAX = 20,
  V1LayerParameter_LayerType_SOFTMAX_LOSS = 21,
  V1LayerParameter_LayerType_SPLIT = 22,
  V1LayerParameter_LayerType_SLICE = 33,
  V1LayerParameter_LayerType_TANH = 23,
  V1LayerParameter_LayerType_WINDOW_DATA = 24,
  V1LayerParameter_LayerType_THRESHOLD = 31
};
bool V1LayerParameter_LayerType_IsValid(int value);
const V1LayerParameter_LayerType V1LayerParameter_LayerType_LayerType_MIN = V1LayerParameter_LayerType_NONE;
const V1LayerParameter_LayerType V1LayerParameter_LayerType_LayerType_MAX = V1LayerParameter_LayerType_DECONVOLUTION;
const int V1LayerParameter_LayerType_LayerType_ARRAYSIZE = V1LayerParameter_LayerType_LayerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* V1LayerParameter_LayerType_descriptor();
inline const ::std::string& V1LayerParameter_LayerType_Name(V1LayerParameter_LayerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    V1LayerParameter_LayerType_descriptor(), value);
}
inline bool V1LayerParameter_LayerType_Parse(
    const ::std::string& name, V1LayerParameter_LayerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<V1LayerParameter_LayerType>(
    V1LayerParameter_LayerType_descriptor(), name, value);
}
enum V1LayerParameter_DimCheckMode {
  V1LayerParameter_DimCheckMode_STRICT = 0,
  V1LayerParameter_DimCheckMode_PERMISSIVE = 1
};
bool V1LayerParameter_DimCheckMode_IsValid(int value);
const V1LayerParameter_DimCheckMode V1LayerParameter_DimCheckMode_DimCheckMode_MIN = V1LayerParameter_DimCheckMode_STRICT;
const V1LayerParameter_DimCheckMode V1LayerParameter_DimCheckMode_DimCheckMode_MAX = V1LayerParameter_DimCheckMode_PERMISSIVE;
const int V1LayerParameter_DimCheckMode_DimCheckMode_ARRAYSIZE = V1LayerParameter_DimCheckMode_DimCheckMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* V1LayerParameter_DimCheckMode_descriptor();
inline const ::std::string& V1LayerParameter_DimCheckMode_Name(V1LayerParameter_DimCheckMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    V1LayerParameter_DimCheckMode_descriptor(), value);
}
inline bool V1LayerParameter_DimCheckMode_Parse(
    const ::std::string& name, V1LayerParameter_DimCheckMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<V1LayerParameter_DimCheckMode>(
    V1LayerParameter_DimCheckMode_descriptor(), name, value);
}
enum V0LayerParameter_PoolMethod {
  V0LayerParameter_PoolMethod_MAX = 0,
  V0LayerParameter_PoolMethod_AVE = 1,
  V0LayerParameter_PoolMethod_STOCHASTIC = 2
};
bool V0LayerParameter_PoolMethod_IsValid(int value);
const V0LayerParameter_PoolMethod V0LayerParameter_PoolMethod_PoolMethod_MIN = V0LayerParameter_PoolMethod_MAX;
const V0LayerParameter_PoolMethod V0LayerParameter_PoolMethod_PoolMethod_MAX = V0LayerParameter_PoolMethod_STOCHASTIC;
const int V0LayerParameter_PoolMethod_PoolMethod_ARRAYSIZE = V0LayerParameter_PoolMethod_PoolMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* V0LayerParameter_PoolMethod_descriptor();
inline const ::std::string& V0LayerParameter_PoolMethod_Name(V0LayerParameter_PoolMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    V0LayerParameter_PoolMethod_descriptor(), value);
}
inline bool V0LayerParameter_PoolMethod_Parse(
    const ::std::string& name, V0LayerParameter_PoolMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<V0LayerParameter_PoolMethod>(
    V0LayerParameter_PoolMethod_descriptor(), name, value);
}
enum Type {
  DOUBLE = 0,
  FLOAT = 1,
  FLOAT16 = 2,
  INT = 3,
  UINT = 4
};
bool Type_IsValid(int value);
const Type Type_MIN = DOUBLE;
const Type Type_MAX = UINT;
const int Type_ARRAYSIZE = Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Type_descriptor();
inline const ::std::string& Type_Name(Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Type_descriptor(), value);
}
inline bool Type_Parse(
    const ::std::string& name, Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
enum Phase {
  TRAIN = 0,
  TEST = 1
};
bool Phase_IsValid(int value);
const Phase Phase_MIN = TRAIN;
const Phase Phase_MAX = TEST;
const int Phase_ARRAYSIZE = Phase_MAX + 1;

const ::google::protobuf::EnumDescriptor* Phase_descriptor();
inline const ::std::string& Phase_Name(Phase value) {
  return ::google::protobuf::internal::NameOfEnum(
    Phase_descriptor(), value);
}
inline bool Phase_Parse(
    const ::std::string& name, Phase* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Phase>(
    Phase_descriptor(), name, value);
}
// ===================================================================

class BlobShape : public ::google::protobuf::Message {
 public:
  BlobShape();
  virtual ~BlobShape();

  BlobShape(const BlobShape& from);

  inline BlobShape& operator=(const BlobShape& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobShape& default_instance();

  void Swap(BlobShape* other);

  // implements Message ----------------------------------------------

  BlobShape* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobShape& from);
  void MergeFrom(const BlobShape& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 dim = 1 [packed = true];
  inline int dim_size() const;
  inline void clear_dim();
  static const int kDimFieldNumber = 1;
  inline ::google::protobuf::int64 dim(int index) const;
  inline void set_dim(int index, ::google::protobuf::int64 value);
  inline void add_dim(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      dim() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_dim();

  // @@protoc_insertion_point(class_scope:caffe.BlobShape)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > dim_;
  mutable int _dim_cached_byte_size_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static BlobShape* default_instance_;
};
// -------------------------------------------------------------------

class BlobProto : public ::google::protobuf::Message {
 public:
  BlobProto();
  virtual ~BlobProto();

  BlobProto(const BlobProto& from);

  inline BlobProto& operator=(const BlobProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobProto& default_instance();

  void Swap(BlobProto* other);

  // implements Message ----------------------------------------------

  BlobProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobProto& from);
  void MergeFrom(const BlobProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.BlobShape shape = 7;
  inline bool has_shape() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 7;
  inline const ::caffe::BlobShape& shape() const;
  inline ::caffe::BlobShape* mutable_shape();
  inline ::caffe::BlobShape* release_shape();
  inline void set_allocated_shape(::caffe::BlobShape* shape);

  // repeated float data = 5 [packed = true];
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline float data(int index) const;
  inline void set_data(int index, float value);
  inline void add_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_data();

  // repeated float diff = 6 [packed = true];
  inline int diff_size() const;
  inline void clear_diff();
  static const int kDiffFieldNumber = 6;
  inline float diff(int index) const;
  inline void set_diff(int index, float value);
  inline void add_diff(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      diff() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_diff();

  // repeated double double_data = 8 [packed = true];
  inline int double_data_size() const;
  inline void clear_double_data();
  static const int kDoubleDataFieldNumber = 8;
  inline double double_data(int index) const;
  inline void set_double_data(int index, double value);
  inline void add_double_data(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      double_data() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_double_data();

  // repeated double double_diff = 9 [packed = true];
  inline int double_diff_size() const;
  inline void clear_double_diff();
  static const int kDoubleDiffFieldNumber = 9;
  inline double double_diff(int index) const;
  inline void set_double_diff(int index, double value);
  inline void add_double_diff(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      double_diff() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_double_diff();

  // optional .caffe.Type raw_data_type = 10;
  inline bool has_raw_data_type() const;
  inline void clear_raw_data_type();
  static const int kRawDataTypeFieldNumber = 10;
  inline ::caffe::Type raw_data_type() const;
  inline void set_raw_data_type(::caffe::Type value);

  // optional .caffe.Type raw_diff_type = 11;
  inline bool has_raw_diff_type() const;
  inline void clear_raw_diff_type();
  static const int kRawDiffTypeFieldNumber = 11;
  inline ::caffe::Type raw_diff_type() const;
  inline void set_raw_diff_type(::caffe::Type value);

  // optional bytes raw_data = 12 [packed = false];
  inline bool has_raw_data() const;
  inline void clear_raw_data();
  static const int kRawDataFieldNumber = 12;
  inline const ::std::string& raw_data() const;
  inline void set_raw_data(const ::std::string& value);
  inline void set_raw_data(const char* value);
  inline void set_raw_data(const void* value, size_t size);
  inline ::std::string* mutable_raw_data();
  inline ::std::string* release_raw_data();
  inline void set_allocated_raw_data(::std::string* raw_data);

  // optional bytes raw_diff = 13 [packed = false];
  inline bool has_raw_diff() const;
  inline void clear_raw_diff();
  static const int kRawDiffFieldNumber = 13;
  inline const ::std::string& raw_diff() const;
  inline void set_raw_diff(const ::std::string& value);
  inline void set_raw_diff(const char* value);
  inline void set_raw_diff(const void* value, size_t size);
  inline ::std::string* mutable_raw_diff();
  inline ::std::string* release_raw_diff();
  inline void set_allocated_raw_diff(::std::string* raw_diff);

  // optional int32 num = 1 [default = 0];
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 channels = 2 [default = 0];
  inline bool has_channels() const;
  inline void clear_channels();
  static const int kChannelsFieldNumber = 2;
  inline ::google::protobuf::int32 channels() const;
  inline void set_channels(::google::protobuf::int32 value);

  // optional int32 height = 3 [default = 0];
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // optional int32 width = 4 [default = 0];
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 4;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.BlobProto)
 private:
  inline void set_has_shape();
  inline void clear_has_shape();
  inline void set_has_raw_data_type();
  inline void clear_has_raw_data_type();
  inline void set_has_raw_diff_type();
  inline void clear_has_raw_diff_type();
  inline void set_has_raw_data();
  inline void clear_has_raw_data();
  inline void set_has_raw_diff();
  inline void clear_has_raw_diff();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_channels();
  inline void clear_has_channels();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width();
  inline void clear_has_width();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::caffe::BlobShape* shape_;
  ::google::protobuf::RepeatedField< float > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > diff_;
  mutable int _diff_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > double_data_;
  mutable int _double_data_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > double_diff_;
  mutable int _double_diff_cached_byte_size_;
  int raw_data_type_;
  int raw_diff_type_;
  ::std::string* raw_data_;
  ::std::string* raw_diff_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 channels_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 width_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static BlobProto* default_instance_;
};
// -------------------------------------------------------------------

class BlobProtoVector : public ::google::protobuf::Message {
 public:
  BlobProtoVector();
  virtual ~BlobProtoVector();

  BlobProtoVector(const BlobProtoVector& from);

  inline BlobProtoVector& operator=(const BlobProtoVector& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobProtoVector& default_instance();

  void Swap(BlobProtoVector* other);

  // implements Message ----------------------------------------------

  BlobProtoVector* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobProtoVector& from);
  void MergeFrom(const BlobProtoVector& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.BlobProto blobs = 1;
  inline int blobs_size() const;
  inline void clear_blobs();
  static const int kBlobsFieldNumber = 1;
  inline const ::caffe::BlobProto& blobs(int index) const;
  inline ::caffe::BlobProto* mutable_blobs(int index);
  inline ::caffe::BlobProto* add_blobs();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
      blobs() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
      mutable_blobs();

  // @@protoc_insertion_point(class_scope:caffe.BlobProtoVector)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto > blobs_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static BlobProtoVector* default_instance_;
};
// -------------------------------------------------------------------

class Datum : public ::google::protobuf::Message {
 public:
  Datum();
  virtual ~Datum();

  Datum(const Datum& from);

  inline Datum& operator=(const Datum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Datum& default_instance();

  void Swap(Datum* other);

  // implements Message ----------------------------------------------

  Datum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Datum& from);
  void MergeFrom(const Datum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 channels = 1;
  inline bool has_channels() const;
  inline void clear_channels();
  static const int kChannelsFieldNumber = 1;
  inline ::google::protobuf::int32 channels() const;
  inline void set_channels(::google::protobuf::int32 value);

  // optional int32 height = 2;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 2;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // optional int32 width = 3;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 3;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // optional bytes data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional int32 label = 5;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 5;
  inline ::google::protobuf::int32 label() const;
  inline void set_label(::google::protobuf::int32 value);

  // repeated float float_data = 6;
  inline int float_data_size() const;
  inline void clear_float_data();
  static const int kFloatDataFieldNumber = 6;
  inline float float_data(int index) const;
  inline void set_float_data(int index, float value);
  inline void add_float_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      float_data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_float_data();

  // optional bool encoded = 7 [default = false];
  inline bool has_encoded() const;
  inline void clear_encoded();
  static const int kEncodedFieldNumber = 7;
  inline bool encoded() const;
  inline void set_encoded(bool value);

  // optional uint32 record_id = 8 [default = 0];
  inline bool has_record_id() const;
  inline void clear_record_id();
  static const int kRecordIdFieldNumber = 8;
  inline ::google::protobuf::uint32 record_id() const;
  inline void set_record_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.Datum)
 private:
  inline void set_has_channels();
  inline void clear_has_channels();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_label();
  inline void clear_has_label();
  inline void set_has_encoded();
  inline void clear_has_encoded();
  inline void set_has_record_id();
  inline void clear_has_record_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 channels_;
  ::google::protobuf::int32 height_;
  ::std::string* data_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 label_;
  ::google::protobuf::RepeatedField< float > float_data_;
  bool encoded_;
  ::google::protobuf::uint32 record_id_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static Datum* default_instance_;
};
// -------------------------------------------------------------------

class LabelMapItem : public ::google::protobuf::Message {
 public:
  LabelMapItem();
  virtual ~LabelMapItem();

  LabelMapItem(const LabelMapItem& from);

  inline LabelMapItem& operator=(const LabelMapItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LabelMapItem& default_instance();

  void Swap(LabelMapItem* other);

  // implements Message ----------------------------------------------

  LabelMapItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LabelMapItem& from);
  void MergeFrom(const LabelMapItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 label = 2;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 2;
  inline ::google::protobuf::int32 label() const;
  inline void set_label(::google::protobuf::int32 value);

  // optional string display_name = 3;
  inline bool has_display_name() const;
  inline void clear_display_name();
  static const int kDisplayNameFieldNumber = 3;
  inline const ::std::string& display_name() const;
  inline void set_display_name(const ::std::string& value);
  inline void set_display_name(const char* value);
  inline void set_display_name(const char* value, size_t size);
  inline ::std::string* mutable_display_name();
  inline ::std::string* release_display_name();
  inline void set_allocated_display_name(::std::string* display_name);

  // @@protoc_insertion_point(class_scope:caffe.LabelMapItem)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_label();
  inline void clear_has_label();
  inline void set_has_display_name();
  inline void clear_has_display_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* display_name_;
  ::google::protobuf::int32 label_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static LabelMapItem* default_instance_;
};
// -------------------------------------------------------------------

class LabelMap : public ::google::protobuf::Message {
 public:
  LabelMap();
  virtual ~LabelMap();

  LabelMap(const LabelMap& from);

  inline LabelMap& operator=(const LabelMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LabelMap& default_instance();

  void Swap(LabelMap* other);

  // implements Message ----------------------------------------------

  LabelMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LabelMap& from);
  void MergeFrom(const LabelMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.LabelMapItem item = 1;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 1;
  inline const ::caffe::LabelMapItem& item(int index) const;
  inline ::caffe::LabelMapItem* mutable_item(int index);
  inline ::caffe::LabelMapItem* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::LabelMapItem >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::LabelMapItem >*
      mutable_item();

  // @@protoc_insertion_point(class_scope:caffe.LabelMap)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::LabelMapItem > item_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static LabelMap* default_instance_;
};
// -------------------------------------------------------------------

class Sampler : public ::google::protobuf::Message {
 public:
  Sampler();
  virtual ~Sampler();

  Sampler(const Sampler& from);

  inline Sampler& operator=(const Sampler& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sampler& default_instance();

  void Swap(Sampler* other);

  // implements Message ----------------------------------------------

  Sampler* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sampler& from);
  void MergeFrom(const Sampler& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float min_scale = 1 [default = 1];
  inline bool has_min_scale() const;
  inline void clear_min_scale();
  static const int kMinScaleFieldNumber = 1;
  inline float min_scale() const;
  inline void set_min_scale(float value);

  // optional float max_scale = 2 [default = 1];
  inline bool has_max_scale() const;
  inline void clear_max_scale();
  static const int kMaxScaleFieldNumber = 2;
  inline float max_scale() const;
  inline void set_max_scale(float value);

  // optional float min_aspect_ratio = 3 [default = 1];
  inline bool has_min_aspect_ratio() const;
  inline void clear_min_aspect_ratio();
  static const int kMinAspectRatioFieldNumber = 3;
  inline float min_aspect_ratio() const;
  inline void set_min_aspect_ratio(float value);

  // optional float max_aspect_ratio = 4 [default = 1];
  inline bool has_max_aspect_ratio() const;
  inline void clear_max_aspect_ratio();
  static const int kMaxAspectRatioFieldNumber = 4;
  inline float max_aspect_ratio() const;
  inline void set_max_aspect_ratio(float value);

  // @@protoc_insertion_point(class_scope:caffe.Sampler)
 private:
  inline void set_has_min_scale();
  inline void clear_has_min_scale();
  inline void set_has_max_scale();
  inline void clear_has_max_scale();
  inline void set_has_min_aspect_ratio();
  inline void clear_has_min_aspect_ratio();
  inline void set_has_max_aspect_ratio();
  inline void clear_has_max_aspect_ratio();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float min_scale_;
  float max_scale_;
  float min_aspect_ratio_;
  float max_aspect_ratio_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static Sampler* default_instance_;
};
// -------------------------------------------------------------------

class SampleConstraint : public ::google::protobuf::Message {
 public:
  SampleConstraint();
  virtual ~SampleConstraint();

  SampleConstraint(const SampleConstraint& from);

  inline SampleConstraint& operator=(const SampleConstraint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SampleConstraint& default_instance();

  void Swap(SampleConstraint* other);

  // implements Message ----------------------------------------------

  SampleConstraint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SampleConstraint& from);
  void MergeFrom(const SampleConstraint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float min_jaccard_overlap = 1;
  inline bool has_min_jaccard_overlap() const;
  inline void clear_min_jaccard_overlap();
  static const int kMinJaccardOverlapFieldNumber = 1;
  inline float min_jaccard_overlap() const;
  inline void set_min_jaccard_overlap(float value);

  // optional float max_jaccard_overlap = 2;
  inline bool has_max_jaccard_overlap() const;
  inline void clear_max_jaccard_overlap();
  static const int kMaxJaccardOverlapFieldNumber = 2;
  inline float max_jaccard_overlap() const;
  inline void set_max_jaccard_overlap(float value);

  // optional float min_sample_coverage = 3;
  inline bool has_min_sample_coverage() const;
  inline void clear_min_sample_coverage();
  static const int kMinSampleCoverageFieldNumber = 3;
  inline float min_sample_coverage() const;
  inline void set_min_sample_coverage(float value);

  // optional float max_sample_coverage = 4;
  inline bool has_max_sample_coverage() const;
  inline void clear_max_sample_coverage();
  static const int kMaxSampleCoverageFieldNumber = 4;
  inline float max_sample_coverage() const;
  inline void set_max_sample_coverage(float value);

  // optional float min_object_coverage = 5;
  inline bool has_min_object_coverage() const;
  inline void clear_min_object_coverage();
  static const int kMinObjectCoverageFieldNumber = 5;
  inline float min_object_coverage() const;
  inline void set_min_object_coverage(float value);

  // optional float max_object_coverage = 6;
  inline bool has_max_object_coverage() const;
  inline void clear_max_object_coverage();
  static const int kMaxObjectCoverageFieldNumber = 6;
  inline float max_object_coverage() const;
  inline void set_max_object_coverage(float value);

  // @@protoc_insertion_point(class_scope:caffe.SampleConstraint)
 private:
  inline void set_has_min_jaccard_overlap();
  inline void clear_has_min_jaccard_overlap();
  inline void set_has_max_jaccard_overlap();
  inline void clear_has_max_jaccard_overlap();
  inline void set_has_min_sample_coverage();
  inline void clear_has_min_sample_coverage();
  inline void set_has_max_sample_coverage();
  inline void clear_has_max_sample_coverage();
  inline void set_has_min_object_coverage();
  inline void clear_has_min_object_coverage();
  inline void set_has_max_object_coverage();
  inline void clear_has_max_object_coverage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float min_jaccard_overlap_;
  float max_jaccard_overlap_;
  float min_sample_coverage_;
  float max_sample_coverage_;
  float min_object_coverage_;
  float max_object_coverage_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static SampleConstraint* default_instance_;
};
// -------------------------------------------------------------------

class BatchSampler : public ::google::protobuf::Message {
 public:
  BatchSampler();
  virtual ~BatchSampler();

  BatchSampler(const BatchSampler& from);

  inline BatchSampler& operator=(const BatchSampler& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchSampler& default_instance();

  void Swap(BatchSampler* other);

  // implements Message ----------------------------------------------

  BatchSampler* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BatchSampler& from);
  void MergeFrom(const BatchSampler& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool use_original_image = 1 [default = true];
  inline bool has_use_original_image() const;
  inline void clear_use_original_image();
  static const int kUseOriginalImageFieldNumber = 1;
  inline bool use_original_image() const;
  inline void set_use_original_image(bool value);

  // optional .caffe.Sampler sampler = 2;
  inline bool has_sampler() const;
  inline void clear_sampler();
  static const int kSamplerFieldNumber = 2;
  inline const ::caffe::Sampler& sampler() const;
  inline ::caffe::Sampler* mutable_sampler();
  inline ::caffe::Sampler* release_sampler();
  inline void set_allocated_sampler(::caffe::Sampler* sampler);

  // optional .caffe.SampleConstraint sample_constraint = 3;
  inline bool has_sample_constraint() const;
  inline void clear_sample_constraint();
  static const int kSampleConstraintFieldNumber = 3;
  inline const ::caffe::SampleConstraint& sample_constraint() const;
  inline ::caffe::SampleConstraint* mutable_sample_constraint();
  inline ::caffe::SampleConstraint* release_sample_constraint();
  inline void set_allocated_sample_constraint(::caffe::SampleConstraint* sample_constraint);

  // optional uint32 max_sample = 4;
  inline bool has_max_sample() const;
  inline void clear_max_sample();
  static const int kMaxSampleFieldNumber = 4;
  inline ::google::protobuf::uint32 max_sample() const;
  inline void set_max_sample(::google::protobuf::uint32 value);

  // optional uint32 max_trials = 5 [default = 100];
  inline bool has_max_trials() const;
  inline void clear_max_trials();
  static const int kMaxTrialsFieldNumber = 5;
  inline ::google::protobuf::uint32 max_trials() const;
  inline void set_max_trials(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.BatchSampler)
 private:
  inline void set_has_use_original_image();
  inline void clear_has_use_original_image();
  inline void set_has_sampler();
  inline void clear_has_sampler();
  inline void set_has_sample_constraint();
  inline void clear_has_sample_constraint();
  inline void set_has_max_sample();
  inline void clear_has_max_sample();
  inline void set_has_max_trials();
  inline void clear_has_max_trials();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::caffe::Sampler* sampler_;
  bool use_original_image_;
  ::google::protobuf::uint32 max_sample_;
  ::caffe::SampleConstraint* sample_constraint_;
  ::google::protobuf::uint32 max_trials_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static BatchSampler* default_instance_;
};
// -------------------------------------------------------------------

class EmitConstraint : public ::google::protobuf::Message {
 public:
  EmitConstraint();
  virtual ~EmitConstraint();

  EmitConstraint(const EmitConstraint& from);

  inline EmitConstraint& operator=(const EmitConstraint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmitConstraint& default_instance();

  void Swap(EmitConstraint* other);

  // implements Message ----------------------------------------------

  EmitConstraint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmitConstraint& from);
  void MergeFrom(const EmitConstraint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef EmitConstraint_EmitType EmitType;
  static const EmitType CENTER = EmitConstraint_EmitType_CENTER;
  static const EmitType MIN_OVERLAP = EmitConstraint_EmitType_MIN_OVERLAP;
  static inline bool EmitType_IsValid(int value) {
    return EmitConstraint_EmitType_IsValid(value);
  }
  static const EmitType EmitType_MIN =
    EmitConstraint_EmitType_EmitType_MIN;
  static const EmitType EmitType_MAX =
    EmitConstraint_EmitType_EmitType_MAX;
  static const int EmitType_ARRAYSIZE =
    EmitConstraint_EmitType_EmitType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EmitType_descriptor() {
    return EmitConstraint_EmitType_descriptor();
  }
  static inline const ::std::string& EmitType_Name(EmitType value) {
    return EmitConstraint_EmitType_Name(value);
  }
  static inline bool EmitType_Parse(const ::std::string& name,
      EmitType* value) {
    return EmitConstraint_EmitType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.EmitConstraint.EmitType emit_type = 1 [default = CENTER];
  inline bool has_emit_type() const;
  inline void clear_emit_type();
  static const int kEmitTypeFieldNumber = 1;
  inline ::caffe::EmitConstraint_EmitType emit_type() const;
  inline void set_emit_type(::caffe::EmitConstraint_EmitType value);

  // optional float emit_overlap = 2;
  inline bool has_emit_overlap() const;
  inline void clear_emit_overlap();
  static const int kEmitOverlapFieldNumber = 2;
  inline float emit_overlap() const;
  inline void set_emit_overlap(float value);

  // @@protoc_insertion_point(class_scope:caffe.EmitConstraint)
 private:
  inline void set_has_emit_type();
  inline void clear_has_emit_type();
  inline void set_has_emit_overlap();
  inline void clear_has_emit_overlap();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int emit_type_;
  float emit_overlap_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static EmitConstraint* default_instance_;
};
// -------------------------------------------------------------------

class NormalizedBBox : public ::google::protobuf::Message {
 public:
  NormalizedBBox();
  virtual ~NormalizedBBox();

  NormalizedBBox(const NormalizedBBox& from);

  inline NormalizedBBox& operator=(const NormalizedBBox& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NormalizedBBox& default_instance();

  void Swap(NormalizedBBox* other);

  // implements Message ----------------------------------------------

  NormalizedBBox* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NormalizedBBox& from);
  void MergeFrom(const NormalizedBBox& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float xmin = 1;
  inline bool has_xmin() const;
  inline void clear_xmin();
  static const int kXminFieldNumber = 1;
  inline float xmin() const;
  inline void set_xmin(float value);

  // optional float ymin = 2;
  inline bool has_ymin() const;
  inline void clear_ymin();
  static const int kYminFieldNumber = 2;
  inline float ymin() const;
  inline void set_ymin(float value);

  // optional float xmax = 3;
  inline bool has_xmax() const;
  inline void clear_xmax();
  static const int kXmaxFieldNumber = 3;
  inline float xmax() const;
  inline void set_xmax(float value);

  // optional float ymax = 4;
  inline bool has_ymax() const;
  inline void clear_ymax();
  static const int kYmaxFieldNumber = 4;
  inline float ymax() const;
  inline void set_ymax(float value);

  // optional int32 label = 5;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 5;
  inline ::google::protobuf::int32 label() const;
  inline void set_label(::google::protobuf::int32 value);

  // optional bool difficult = 6;
  inline bool has_difficult() const;
  inline void clear_difficult();
  static const int kDifficultFieldNumber = 6;
  inline bool difficult() const;
  inline void set_difficult(bool value);

  // optional float score = 7;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 7;
  inline float score() const;
  inline void set_score(float value);

  // optional float size = 8;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 8;
  inline float size() const;
  inline void set_size(float value);

  // @@protoc_insertion_point(class_scope:caffe.NormalizedBBox)
 private:
  inline void set_has_xmin();
  inline void clear_has_xmin();
  inline void set_has_ymin();
  inline void clear_has_ymin();
  inline void set_has_xmax();
  inline void clear_has_xmax();
  inline void set_has_ymax();
  inline void clear_has_ymax();
  inline void set_has_label();
  inline void clear_has_label();
  inline void set_has_difficult();
  inline void clear_has_difficult();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_size();
  inline void clear_has_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float xmin_;
  float ymin_;
  float xmax_;
  float ymax_;
  ::google::protobuf::int32 label_;
  bool difficult_;
  float score_;
  float size_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static NormalizedBBox* default_instance_;
};
// -------------------------------------------------------------------

class Annotation : public ::google::protobuf::Message {
 public:
  Annotation();
  virtual ~Annotation();

  Annotation(const Annotation& from);

  inline Annotation& operator=(const Annotation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Annotation& default_instance();

  void Swap(Annotation* other);

  // implements Message ----------------------------------------------

  Annotation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Annotation& from);
  void MergeFrom(const Annotation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 instance_id = 1 [default = 0];
  inline bool has_instance_id() const;
  inline void clear_instance_id();
  static const int kInstanceIdFieldNumber = 1;
  inline ::google::protobuf::int32 instance_id() const;
  inline void set_instance_id(::google::protobuf::int32 value);

  // optional .caffe.NormalizedBBox bbox = 2;
  inline bool has_bbox() const;
  inline void clear_bbox();
  static const int kBboxFieldNumber = 2;
  inline const ::caffe::NormalizedBBox& bbox() const;
  inline ::caffe::NormalizedBBox* mutable_bbox();
  inline ::caffe::NormalizedBBox* release_bbox();
  inline void set_allocated_bbox(::caffe::NormalizedBBox* bbox);

  // @@protoc_insertion_point(class_scope:caffe.Annotation)
 private:
  inline void set_has_instance_id();
  inline void clear_has_instance_id();
  inline void set_has_bbox();
  inline void clear_has_bbox();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::caffe::NormalizedBBox* bbox_;
  ::google::protobuf::int32 instance_id_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static Annotation* default_instance_;
};
// -------------------------------------------------------------------

class AnnotationGroup : public ::google::protobuf::Message {
 public:
  AnnotationGroup();
  virtual ~AnnotationGroup();

  AnnotationGroup(const AnnotationGroup& from);

  inline AnnotationGroup& operator=(const AnnotationGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnnotationGroup& default_instance();

  void Swap(AnnotationGroup* other);

  // implements Message ----------------------------------------------

  AnnotationGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnnotationGroup& from);
  void MergeFrom(const AnnotationGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 group_label = 1;
  inline bool has_group_label() const;
  inline void clear_group_label();
  static const int kGroupLabelFieldNumber = 1;
  inline ::google::protobuf::int32 group_label() const;
  inline void set_group_label(::google::protobuf::int32 value);

  // repeated .caffe.Annotation annotation = 2;
  inline int annotation_size() const;
  inline void clear_annotation();
  static const int kAnnotationFieldNumber = 2;
  inline const ::caffe::Annotation& annotation(int index) const;
  inline ::caffe::Annotation* mutable_annotation(int index);
  inline ::caffe::Annotation* add_annotation();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::Annotation >&
      annotation() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::Annotation >*
      mutable_annotation();

  // @@protoc_insertion_point(class_scope:caffe.AnnotationGroup)
 private:
  inline void set_has_group_label();
  inline void clear_has_group_label();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::Annotation > annotation_;
  ::google::protobuf::int32 group_label_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static AnnotationGroup* default_instance_;
};
// -------------------------------------------------------------------

class AnnotatedDatum : public ::google::protobuf::Message {
 public:
  AnnotatedDatum();
  virtual ~AnnotatedDatum();

  AnnotatedDatum(const AnnotatedDatum& from);

  inline AnnotatedDatum& operator=(const AnnotatedDatum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnnotatedDatum& default_instance();

  void Swap(AnnotatedDatum* other);

  // implements Message ----------------------------------------------

  AnnotatedDatum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnnotatedDatum& from);
  void MergeFrom(const AnnotatedDatum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AnnotatedDatum_AnnotationType AnnotationType;
  static const AnnotationType BBOX = AnnotatedDatum_AnnotationType_BBOX;
  static inline bool AnnotationType_IsValid(int value) {
    return AnnotatedDatum_AnnotationType_IsValid(value);
  }
  static const AnnotationType AnnotationType_MIN =
    AnnotatedDatum_AnnotationType_AnnotationType_MIN;
  static const AnnotationType AnnotationType_MAX =
    AnnotatedDatum_AnnotationType_AnnotationType_MAX;
  static const int AnnotationType_ARRAYSIZE =
    AnnotatedDatum_AnnotationType_AnnotationType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AnnotationType_descriptor() {
    return AnnotatedDatum_AnnotationType_descriptor();
  }
  static inline const ::std::string& AnnotationType_Name(AnnotationType value) {
    return AnnotatedDatum_AnnotationType_Name(value);
  }
  static inline bool AnnotationType_Parse(const ::std::string& name,
      AnnotationType* value) {
    return AnnotatedDatum_AnnotationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.Datum datum = 1;
  inline bool has_datum() const;
  inline void clear_datum();
  static const int kDatumFieldNumber = 1;
  inline const ::caffe::Datum& datum() const;
  inline ::caffe::Datum* mutable_datum();
  inline ::caffe::Datum* release_datum();
  inline void set_allocated_datum(::caffe::Datum* datum);

  // optional .caffe.AnnotatedDatum.AnnotationType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::caffe::AnnotatedDatum_AnnotationType type() const;
  inline void set_type(::caffe::AnnotatedDatum_AnnotationType value);

  // repeated .caffe.AnnotationGroup annotation_group = 3;
  inline int annotation_group_size() const;
  inline void clear_annotation_group();
  static const int kAnnotationGroupFieldNumber = 3;
  inline const ::caffe::AnnotationGroup& annotation_group(int index) const;
  inline ::caffe::AnnotationGroup* mutable_annotation_group(int index);
  inline ::caffe::AnnotationGroup* add_annotation_group();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::AnnotationGroup >&
      annotation_group() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::AnnotationGroup >*
      mutable_annotation_group();

  // optional bool encoded = 4 [default = false];
  inline bool has_encoded() const;
  inline void clear_encoded();
  static const int kEncodedFieldNumber = 4;
  inline bool encoded() const;
  inline void set_encoded(bool value);

  // optional uint32 record_id = 5 [default = 0];
  inline bool has_record_id() const;
  inline void clear_record_id();
  static const int kRecordIdFieldNumber = 5;
  inline ::google::protobuf::uint32 record_id() const;
  inline void set_record_id(::google::protobuf::uint32 value);

  // optional int32 label = 6;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 6;
  inline ::google::protobuf::int32 label() const;
  inline void set_label(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.AnnotatedDatum)
 private:
  inline void set_has_datum();
  inline void clear_has_datum();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_encoded();
  inline void clear_has_encoded();
  inline void set_has_record_id();
  inline void clear_has_record_id();
  inline void set_has_label();
  inline void clear_has_label();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::caffe::Datum* datum_;
  ::google::protobuf::RepeatedPtrField< ::caffe::AnnotationGroup > annotation_group_;
  int type_;
  bool encoded_;
  ::google::protobuf::uint32 record_id_;
  ::google::protobuf::int32 label_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static AnnotatedDatum* default_instance_;
};
// -------------------------------------------------------------------

class FillerParameter : public ::google::protobuf::Message {
 public:
  FillerParameter();
  virtual ~FillerParameter();

  FillerParameter(const FillerParameter& from);

  inline FillerParameter& operator=(const FillerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FillerParameter& default_instance();

  void Swap(FillerParameter* other);

  // implements Message ----------------------------------------------

  FillerParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FillerParameter& from);
  void MergeFrom(const FillerParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FillerParameter_VarianceNorm VarianceNorm;
  static const VarianceNorm FAN_IN = FillerParameter_VarianceNorm_FAN_IN;
  static const VarianceNorm FAN_OUT = FillerParameter_VarianceNorm_FAN_OUT;
  static const VarianceNorm AVERAGE = FillerParameter_VarianceNorm_AVERAGE;
  static inline bool VarianceNorm_IsValid(int value) {
    return FillerParameter_VarianceNorm_IsValid(value);
  }
  static const VarianceNorm VarianceNorm_MIN =
    FillerParameter_VarianceNorm_VarianceNorm_MIN;
  static const VarianceNorm VarianceNorm_MAX =
    FillerParameter_VarianceNorm_VarianceNorm_MAX;
  static const int VarianceNorm_ARRAYSIZE =
    FillerParameter_VarianceNorm_VarianceNorm_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VarianceNorm_descriptor() {
    return FillerParameter_VarianceNorm_descriptor();
  }
  static inline const ::std::string& VarianceNorm_Name(VarianceNorm value) {
    return FillerParameter_VarianceNorm_Name(value);
  }
  static inline bool VarianceNorm_Parse(const ::std::string& name,
      VarianceNorm* value) {
    return FillerParameter_VarianceNorm_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string type = 1 [default = "constant"];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional float value = 2 [default = 0];
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline float value() const;
  inline void set_value(float value);

  // optional float min = 3 [default = 0];
  inline bool has_min() const;
  inline void clear_min();
  static const int kMinFieldNumber = 3;
  inline float min() const;
  inline void set_min(float value);

  // optional float max = 4 [default = 1];
  inline bool has_max() const;
  inline void clear_max();
  static const int kMaxFieldNumber = 4;
  inline float max() const;
  inline void set_max(float value);

  // optional float mean = 5 [default = 0];
  inline bool has_mean() const;
  inline void clear_mean();
  static const int kMeanFieldNumber = 5;
  inline float mean() const;
  inline void set_mean(float value);

  // optional float std = 6 [default = 1];
  inline bool has_std() const;
  inline void clear_std();
  static const int kStdFieldNumber = 6;
  inline float std() const;
  inline void set_std(float value);

  // optional int32 sparse = 7 [default = -1];
  inline bool has_sparse() const;
  inline void clear_sparse();
  static const int kSparseFieldNumber = 7;
  inline ::google::protobuf::int32 sparse() const;
  inline void set_sparse(::google::protobuf::int32 value);

  // optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
  inline bool has_variance_norm() const;
  inline void clear_variance_norm();
  static const int kVarianceNormFieldNumber = 8;
  inline ::caffe::FillerParameter_VarianceNorm variance_norm() const;
  inline void set_variance_norm(::caffe::FillerParameter_VarianceNorm value);

  // @@protoc_insertion_point(class_scope:caffe.FillerParameter)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_min();
  inline void clear_has_min();
  inline void set_has_max();
  inline void clear_has_max();
  inline void set_has_mean();
  inline void clear_has_mean();
  inline void set_has_std();
  inline void clear_has_std();
  inline void set_has_sparse();
  inline void clear_has_sparse();
  inline void set_has_variance_norm();
  inline void clear_has_variance_norm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_type_;
  ::std::string* type_;
  float value_;
  float min_;
  float max_;
  float mean_;
  float std_;
  ::google::protobuf::int32 sparse_;
  int variance_norm_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static FillerParameter* default_instance_;
};
// -------------------------------------------------------------------

class NetParameter : public ::google::protobuf::Message {
 public:
  NetParameter();
  virtual ~NetParameter();

  NetParameter(const NetParameter& from);

  inline NetParameter& operator=(const NetParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetParameter& default_instance();

  void Swap(NetParameter* other);

  // implements Message ----------------------------------------------

  NetParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetParameter& from);
  void MergeFrom(const NetParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated string input = 3;
  inline int input_size() const;
  inline void clear_input();
  static const int kInputFieldNumber = 3;
  inline const ::std::string& input(int index) const;
  inline ::std::string* mutable_input(int index);
  inline void set_input(int index, const ::std::string& value);
  inline void set_input(int index, const char* value);
  inline void set_input(int index, const char* value, size_t size);
  inline ::std::string* add_input();
  inline void add_input(const ::std::string& value);
  inline void add_input(const char* value);
  inline void add_input(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& input() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_input();

  // repeated .caffe.BlobShape input_shape = 8;
  inline int input_shape_size() const;
  inline void clear_input_shape();
  static const int kInputShapeFieldNumber = 8;
  inline const ::caffe::BlobShape& input_shape(int index) const;
  inline ::caffe::BlobShape* mutable_input_shape(int index);
  inline ::caffe::BlobShape* add_input_shape();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
      input_shape() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
      mutable_input_shape();

  // repeated int32 input_dim = 4;
  inline int input_dim_size() const;
  inline void clear_input_dim();
  static const int kInputDimFieldNumber = 4;
  inline ::google::protobuf::int32 input_dim(int index) const;
  inline void set_input_dim(int index, ::google::protobuf::int32 value);
  inline void add_input_dim(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      input_dim() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_input_dim();

  // optional bool force_backward = 5 [default = false];
  inline bool has_force_backward() const;
  inline void clear_force_backward();
  static const int kForceBackwardFieldNumber = 5;
  inline bool force_backward() const;
  inline void set_force_backward(bool value);

  // optional .caffe.NetState state = 6;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 6;
  inline const ::caffe::NetState& state() const;
  inline ::caffe::NetState* mutable_state();
  inline ::caffe::NetState* release_state();
  inline void set_allocated_state(::caffe::NetState* state);

  // optional bool debug_info = 7 [default = false];
  inline bool has_debug_info() const;
  inline void clear_debug_info();
  static const int kDebugInfoFieldNumber = 7;
  inline bool debug_info() const;
  inline void set_debug_info(bool value);

  // repeated .caffe.LayerParameter layer = 100;
  inline int layer_size() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 100;
  inline const ::caffe::LayerParameter& layer(int index) const;
  inline ::caffe::LayerParameter* mutable_layer(int index);
  inline ::caffe::LayerParameter* add_layer();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >&
      layer() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >*
      mutable_layer();

  // repeated .caffe.V1LayerParameter layers = 2;
  inline int layers_size() const;
  inline void clear_layers();
  static const int kLayersFieldNumber = 2;
  inline const ::caffe::V1LayerParameter& layers(int index) const;
  inline ::caffe::V1LayerParameter* mutable_layers(int index);
  inline ::caffe::V1LayerParameter* add_layers();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::V1LayerParameter >&
      layers() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::V1LayerParameter >*
      mutable_layers();

  // optional .caffe.Type default_forward_type = 11 [default = FLOAT];
  inline bool has_default_forward_type() const;
  inline void clear_default_forward_type();
  static const int kDefaultForwardTypeFieldNumber = 11;
  inline ::caffe::Type default_forward_type() const;
  inline void set_default_forward_type(::caffe::Type value);

  // optional .caffe.Type default_backward_type = 12 [default = FLOAT];
  inline bool has_default_backward_type() const;
  inline void clear_default_backward_type();
  static const int kDefaultBackwardTypeFieldNumber = 12;
  inline ::caffe::Type default_backward_type() const;
  inline void set_default_backward_type(::caffe::Type value);

  // optional .caffe.Type default_forward_math = 13 [default = FLOAT];
  inline bool has_default_forward_math() const;
  inline void clear_default_forward_math();
  static const int kDefaultForwardMathFieldNumber = 13;
  inline ::caffe::Type default_forward_math() const;
  inline void set_default_forward_math(::caffe::Type value);

  // optional .caffe.Type default_backward_math = 14 [default = FLOAT];
  inline bool has_default_backward_math() const;
  inline void clear_default_backward_math();
  static const int kDefaultBackwardMathFieldNumber = 14;
  inline ::caffe::Type default_backward_math() const;
  inline void set_default_backward_math(::caffe::Type value);

  // optional string default_conv_algos_override = 17 [default = "-1,-1,-1"];
  inline bool has_default_conv_algos_override() const;
  inline void clear_default_conv_algos_override();
  static const int kDefaultConvAlgosOverrideFieldNumber = 17;
  inline const ::std::string& default_conv_algos_override() const;
  inline void set_default_conv_algos_override(const ::std::string& value);
  inline void set_default_conv_algos_override(const char* value);
  inline void set_default_conv_algos_override(const char* value, size_t size);
  inline ::std::string* mutable_default_conv_algos_override();
  inline ::std::string* release_default_conv_algos_override();
  inline void set_allocated_default_conv_algos_override(::std::string* default_conv_algos_override);

  // optional int32 reduce_buckets = 18 [default = 6];
  inline bool has_reduce_buckets() const;
  inline void clear_reduce_buckets();
  static const int kReduceBucketsFieldNumber = 18;
  inline ::google::protobuf::int32 reduce_buckets() const;
  inline void set_reduce_buckets(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.NetParameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_force_backward();
  inline void clear_has_force_backward();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_debug_info();
  inline void clear_has_debug_info();
  inline void set_has_default_forward_type();
  inline void clear_has_default_forward_type();
  inline void set_has_default_backward_type();
  inline void clear_has_default_backward_type();
  inline void set_has_default_forward_math();
  inline void clear_has_default_forward_math();
  inline void set_has_default_backward_math();
  inline void clear_has_default_backward_math();
  inline void set_has_default_conv_algos_override();
  inline void clear_has_default_conv_algos_override();
  inline void set_has_reduce_buckets();
  inline void clear_has_reduce_buckets();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> input_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape > input_shape_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > input_dim_;
  ::caffe::NetState* state_;
  bool force_backward_;
  bool debug_info_;
  int default_forward_type_;
  ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter > layer_;
  ::google::protobuf::RepeatedPtrField< ::caffe::V1LayerParameter > layers_;
  int default_backward_type_;
  int default_forward_math_;
  static ::std::string* _default_default_conv_algos_override_;
  ::std::string* default_conv_algos_override_;
  int default_backward_math_;
  ::google::protobuf::int32 reduce_buckets_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static NetParameter* default_instance_;
};
// -------------------------------------------------------------------

class SolverParameter : public ::google::protobuf::Message {
 public:
  SolverParameter();
  virtual ~SolverParameter();

  SolverParameter(const SolverParameter& from);

  inline SolverParameter& operator=(const SolverParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolverParameter& default_instance();

  void Swap(SolverParameter* other);

  // implements Message ----------------------------------------------

  SolverParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SolverParameter& from);
  void MergeFrom(const SolverParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SolverParameter_SnapshotFormat SnapshotFormat;
  static const SnapshotFormat HDF5 = SolverParameter_SnapshotFormat_HDF5;
  static const SnapshotFormat BINARYPROTO = SolverParameter_SnapshotFormat_BINARYPROTO;
  static inline bool SnapshotFormat_IsValid(int value) {
    return SolverParameter_SnapshotFormat_IsValid(value);
  }
  static const SnapshotFormat SnapshotFormat_MIN =
    SolverParameter_SnapshotFormat_SnapshotFormat_MIN;
  static const SnapshotFormat SnapshotFormat_MAX =
    SolverParameter_SnapshotFormat_SnapshotFormat_MAX;
  static const int SnapshotFormat_ARRAYSIZE =
    SolverParameter_SnapshotFormat_SnapshotFormat_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SnapshotFormat_descriptor() {
    return SolverParameter_SnapshotFormat_descriptor();
  }
  static inline const ::std::string& SnapshotFormat_Name(SnapshotFormat value) {
    return SolverParameter_SnapshotFormat_Name(value);
  }
  static inline bool SnapshotFormat_Parse(const ::std::string& name,
      SnapshotFormat* value) {
    return SolverParameter_SnapshotFormat_Parse(name, value);
  }

  typedef SolverParameter_SolverMode SolverMode;
  static const SolverMode CPU = SolverParameter_SolverMode_CPU;
  static const SolverMode GPU = SolverParameter_SolverMode_GPU;
  static inline bool SolverMode_IsValid(int value) {
    return SolverParameter_SolverMode_IsValid(value);
  }
  static const SolverMode SolverMode_MIN =
    SolverParameter_SolverMode_SolverMode_MIN;
  static const SolverMode SolverMode_MAX =
    SolverParameter_SolverMode_SolverMode_MAX;
  static const int SolverMode_ARRAYSIZE =
    SolverParameter_SolverMode_SolverMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SolverMode_descriptor() {
    return SolverParameter_SolverMode_descriptor();
  }
  static inline const ::std::string& SolverMode_Name(SolverMode value) {
    return SolverParameter_SolverMode_Name(value);
  }
  static inline bool SolverMode_Parse(const ::std::string& name,
      SolverMode* value) {
    return SolverParameter_SolverMode_Parse(name, value);
  }

  typedef SolverParameter_SolverType SolverType;
  static const SolverType SGD = SolverParameter_SolverType_SGD;
  static const SolverType NESTEROV = SolverParameter_SolverType_NESTEROV;
  static const SolverType ADAGRAD = SolverParameter_SolverType_ADAGRAD;
  static const SolverType RMSPROP = SolverParameter_SolverType_RMSPROP;
  static const SolverType ADADELTA = SolverParameter_SolverType_ADADELTA;
  static const SolverType ADAM = SolverParameter_SolverType_ADAM;
  static inline bool SolverType_IsValid(int value) {
    return SolverParameter_SolverType_IsValid(value);
  }
  static const SolverType SolverType_MIN =
    SolverParameter_SolverType_SolverType_MIN;
  static const SolverType SolverType_MAX =
    SolverParameter_SolverType_SolverType_MAX;
  static const int SolverType_ARRAYSIZE =
    SolverParameter_SolverType_SolverType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SolverType_descriptor() {
    return SolverParameter_SolverType_descriptor();
  }
  static inline const ::std::string& SolverType_Name(SolverType value) {
    return SolverParameter_SolverType_Name(value);
  }
  static inline bool SolverType_Parse(const ::std::string& name,
      SolverType* value) {
    return SolverParameter_SolverType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string net = 24;
  inline bool has_net() const;
  inline void clear_net();
  static const int kNetFieldNumber = 24;
  inline const ::std::string& net() const;
  inline void set_net(const ::std::string& value);
  inline void set_net(const char* value);
  inline void set_net(const char* value, size_t size);
  inline ::std::string* mutable_net();
  inline ::std::string* release_net();
  inline void set_allocated_net(::std::string* net);

  // optional .caffe.NetParameter net_param = 25;
  inline bool has_net_param() const;
  inline void clear_net_param();
  static const int kNetParamFieldNumber = 25;
  inline const ::caffe::NetParameter& net_param() const;
  inline ::caffe::NetParameter* mutable_net_param();
  inline ::caffe::NetParameter* release_net_param();
  inline void set_allocated_net_param(::caffe::NetParameter* net_param);

  // optional string train_net = 1;
  inline bool has_train_net() const;
  inline void clear_train_net();
  static const int kTrainNetFieldNumber = 1;
  inline const ::std::string& train_net() const;
  inline void set_train_net(const ::std::string& value);
  inline void set_train_net(const char* value);
  inline void set_train_net(const char* value, size_t size);
  inline ::std::string* mutable_train_net();
  inline ::std::string* release_train_net();
  inline void set_allocated_train_net(::std::string* train_net);

  // repeated string test_net = 2;
  inline int test_net_size() const;
  inline void clear_test_net();
  static const int kTestNetFieldNumber = 2;
  inline const ::std::string& test_net(int index) const;
  inline ::std::string* mutable_test_net(int index);
  inline void set_test_net(int index, const ::std::string& value);
  inline void set_test_net(int index, const char* value);
  inline void set_test_net(int index, const char* value, size_t size);
  inline ::std::string* add_test_net();
  inline void add_test_net(const ::std::string& value);
  inline void add_test_net(const char* value);
  inline void add_test_net(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& test_net() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_test_net();

  // optional .caffe.NetParameter train_net_param = 21;
  inline bool has_train_net_param() const;
  inline void clear_train_net_param();
  static const int kTrainNetParamFieldNumber = 21;
  inline const ::caffe::NetParameter& train_net_param() const;
  inline ::caffe::NetParameter* mutable_train_net_param();
  inline ::caffe::NetParameter* release_train_net_param();
  inline void set_allocated_train_net_param(::caffe::NetParameter* train_net_param);

  // repeated .caffe.NetParameter test_net_param = 22;
  inline int test_net_param_size() const;
  inline void clear_test_net_param();
  static const int kTestNetParamFieldNumber = 22;
  inline const ::caffe::NetParameter& test_net_param(int index) const;
  inline ::caffe::NetParameter* mutable_test_net_param(int index);
  inline ::caffe::NetParameter* add_test_net_param();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter >&
      test_net_param() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter >*
      mutable_test_net_param();

  // optional .caffe.NetState train_state = 26;
  inline bool has_train_state() const;
  inline void clear_train_state();
  static const int kTrainStateFieldNumber = 26;
  inline const ::caffe::NetState& train_state() const;
  inline ::caffe::NetState* mutable_train_state();
  inline ::caffe::NetState* release_train_state();
  inline void set_allocated_train_state(::caffe::NetState* train_state);

  // repeated .caffe.NetState test_state = 27;
  inline int test_state_size() const;
  inline void clear_test_state();
  static const int kTestStateFieldNumber = 27;
  inline const ::caffe::NetState& test_state(int index) const;
  inline ::caffe::NetState* mutable_test_state(int index);
  inline ::caffe::NetState* add_test_state();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetState >&
      test_state() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::NetState >*
      mutable_test_state();

  // repeated int32 test_iter = 3;
  inline int test_iter_size() const;
  inline void clear_test_iter();
  static const int kTestIterFieldNumber = 3;
  inline ::google::protobuf::int32 test_iter(int index) const;
  inline void set_test_iter(int index, ::google::protobuf::int32 value);
  inline void add_test_iter(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      test_iter() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_test_iter();

  // optional int32 test_interval = 4 [default = 0];
  inline bool has_test_interval() const;
  inline void clear_test_interval();
  static const int kTestIntervalFieldNumber = 4;
  inline ::google::protobuf::int32 test_interval() const;
  inline void set_test_interval(::google::protobuf::int32 value);

  // optional bool test_compute_loss = 19 [default = false];
  inline bool has_test_compute_loss() const;
  inline void clear_test_compute_loss();
  static const int kTestComputeLossFieldNumber = 19;
  inline bool test_compute_loss() const;
  inline void set_test_compute_loss(bool value);

  // optional bool test_initialization = 32 [default = true];
  inline bool has_test_initialization() const;
  inline void clear_test_initialization();
  static const int kTestInitializationFieldNumber = 32;
  inline bool test_initialization() const;
  inline void set_test_initialization(bool value);

  // optional int32 rampup_interval = 41 [default = 0];
  inline bool has_rampup_interval() const;
  inline void clear_rampup_interval();
  static const int kRampupIntervalFieldNumber = 41;
  inline ::google::protobuf::int32 rampup_interval() const;
  inline void set_rampup_interval(::google::protobuf::int32 value);

  // optional float rampup_lr = 42 [default = 0];
  inline bool has_rampup_lr() const;
  inline void clear_rampup_lr();
  static const int kRampupLrFieldNumber = 42;
  inline float rampup_lr() const;
  inline void set_rampup_lr(float value);

  // optional float min_lr = 43 [default = 0];
  inline bool has_min_lr() const;
  inline void clear_min_lr();
  static const int kMinLrFieldNumber = 43;
  inline float min_lr() const;
  inline void set_min_lr(float value);

  // optional float base_lr = 5;
  inline bool has_base_lr() const;
  inline void clear_base_lr();
  static const int kBaseLrFieldNumber = 5;
  inline float base_lr() const;
  inline void set_base_lr(float value);

  // optional int32 display = 6;
  inline bool has_display() const;
  inline void clear_display();
  static const int kDisplayFieldNumber = 6;
  inline ::google::protobuf::int32 display() const;
  inline void set_display(::google::protobuf::int32 value);

  // optional int32 average_loss = 33 [default = 1];
  inline bool has_average_loss() const;
  inline void clear_average_loss();
  static const int kAverageLossFieldNumber = 33;
  inline ::google::protobuf::int32 average_loss() const;
  inline void set_average_loss(::google::protobuf::int32 value);

  // optional int32 max_iter = 7;
  inline bool has_max_iter() const;
  inline void clear_max_iter();
  static const int kMaxIterFieldNumber = 7;
  inline ::google::protobuf::int32 max_iter() const;
  inline void set_max_iter(::google::protobuf::int32 value);

  // optional int32 iter_size = 36 [default = 1];
  inline bool has_iter_size() const;
  inline void clear_iter_size();
  static const int kIterSizeFieldNumber = 36;
  inline ::google::protobuf::int32 iter_size() const;
  inline void set_iter_size(::google::protobuf::int32 value);

  // optional string lr_policy = 8;
  inline bool has_lr_policy() const;
  inline void clear_lr_policy();
  static const int kLrPolicyFieldNumber = 8;
  inline const ::std::string& lr_policy() const;
  inline void set_lr_policy(const ::std::string& value);
  inline void set_lr_policy(const char* value);
  inline void set_lr_policy(const char* value, size_t size);
  inline ::std::string* mutable_lr_policy();
  inline ::std::string* release_lr_policy();
  inline void set_allocated_lr_policy(::std::string* lr_policy);

  // optional float gamma = 9;
  inline bool has_gamma() const;
  inline void clear_gamma();
  static const int kGammaFieldNumber = 9;
  inline float gamma() const;
  inline void set_gamma(float value);

  // optional float power = 10;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 10;
  inline float power() const;
  inline void set_power(float value);

  // optional float momentum = 11;
  inline bool has_momentum() const;
  inline void clear_momentum();
  static const int kMomentumFieldNumber = 11;
  inline float momentum() const;
  inline void set_momentum(float value);

  // optional string momentum_policy = 46 [default = "fixed"];
  inline bool has_momentum_policy() const;
  inline void clear_momentum_policy();
  static const int kMomentumPolicyFieldNumber = 46;
  inline const ::std::string& momentum_policy() const;
  inline void set_momentum_policy(const ::std::string& value);
  inline void set_momentum_policy(const char* value);
  inline void set_momentum_policy(const char* value, size_t size);
  inline ::std::string* mutable_momentum_policy();
  inline ::std::string* release_momentum_policy();
  inline void set_allocated_momentum_policy(::std::string* momentum_policy);

  // optional float max_momentum = 47 [default = 0.99];
  inline bool has_max_momentum() const;
  inline void clear_max_momentum();
  static const int kMaxMomentumFieldNumber = 47;
  inline float max_momentum() const;
  inline void set_max_momentum(float value);

  // optional float momentum_power = 48 [default = 1];
  inline bool has_momentum_power() const;
  inline void clear_momentum_power();
  static const int kMomentumPowerFieldNumber = 48;
  inline float momentum_power() const;
  inline void set_momentum_power(float value);

  // optional float weight_decay = 12;
  inline bool has_weight_decay() const;
  inline void clear_weight_decay();
  static const int kWeightDecayFieldNumber = 12;
  inline float weight_decay() const;
  inline void set_weight_decay(float value);

  // optional string regularization_type = 29 [default = "L2"];
  inline bool has_regularization_type() const;
  inline void clear_regularization_type();
  static const int kRegularizationTypeFieldNumber = 29;
  inline const ::std::string& regularization_type() const;
  inline void set_regularization_type(const ::std::string& value);
  inline void set_regularization_type(const char* value);
  inline void set_regularization_type(const char* value, size_t size);
  inline ::std::string* mutable_regularization_type();
  inline ::std::string* release_regularization_type();
  inline void set_allocated_regularization_type(::std::string* regularization_type);

  // optional int32 stepsize = 13;
  inline bool has_stepsize() const;
  inline void clear_stepsize();
  static const int kStepsizeFieldNumber = 13;
  inline ::google::protobuf::int32 stepsize() const;
  inline void set_stepsize(::google::protobuf::int32 value);

  // repeated int32 stepvalue = 34;
  inline int stepvalue_size() const;
  inline void clear_stepvalue();
  static const int kStepvalueFieldNumber = 34;
  inline ::google::protobuf::int32 stepvalue(int index) const;
  inline void set_stepvalue(int index, ::google::protobuf::int32 value);
  inline void add_stepvalue(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      stepvalue() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_stepvalue();

  // optional float clip_gradients = 35 [default = -1];
  inline bool has_clip_gradients() const;
  inline void clear_clip_gradients();
  static const int kClipGradientsFieldNumber = 35;
  inline float clip_gradients() const;
  inline void set_clip_gradients(float value);

  // optional int32 snapshot = 14 [default = 0];
  inline bool has_snapshot() const;
  inline void clear_snapshot();
  static const int kSnapshotFieldNumber = 14;
  inline ::google::protobuf::int32 snapshot() const;
  inline void set_snapshot(::google::protobuf::int32 value);

  // optional string snapshot_prefix = 15;
  inline bool has_snapshot_prefix() const;
  inline void clear_snapshot_prefix();
  static const int kSnapshotPrefixFieldNumber = 15;
  inline const ::std::string& snapshot_prefix() const;
  inline void set_snapshot_prefix(const ::std::string& value);
  inline void set_snapshot_prefix(const char* value);
  inline void set_snapshot_prefix(const char* value, size_t size);
  inline ::std::string* mutable_snapshot_prefix();
  inline ::std::string* release_snapshot_prefix();
  inline void set_allocated_snapshot_prefix(::std::string* snapshot_prefix);

  // optional bool snapshot_diff = 16 [default = false];
  inline bool has_snapshot_diff() const;
  inline void clear_snapshot_diff();
  static const int kSnapshotDiffFieldNumber = 16;
  inline bool snapshot_diff() const;
  inline void set_snapshot_diff(bool value);

  // optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
  inline bool has_snapshot_format() const;
  inline void clear_snapshot_format();
  static const int kSnapshotFormatFieldNumber = 37;
  inline ::caffe::SolverParameter_SnapshotFormat snapshot_format() const;
  inline void set_snapshot_format(::caffe::SolverParameter_SnapshotFormat value);

  // optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
  inline bool has_solver_mode() const;
  inline void clear_solver_mode();
  static const int kSolverModeFieldNumber = 17;
  inline ::caffe::SolverParameter_SolverMode solver_mode() const;
  inline void set_solver_mode(::caffe::SolverParameter_SolverMode value);

  // optional int32 device_id = 18 [default = 0];
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 18;
  inline ::google::protobuf::int32 device_id() const;
  inline void set_device_id(::google::protobuf::int32 value);

  // optional int64 random_seed = 20 [default = -1];
  inline bool has_random_seed() const;
  inline void clear_random_seed();
  static const int kRandomSeedFieldNumber = 20;
  inline ::google::protobuf::int64 random_seed() const;
  inline void set_random_seed(::google::protobuf::int64 value);

  // optional string type = 40 [default = "SGD"];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 40;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional float delta = 31 [default = 1e-08];
  inline bool has_delta() const;
  inline void clear_delta();
  static const int kDeltaFieldNumber = 31;
  inline float delta() const;
  inline void set_delta(float value);

  // optional float momentum2 = 39 [default = 0.999];
  inline bool has_momentum2() const;
  inline void clear_momentum2();
  static const int kMomentum2FieldNumber = 39;
  inline float momentum2() const;
  inline void set_momentum2(float value);

  // optional float rms_decay = 38;
  inline bool has_rms_decay() const;
  inline void clear_rms_decay();
  static const int kRmsDecayFieldNumber = 38;
  inline float rms_decay() const;
  inline void set_rms_decay(float value);

  // optional bool debug_info = 23 [default = false];
  inline bool has_debug_info() const;
  inline void clear_debug_info();
  static const int kDebugInfoFieldNumber = 23;
  inline bool debug_info() const;
  inline void set_debug_info(bool value);

  // optional bool snapshot_after_train = 28 [default = true];
  inline bool has_snapshot_after_train() const;
  inline void clear_snapshot_after_train();
  static const int kSnapshotAfterTrainFieldNumber = 28;
  inline bool snapshot_after_train() const;
  inline void set_snapshot_after_train(bool value);

  // optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
  inline bool has_solver_type() const;
  inline void clear_solver_type();
  static const int kSolverTypeFieldNumber = 30;
  inline ::caffe::SolverParameter_SolverType solver_type() const;
  inline void set_solver_type(::caffe::SolverParameter_SolverType value);

  // optional .caffe.Type solver_data_type = 44 [default = FLOAT];
  inline bool has_solver_data_type() const;
  inline void clear_solver_data_type();
  static const int kSolverDataTypeFieldNumber = 44;
  inline ::caffe::Type solver_data_type() const;
  inline void set_solver_data_type(::caffe::Type value);

  // @@protoc_insertion_point(class_scope:caffe.SolverParameter)
 private:
  inline void set_has_net();
  inline void clear_has_net();
  inline void set_has_net_param();
  inline void clear_has_net_param();
  inline void set_has_train_net();
  inline void clear_has_train_net();
  inline void set_has_train_net_param();
  inline void clear_has_train_net_param();
  inline void set_has_train_state();
  inline void clear_has_train_state();
  inline void set_has_test_interval();
  inline void clear_has_test_interval();
  inline void set_has_test_compute_loss();
  inline void clear_has_test_compute_loss();
  inline void set_has_test_initialization();
  inline void clear_has_test_initialization();
  inline void set_has_rampup_interval();
  inline void clear_has_rampup_interval();
  inline void set_has_rampup_lr();
  inline void clear_has_rampup_lr();
  inline void set_has_min_lr();
  inline void clear_has_min_lr();
  inline void set_has_base_lr();
  inline void clear_has_base_lr();
  inline void set_has_display();
  inline void clear_has_display();
  inline void set_has_average_loss();
  inline void clear_has_average_loss();
  inline void set_has_max_iter();
  inline void clear_has_max_iter();
  inline void set_has_iter_size();
  inline void clear_has_iter_size();
  inline void set_has_lr_policy();
  inline void clear_has_lr_policy();
  inline void set_has_gamma();
  inline void clear_has_gamma();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_momentum();
  inline void clear_has_momentum();
  inline void set_has_momentum_policy();
  inline void clear_has_momentum_policy();
  inline void set_has_max_momentum();
  inline void clear_has_max_momentum();
  inline void set_has_momentum_power();
  inline void clear_has_momentum_power();
  inline void set_has_weight_decay();
  inline void clear_has_weight_decay();
  inline void set_has_regularization_type();
  inline void clear_has_regularization_type();
  inline void set_has_stepsize();
  inline void clear_has_stepsize();
  inline void set_has_clip_gradients();
  inline void clear_has_clip_gradients();
  inline void set_has_snapshot();
  inline void clear_has_snapshot();
  inline void set_has_snapshot_prefix();
  inline void clear_has_snapshot_prefix();
  inline void set_has_snapshot_diff();
  inline void clear_has_snapshot_diff();
  inline void set_has_snapshot_format();
  inline void clear_has_snapshot_format();
  inline void set_has_solver_mode();
  inline void clear_has_solver_mode();
  inline void set_has_device_id();
  inline void clear_has_device_id();
  inline void set_has_random_seed();
  inline void clear_has_random_seed();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_delta();
  inline void clear_has_delta();
  inline void set_has_momentum2();
  inline void clear_has_momentum2();
  inline void set_has_rms_decay();
  inline void clear_has_rms_decay();
  inline void set_has_debug_info();
  inline void clear_has_debug_info();
  inline void set_has_snapshot_after_train();
  inline void clear_has_snapshot_after_train();
  inline void set_has_solver_type();
  inline void clear_has_solver_type();
  inline void set_has_solver_data_type();
  inline void clear_has_solver_data_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  ::std::string* net_;
  ::caffe::NetParameter* net_param_;
  ::std::string* train_net_;
  ::google::protobuf::RepeatedPtrField< ::std::string> test_net_;
  ::caffe::NetParameter* train_net_param_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter > test_net_param_;
  ::caffe::NetState* train_state_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetState > test_state_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > test_iter_;
  ::google::protobuf::int32 test_interval_;
  ::google::protobuf::int32 rampup_interval_;
  float rampup_lr_;
  float min_lr_;
  float base_lr_;
  ::google::protobuf::int32 display_;
  ::google::protobuf::int32 average_loss_;
  ::google::protobuf::int32 max_iter_;
  ::std::string* lr_policy_;
  ::google::protobuf::int32 iter_size_;
  float gamma_;
  float power_;
  float momentum_;
  static ::std::string* _default_momentum_policy_;
  ::std::string* momentum_policy_;
  bool test_compute_loss_;
  bool test_initialization_;
  bool snapshot_diff_;
  bool debug_info_;
  float max_momentum_;
  float momentum_power_;
  float weight_decay_;
  static ::std::string* _default_regularization_type_;
  ::std::string* regularization_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > stepvalue_;
  ::google::protobuf::int32 stepsize_;
  float clip_gradients_;
  ::std::string* snapshot_prefix_;
  ::google::protobuf::int32 snapshot_;
  int snapshot_format_;
  int solver_mode_;
  ::google::protobuf::int32 device_id_;
  ::google::protobuf::int64 random_seed_;
  static ::std::string* _default_type_;
  ::std::string* type_;
  float delta_;
  float momentum2_;
  float rms_decay_;
  bool snapshot_after_train_;
  int solver_type_;
  int solver_data_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static SolverParameter* default_instance_;
};
// -------------------------------------------------------------------

class SolverState : public ::google::protobuf::Message {
 public:
  SolverState();
  virtual ~SolverState();

  SolverState(const SolverState& from);

  inline SolverState& operator=(const SolverState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolverState& default_instance();

  void Swap(SolverState* other);

  // implements Message ----------------------------------------------

  SolverState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SolverState& from);
  void MergeFrom(const SolverState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 iter = 1;
  inline bool has_iter() const;
  inline void clear_iter();
  static const int kIterFieldNumber = 1;
  inline ::google::protobuf::int32 iter() const;
  inline void set_iter(::google::protobuf::int32 value);

  // optional string learned_net = 2;
  inline bool has_learned_net() const;
  inline void clear_learned_net();
  static const int kLearnedNetFieldNumber = 2;
  inline const ::std::string& learned_net() const;
  inline void set_learned_net(const ::std::string& value);
  inline void set_learned_net(const char* value);
  inline void set_learned_net(const char* value, size_t size);
  inline ::std::string* mutable_learned_net();
  inline ::std::string* release_learned_net();
  inline void set_allocated_learned_net(::std::string* learned_net);

  // repeated .caffe.BlobProto history = 3;
  inline int history_size() const;
  inline void clear_history();
  static const int kHistoryFieldNumber = 3;
  inline const ::caffe::BlobProto& history(int index) const;
  inline ::caffe::BlobProto* mutable_history(int index);
  inline ::caffe::BlobProto* add_history();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
      history() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
      mutable_history();

  // optional int32 current_step = 4 [default = 0];
  inline bool has_current_step() const;
  inline void clear_current_step();
  static const int kCurrentStepFieldNumber = 4;
  inline ::google::protobuf::int32 current_step() const;
  inline void set_current_step(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.SolverState)
 private:
  inline void set_has_iter();
  inline void clear_has_iter();
  inline void set_has_learned_net();
  inline void clear_has_learned_net();
  inline void set_has_current_step();
  inline void clear_has_current_step();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* learned_net_;
  ::google::protobuf::int32 iter_;
  ::google::protobuf::int32 current_step_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto > history_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static SolverState* default_instance_;
};
// -------------------------------------------------------------------

class NetState : public ::google::protobuf::Message {
 public:
  NetState();
  virtual ~NetState();

  NetState(const NetState& from);

  inline NetState& operator=(const NetState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetState& default_instance();

  void Swap(NetState* other);

  // implements Message ----------------------------------------------

  NetState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetState& from);
  void MergeFrom(const NetState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.Phase phase = 1 [default = TEST];
  inline bool has_phase() const;
  inline void clear_phase();
  static const int kPhaseFieldNumber = 1;
  inline ::caffe::Phase phase() const;
  inline void set_phase(::caffe::Phase value);

  // optional int32 level = 2 [default = 0];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // repeated string stage = 3;
  inline int stage_size() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 3;
  inline const ::std::string& stage(int index) const;
  inline ::std::string* mutable_stage(int index);
  inline void set_stage(int index, const ::std::string& value);
  inline void set_stage(int index, const char* value);
  inline void set_stage(int index, const char* value, size_t size);
  inline ::std::string* add_stage();
  inline void add_stage(const ::std::string& value);
  inline void add_stage(const char* value);
  inline void add_stage(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& stage() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stage();

  // @@protoc_insertion_point(class_scope:caffe.NetState)
 private:
  inline void set_has_phase();
  inline void clear_has_phase();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int phase_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stage_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static NetState* default_instance_;
};
// -------------------------------------------------------------------

class NetStateRule : public ::google::protobuf::Message {
 public:
  NetStateRule();
  virtual ~NetStateRule();

  NetStateRule(const NetStateRule& from);

  inline NetStateRule& operator=(const NetStateRule& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetStateRule& default_instance();

  void Swap(NetStateRule* other);

  // implements Message ----------------------------------------------

  NetStateRule* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetStateRule& from);
  void MergeFrom(const NetStateRule& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.Phase phase = 1;
  inline bool has_phase() const;
  inline void clear_phase();
  static const int kPhaseFieldNumber = 1;
  inline ::caffe::Phase phase() const;
  inline void set_phase(::caffe::Phase value);

  // optional int32 min_level = 2;
  inline bool has_min_level() const;
  inline void clear_min_level();
  static const int kMinLevelFieldNumber = 2;
  inline ::google::protobuf::int32 min_level() const;
  inline void set_min_level(::google::protobuf::int32 value);

  // optional int32 max_level = 3;
  inline bool has_max_level() const;
  inline void clear_max_level();
  static const int kMaxLevelFieldNumber = 3;
  inline ::google::protobuf::int32 max_level() const;
  inline void set_max_level(::google::protobuf::int32 value);

  // repeated string stage = 4;
  inline int stage_size() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 4;
  inline const ::std::string& stage(int index) const;
  inline ::std::string* mutable_stage(int index);
  inline void set_stage(int index, const ::std::string& value);
  inline void set_stage(int index, const char* value);
  inline void set_stage(int index, const char* value, size_t size);
  inline ::std::string* add_stage();
  inline void add_stage(const ::std::string& value);
  inline void add_stage(const char* value);
  inline void add_stage(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& stage() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stage();

  // repeated string not_stage = 5;
  inline int not_stage_size() const;
  inline void clear_not_stage();
  static const int kNotStageFieldNumber = 5;
  inline const ::std::string& not_stage(int index) const;
  inline ::std::string* mutable_not_stage(int index);
  inline void set_not_stage(int index, const ::std::string& value);
  inline void set_not_stage(int index, const char* value);
  inline void set_not_stage(int index, const char* value, size_t size);
  inline ::std::string* add_not_stage();
  inline void add_not_stage(const ::std::string& value);
  inline void add_not_stage(const char* value);
  inline void add_not_stage(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& not_stage() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_not_stage();

  // @@protoc_insertion_point(class_scope:caffe.NetStateRule)
 private:
  inline void set_has_phase();
  inline void clear_has_phase();
  inline void set_has_min_level();
  inline void clear_has_min_level();
  inline void set_has_max_level();
  inline void clear_has_max_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int phase_;
  ::google::protobuf::int32 min_level_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stage_;
  ::google::protobuf::RepeatedPtrField< ::std::string> not_stage_;
  ::google::protobuf::int32 max_level_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static NetStateRule* default_instance_;
};
// -------------------------------------------------------------------

class ParamSpec : public ::google::protobuf::Message {
 public:
  ParamSpec();
  virtual ~ParamSpec();

  ParamSpec(const ParamSpec& from);

  inline ParamSpec& operator=(const ParamSpec& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParamSpec& default_instance();

  void Swap(ParamSpec* other);

  // implements Message ----------------------------------------------

  ParamSpec* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParamSpec& from);
  void MergeFrom(const ParamSpec& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ParamSpec_DimCheckMode DimCheckMode;
  static const DimCheckMode STRICT = ParamSpec_DimCheckMode_STRICT;
  static const DimCheckMode PERMISSIVE = ParamSpec_DimCheckMode_PERMISSIVE;
  static inline bool DimCheckMode_IsValid(int value) {
    return ParamSpec_DimCheckMode_IsValid(value);
  }
  static const DimCheckMode DimCheckMode_MIN =
    ParamSpec_DimCheckMode_DimCheckMode_MIN;
  static const DimCheckMode DimCheckMode_MAX =
    ParamSpec_DimCheckMode_DimCheckMode_MAX;
  static const int DimCheckMode_ARRAYSIZE =
    ParamSpec_DimCheckMode_DimCheckMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DimCheckMode_descriptor() {
    return ParamSpec_DimCheckMode_descriptor();
  }
  static inline const ::std::string& DimCheckMode_Name(DimCheckMode value) {
    return ParamSpec_DimCheckMode_Name(value);
  }
  static inline bool DimCheckMode_Parse(const ::std::string& name,
      DimCheckMode* value) {
    return ParamSpec_DimCheckMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
  inline bool has_share_mode() const;
  inline void clear_share_mode();
  static const int kShareModeFieldNumber = 2;
  inline ::caffe::ParamSpec_DimCheckMode share_mode() const;
  inline void set_share_mode(::caffe::ParamSpec_DimCheckMode value);

  // optional float lr_mult = 3 [default = 1];
  inline bool has_lr_mult() const;
  inline void clear_lr_mult();
  static const int kLrMultFieldNumber = 3;
  inline float lr_mult() const;
  inline void set_lr_mult(float value);

  // optional float decay_mult = 4 [default = 1];
  inline bool has_decay_mult() const;
  inline void clear_decay_mult();
  static const int kDecayMultFieldNumber = 4;
  inline float decay_mult() const;
  inline void set_decay_mult(float value);

  // @@protoc_insertion_point(class_scope:caffe.ParamSpec)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_share_mode();
  inline void clear_has_share_mode();
  inline void set_has_lr_mult();
  inline void clear_has_lr_mult();
  inline void set_has_decay_mult();
  inline void clear_has_decay_mult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  int share_mode_;
  float lr_mult_;
  float decay_mult_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static ParamSpec* default_instance_;
};
// -------------------------------------------------------------------

class LayerParameter : public ::google::protobuf::Message {
 public:
  LayerParameter();
  virtual ~LayerParameter();

  LayerParameter(const LayerParameter& from);

  inline LayerParameter& operator=(const LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LayerParameter& default_instance();

  void Swap(LayerParameter* other);

  // implements Message ----------------------------------------------

  LayerParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LayerParameter& from);
  void MergeFrom(const LayerParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // repeated string bottom = 3;
  inline int bottom_size() const;
  inline void clear_bottom();
  static const int kBottomFieldNumber = 3;
  inline const ::std::string& bottom(int index) const;
  inline ::std::string* mutable_bottom(int index);
  inline void set_bottom(int index, const ::std::string& value);
  inline void set_bottom(int index, const char* value);
  inline void set_bottom(int index, const char* value, size_t size);
  inline ::std::string* add_bottom();
  inline void add_bottom(const ::std::string& value);
  inline void add_bottom(const char* value);
  inline void add_bottom(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& bottom() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bottom();

  // repeated string top = 4;
  inline int top_size() const;
  inline void clear_top();
  static const int kTopFieldNumber = 4;
  inline const ::std::string& top(int index) const;
  inline ::std::string* mutable_top(int index);
  inline void set_top(int index, const ::std::string& value);
  inline void set_top(int index, const char* value);
  inline void set_top(int index, const char* value, size_t size);
  inline ::std::string* add_top();
  inline void add_top(const ::std::string& value);
  inline void add_top(const char* value);
  inline void add_top(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& top() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_top();

  // optional .caffe.Type forward_type = 145 [default = FLOAT];
  inline bool has_forward_type() const;
  inline void clear_forward_type();
  static const int kForwardTypeFieldNumber = 145;
  inline ::caffe::Type forward_type() const;
  inline void set_forward_type(::caffe::Type value);

  // optional .caffe.Type backward_type = 146 [default = FLOAT];
  inline bool has_backward_type() const;
  inline void clear_backward_type();
  static const int kBackwardTypeFieldNumber = 146;
  inline ::caffe::Type backward_type() const;
  inline void set_backward_type(::caffe::Type value);

  // optional .caffe.Type forward_math = 147 [default = FLOAT];
  inline bool has_forward_math() const;
  inline void clear_forward_math();
  static const int kForwardMathFieldNumber = 147;
  inline ::caffe::Type forward_math() const;
  inline void set_forward_math(::caffe::Type value);

  // optional .caffe.Type backward_math = 148 [default = FLOAT];
  inline bool has_backward_math() const;
  inline void clear_backward_math();
  static const int kBackwardMathFieldNumber = 148;
  inline ::caffe::Type backward_math() const;
  inline void set_backward_math(::caffe::Type value);

  // optional bool debug = 149 [default = false];
  inline bool has_debug() const;
  inline void clear_debug();
  static const int kDebugFieldNumber = 149;
  inline bool debug() const;
  inline void set_debug(bool value);

  // optional .caffe.Phase phase = 10;
  inline bool has_phase() const;
  inline void clear_phase();
  static const int kPhaseFieldNumber = 10;
  inline ::caffe::Phase phase() const;
  inline void set_phase(::caffe::Phase value);

  // repeated float loss_weight = 5;
  inline int loss_weight_size() const;
  inline void clear_loss_weight();
  static const int kLossWeightFieldNumber = 5;
  inline float loss_weight(int index) const;
  inline void set_loss_weight(int index, float value);
  inline void add_loss_weight(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      loss_weight() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_loss_weight();

  // repeated .caffe.ParamSpec param = 6;
  inline int param_size() const;
  inline void clear_param();
  static const int kParamFieldNumber = 6;
  inline const ::caffe::ParamSpec& param(int index) const;
  inline ::caffe::ParamSpec* mutable_param(int index);
  inline ::caffe::ParamSpec* add_param();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >&
      param() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >*
      mutable_param();

  // repeated .caffe.BlobProto blobs = 7;
  inline int blobs_size() const;
  inline void clear_blobs();
  static const int kBlobsFieldNumber = 7;
  inline const ::caffe::BlobProto& blobs(int index) const;
  inline ::caffe::BlobProto* mutable_blobs(int index);
  inline ::caffe::BlobProto* add_blobs();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
      blobs() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
      mutable_blobs();

  // repeated bool propagate_down = 11;
  inline int propagate_down_size() const;
  inline void clear_propagate_down();
  static const int kPropagateDownFieldNumber = 11;
  inline bool propagate_down(int index) const;
  inline void set_propagate_down(int index, bool value);
  inline void add_propagate_down(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      propagate_down() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_propagate_down();

  // repeated .caffe.NetStateRule include = 8;
  inline int include_size() const;
  inline void clear_include();
  static const int kIncludeFieldNumber = 8;
  inline const ::caffe::NetStateRule& include(int index) const;
  inline ::caffe::NetStateRule* mutable_include(int index);
  inline ::caffe::NetStateRule* add_include();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
      include() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
      mutable_include();

  // repeated .caffe.NetStateRule exclude = 9;
  inline int exclude_size() const;
  inline void clear_exclude();
  static const int kExcludeFieldNumber = 9;
  inline const ::caffe::NetStateRule& exclude(int index) const;
  inline ::caffe::NetStateRule* mutable_exclude(int index);
  inline ::caffe::NetStateRule* add_exclude();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
      exclude() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
      mutable_exclude();

  // optional .caffe.TransformationParameter transform_param = 100;
  inline bool has_transform_param() const;
  inline void clear_transform_param();
  static const int kTransformParamFieldNumber = 100;
  inline const ::caffe::TransformationParameter& transform_param() const;
  inline ::caffe::TransformationParameter* mutable_transform_param();
  inline ::caffe::TransformationParameter* release_transform_param();
  inline void set_allocated_transform_param(::caffe::TransformationParameter* transform_param);

  // optional .caffe.LossParameter loss_param = 101;
  inline bool has_loss_param() const;
  inline void clear_loss_param();
  static const int kLossParamFieldNumber = 101;
  inline const ::caffe::LossParameter& loss_param() const;
  inline ::caffe::LossParameter* mutable_loss_param();
  inline ::caffe::LossParameter* release_loss_param();
  inline void set_allocated_loss_param(::caffe::LossParameter* loss_param);

  // optional .caffe.AccuracyParameter accuracy_param = 102;
  inline bool has_accuracy_param() const;
  inline void clear_accuracy_param();
  static const int kAccuracyParamFieldNumber = 102;
  inline const ::caffe::AccuracyParameter& accuracy_param() const;
  inline ::caffe::AccuracyParameter* mutable_accuracy_param();
  inline ::caffe::AccuracyParameter* release_accuracy_param();
  inline void set_allocated_accuracy_param(::caffe::AccuracyParameter* accuracy_param);

  // optional .caffe.ArgMaxParameter argmax_param = 103;
  inline bool has_argmax_param() const;
  inline void clear_argmax_param();
  static const int kArgmaxParamFieldNumber = 103;
  inline const ::caffe::ArgMaxParameter& argmax_param() const;
  inline ::caffe::ArgMaxParameter* mutable_argmax_param();
  inline ::caffe::ArgMaxParameter* release_argmax_param();
  inline void set_allocated_argmax_param(::caffe::ArgMaxParameter* argmax_param);

  // optional .caffe.AnnotatedDataParameter annotated_data_param = 200;
  inline bool has_annotated_data_param() const;
  inline void clear_annotated_data_param();
  static const int kAnnotatedDataParamFieldNumber = 200;
  inline const ::caffe::AnnotatedDataParameter& annotated_data_param() const;
  inline ::caffe::AnnotatedDataParameter* mutable_annotated_data_param();
  inline ::caffe::AnnotatedDataParameter* release_annotated_data_param();
  inline void set_allocated_annotated_data_param(::caffe::AnnotatedDataParameter* annotated_data_param);

  // optional .caffe.BatchNormParameter batch_norm_param = 139;
  inline bool has_batch_norm_param() const;
  inline void clear_batch_norm_param();
  static const int kBatchNormParamFieldNumber = 139;
  inline const ::caffe::BatchNormParameter& batch_norm_param() const;
  inline ::caffe::BatchNormParameter* mutable_batch_norm_param();
  inline ::caffe::BatchNormParameter* release_batch_norm_param();
  inline void set_allocated_batch_norm_param(::caffe::BatchNormParameter* batch_norm_param);

  // optional .caffe.BiasParameter bias_param = 141;
  inline bool has_bias_param() const;
  inline void clear_bias_param();
  static const int kBiasParamFieldNumber = 141;
  inline const ::caffe::BiasParameter& bias_param() const;
  inline ::caffe::BiasParameter* mutable_bias_param();
  inline ::caffe::BiasParameter* release_bias_param();
  inline void set_allocated_bias_param(::caffe::BiasParameter* bias_param);

  // optional .caffe.ConcatParameter concat_param = 104;
  inline bool has_concat_param() const;
  inline void clear_concat_param();
  static const int kConcatParamFieldNumber = 104;
  inline const ::caffe::ConcatParameter& concat_param() const;
  inline ::caffe::ConcatParameter* mutable_concat_param();
  inline ::caffe::ConcatParameter* release_concat_param();
  inline void set_allocated_concat_param(::caffe::ConcatParameter* concat_param);

  // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
  inline bool has_contrastive_loss_param() const;
  inline void clear_contrastive_loss_param();
  static const int kContrastiveLossParamFieldNumber = 105;
  inline const ::caffe::ContrastiveLossParameter& contrastive_loss_param() const;
  inline ::caffe::ContrastiveLossParameter* mutable_contrastive_loss_param();
  inline ::caffe::ContrastiveLossParameter* release_contrastive_loss_param();
  inline void set_allocated_contrastive_loss_param(::caffe::ContrastiveLossParameter* contrastive_loss_param);

  // optional .caffe.ConvolutionParameter convolution_param = 106;
  inline bool has_convolution_param() const;
  inline void clear_convolution_param();
  static const int kConvolutionParamFieldNumber = 106;
  inline const ::caffe::ConvolutionParameter& convolution_param() const;
  inline ::caffe::ConvolutionParameter* mutable_convolution_param();
  inline ::caffe::ConvolutionParameter* release_convolution_param();
  inline void set_allocated_convolution_param(::caffe::ConvolutionParameter* convolution_param);

  // optional .caffe.CropParameter crop_param = 144;
  inline bool has_crop_param() const;
  inline void clear_crop_param();
  static const int kCropParamFieldNumber = 144;
  inline const ::caffe::CropParameter& crop_param() const;
  inline ::caffe::CropParameter* mutable_crop_param();
  inline ::caffe::CropParameter* release_crop_param();
  inline void set_allocated_crop_param(::caffe::CropParameter* crop_param);

  // optional .caffe.DataParameter data_param = 107;
  inline bool has_data_param() const;
  inline void clear_data_param();
  static const int kDataParamFieldNumber = 107;
  inline const ::caffe::DataParameter& data_param() const;
  inline ::caffe::DataParameter* mutable_data_param();
  inline ::caffe::DataParameter* release_data_param();
  inline void set_allocated_data_param(::caffe::DataParameter* data_param);

  // optional .caffe.DropoutParameter dropout_param = 108;
  inline bool has_dropout_param() const;
  inline void clear_dropout_param();
  static const int kDropoutParamFieldNumber = 108;
  inline const ::caffe::DropoutParameter& dropout_param() const;
  inline ::caffe::DropoutParameter* mutable_dropout_param();
  inline ::caffe::DropoutParameter* release_dropout_param();
  inline void set_allocated_dropout_param(::caffe::DropoutParameter* dropout_param);

  // optional .caffe.DummyDataParameter dummy_data_param = 109;
  inline bool has_dummy_data_param() const;
  inline void clear_dummy_data_param();
  static const int kDummyDataParamFieldNumber = 109;
  inline const ::caffe::DummyDataParameter& dummy_data_param() const;
  inline ::caffe::DummyDataParameter* mutable_dummy_data_param();
  inline ::caffe::DummyDataParameter* release_dummy_data_param();
  inline void set_allocated_dummy_data_param(::caffe::DummyDataParameter* dummy_data_param);

  // optional .caffe.EltwiseParameter eltwise_param = 110;
  inline bool has_eltwise_param() const;
  inline void clear_eltwise_param();
  static const int kEltwiseParamFieldNumber = 110;
  inline const ::caffe::EltwiseParameter& eltwise_param() const;
  inline ::caffe::EltwiseParameter* mutable_eltwise_param();
  inline ::caffe::EltwiseParameter* release_eltwise_param();
  inline void set_allocated_eltwise_param(::caffe::EltwiseParameter* eltwise_param);

  // optional .caffe.ELUParameter elu_param = 140;
  inline bool has_elu_param() const;
  inline void clear_elu_param();
  static const int kEluParamFieldNumber = 140;
  inline const ::caffe::ELUParameter& elu_param() const;
  inline ::caffe::ELUParameter* mutable_elu_param();
  inline ::caffe::ELUParameter* release_elu_param();
  inline void set_allocated_elu_param(::caffe::ELUParameter* elu_param);

  // optional .caffe.EmbedParameter embed_param = 137;
  inline bool has_embed_param() const;
  inline void clear_embed_param();
  static const int kEmbedParamFieldNumber = 137;
  inline const ::caffe::EmbedParameter& embed_param() const;
  inline ::caffe::EmbedParameter* mutable_embed_param();
  inline ::caffe::EmbedParameter* release_embed_param();
  inline void set_allocated_embed_param(::caffe::EmbedParameter* embed_param);

  // optional .caffe.ExpParameter exp_param = 111;
  inline bool has_exp_param() const;
  inline void clear_exp_param();
  static const int kExpParamFieldNumber = 111;
  inline const ::caffe::ExpParameter& exp_param() const;
  inline ::caffe::ExpParameter* mutable_exp_param();
  inline ::caffe::ExpParameter* release_exp_param();
  inline void set_allocated_exp_param(::caffe::ExpParameter* exp_param);

  // optional .caffe.FlattenParameter flatten_param = 135;
  inline bool has_flatten_param() const;
  inline void clear_flatten_param();
  static const int kFlattenParamFieldNumber = 135;
  inline const ::caffe::FlattenParameter& flatten_param() const;
  inline ::caffe::FlattenParameter* mutable_flatten_param();
  inline ::caffe::FlattenParameter* release_flatten_param();
  inline void set_allocated_flatten_param(::caffe::FlattenParameter* flatten_param);

  // optional .caffe.HDF5DataParameter hdf5_data_param = 112;
  inline bool has_hdf5_data_param() const;
  inline void clear_hdf5_data_param();
  static const int kHdf5DataParamFieldNumber = 112;
  inline const ::caffe::HDF5DataParameter& hdf5_data_param() const;
  inline ::caffe::HDF5DataParameter* mutable_hdf5_data_param();
  inline ::caffe::HDF5DataParameter* release_hdf5_data_param();
  inline void set_allocated_hdf5_data_param(::caffe::HDF5DataParameter* hdf5_data_param);

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
  inline bool has_hdf5_output_param() const;
  inline void clear_hdf5_output_param();
  static const int kHdf5OutputParamFieldNumber = 113;
  inline const ::caffe::HDF5OutputParameter& hdf5_output_param() const;
  inline ::caffe::HDF5OutputParameter* mutable_hdf5_output_param();
  inline ::caffe::HDF5OutputParameter* release_hdf5_output_param();
  inline void set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param);

  // optional .caffe.HingeLossParameter hinge_loss_param = 114;
  inline bool has_hinge_loss_param() const;
  inline void clear_hinge_loss_param();
  static const int kHingeLossParamFieldNumber = 114;
  inline const ::caffe::HingeLossParameter& hinge_loss_param() const;
  inline ::caffe::HingeLossParameter* mutable_hinge_loss_param();
  inline ::caffe::HingeLossParameter* release_hinge_loss_param();
  inline void set_allocated_hinge_loss_param(::caffe::HingeLossParameter* hinge_loss_param);

  // optional .caffe.ImageDataParameter image_data_param = 115;
  inline bool has_image_data_param() const;
  inline void clear_image_data_param();
  static const int kImageDataParamFieldNumber = 115;
  inline const ::caffe::ImageDataParameter& image_data_param() const;
  inline ::caffe::ImageDataParameter* mutable_image_data_param();
  inline ::caffe::ImageDataParameter* release_image_data_param();
  inline void set_allocated_image_data_param(::caffe::ImageDataParameter* image_data_param);

  // optional .caffe.InfogainLossParameter infogain_loss_param = 116;
  inline bool has_infogain_loss_param() const;
  inline void clear_infogain_loss_param();
  static const int kInfogainLossParamFieldNumber = 116;
  inline const ::caffe::InfogainLossParameter& infogain_loss_param() const;
  inline ::caffe::InfogainLossParameter* mutable_infogain_loss_param();
  inline ::caffe::InfogainLossParameter* release_infogain_loss_param();
  inline void set_allocated_infogain_loss_param(::caffe::InfogainLossParameter* infogain_loss_param);

  // optional .caffe.InnerProductParameter inner_product_param = 117;
  inline bool has_inner_product_param() const;
  inline void clear_inner_product_param();
  static const int kInnerProductParamFieldNumber = 117;
  inline const ::caffe::InnerProductParameter& inner_product_param() const;
  inline ::caffe::InnerProductParameter* mutable_inner_product_param();
  inline ::caffe::InnerProductParameter* release_inner_product_param();
  inline void set_allocated_inner_product_param(::caffe::InnerProductParameter* inner_product_param);

  // optional .caffe.InputParameter input_param = 143;
  inline bool has_input_param() const;
  inline void clear_input_param();
  static const int kInputParamFieldNumber = 143;
  inline const ::caffe::InputParameter& input_param() const;
  inline ::caffe::InputParameter* mutable_input_param();
  inline ::caffe::InputParameter* release_input_param();
  inline void set_allocated_input_param(::caffe::InputParameter* input_param);

  // optional .caffe.LogParameter log_param = 134;
  inline bool has_log_param() const;
  inline void clear_log_param();
  static const int kLogParamFieldNumber = 134;
  inline const ::caffe::LogParameter& log_param() const;
  inline ::caffe::LogParameter* mutable_log_param();
  inline ::caffe::LogParameter* release_log_param();
  inline void set_allocated_log_param(::caffe::LogParameter* log_param);

  // optional .caffe.LRNParameter lrn_param = 118;
  inline bool has_lrn_param() const;
  inline void clear_lrn_param();
  static const int kLrnParamFieldNumber = 118;
  inline const ::caffe::LRNParameter& lrn_param() const;
  inline ::caffe::LRNParameter* mutable_lrn_param();
  inline ::caffe::LRNParameter* release_lrn_param();
  inline void set_allocated_lrn_param(::caffe::LRNParameter* lrn_param);

  // optional .caffe.MemoryDataParameter memory_data_param = 119;
  inline bool has_memory_data_param() const;
  inline void clear_memory_data_param();
  static const int kMemoryDataParamFieldNumber = 119;
  inline const ::caffe::MemoryDataParameter& memory_data_param() const;
  inline ::caffe::MemoryDataParameter* mutable_memory_data_param();
  inline ::caffe::MemoryDataParameter* release_memory_data_param();
  inline void set_allocated_memory_data_param(::caffe::MemoryDataParameter* memory_data_param);

  // optional .caffe.MultiBoxLossParameter multibox_loss_param = 201;
  inline bool has_multibox_loss_param() const;
  inline void clear_multibox_loss_param();
  static const int kMultiboxLossParamFieldNumber = 201;
  inline const ::caffe::MultiBoxLossParameter& multibox_loss_param() const;
  inline ::caffe::MultiBoxLossParameter* mutable_multibox_loss_param();
  inline ::caffe::MultiBoxLossParameter* release_multibox_loss_param();
  inline void set_allocated_multibox_loss_param(::caffe::MultiBoxLossParameter* multibox_loss_param);

  // optional .caffe.MVNParameter mvn_param = 120;
  inline bool has_mvn_param() const;
  inline void clear_mvn_param();
  static const int kMvnParamFieldNumber = 120;
  inline const ::caffe::MVNParameter& mvn_param() const;
  inline ::caffe::MVNParameter* mutable_mvn_param();
  inline ::caffe::MVNParameter* release_mvn_param();
  inline void set_allocated_mvn_param(::caffe::MVNParameter* mvn_param);

  // optional .caffe.NormalizeParameter norm_param = 206;
  inline bool has_norm_param() const;
  inline void clear_norm_param();
  static const int kNormParamFieldNumber = 206;
  inline const ::caffe::NormalizeParameter& norm_param() const;
  inline ::caffe::NormalizeParameter* mutable_norm_param();
  inline ::caffe::NormalizeParameter* release_norm_param();
  inline void set_allocated_norm_param(::caffe::NormalizeParameter* norm_param);

  // optional .caffe.ParameterParameter parameter_param = 151;
  inline bool has_parameter_param() const;
  inline void clear_parameter_param();
  static const int kParameterParamFieldNumber = 151;
  inline const ::caffe::ParameterParameter& parameter_param() const;
  inline ::caffe::ParameterParameter* mutable_parameter_param();
  inline ::caffe::ParameterParameter* release_parameter_param();
  inline void set_allocated_parameter_param(::caffe::ParameterParameter* parameter_param);

  // optional .caffe.PermuteParameter permute_param = 202;
  inline bool has_permute_param() const;
  inline void clear_permute_param();
  static const int kPermuteParamFieldNumber = 202;
  inline const ::caffe::PermuteParameter& permute_param() const;
  inline ::caffe::PermuteParameter* mutable_permute_param();
  inline ::caffe::PermuteParameter* release_permute_param();
  inline void set_allocated_permute_param(::caffe::PermuteParameter* permute_param);

  // optional .caffe.PoolingParameter pooling_param = 121;
  inline bool has_pooling_param() const;
  inline void clear_pooling_param();
  static const int kPoolingParamFieldNumber = 121;
  inline const ::caffe::PoolingParameter& pooling_param() const;
  inline ::caffe::PoolingParameter* mutable_pooling_param();
  inline ::caffe::PoolingParameter* release_pooling_param();
  inline void set_allocated_pooling_param(::caffe::PoolingParameter* pooling_param);

  // optional .caffe.PowerParameter power_param = 122;
  inline bool has_power_param() const;
  inline void clear_power_param();
  static const int kPowerParamFieldNumber = 122;
  inline const ::caffe::PowerParameter& power_param() const;
  inline ::caffe::PowerParameter* mutable_power_param();
  inline ::caffe::PowerParameter* release_power_param();
  inline void set_allocated_power_param(::caffe::PowerParameter* power_param);

  // optional .caffe.PReLUParameter prelu_param = 131;
  inline bool has_prelu_param() const;
  inline void clear_prelu_param();
  static const int kPreluParamFieldNumber = 131;
  inline const ::caffe::PReLUParameter& prelu_param() const;
  inline ::caffe::PReLUParameter* mutable_prelu_param();
  inline ::caffe::PReLUParameter* release_prelu_param();
  inline void set_allocated_prelu_param(::caffe::PReLUParameter* prelu_param);

  // optional .caffe.PriorBoxParameter prior_box_param = 203;
  inline bool has_prior_box_param() const;
  inline void clear_prior_box_param();
  static const int kPriorBoxParamFieldNumber = 203;
  inline const ::caffe::PriorBoxParameter& prior_box_param() const;
  inline ::caffe::PriorBoxParameter* mutable_prior_box_param();
  inline ::caffe::PriorBoxParameter* release_prior_box_param();
  inline void set_allocated_prior_box_param(::caffe::PriorBoxParameter* prior_box_param);

  // optional .caffe.PythonParameter python_param = 130;
  inline bool has_python_param() const;
  inline void clear_python_param();
  static const int kPythonParamFieldNumber = 130;
  inline const ::caffe::PythonParameter& python_param() const;
  inline ::caffe::PythonParameter* mutable_python_param();
  inline ::caffe::PythonParameter* release_python_param();
  inline void set_allocated_python_param(::caffe::PythonParameter* python_param);

  // optional .caffe.ReductionParameter reduction_param = 136;
  inline bool has_reduction_param() const;
  inline void clear_reduction_param();
  static const int kReductionParamFieldNumber = 136;
  inline const ::caffe::ReductionParameter& reduction_param() const;
  inline ::caffe::ReductionParameter* mutable_reduction_param();
  inline ::caffe::ReductionParameter* release_reduction_param();
  inline void set_allocated_reduction_param(::caffe::ReductionParameter* reduction_param);

  // optional .caffe.ReLUParameter relu_param = 123;
  inline bool has_relu_param() const;
  inline void clear_relu_param();
  static const int kReluParamFieldNumber = 123;
  inline const ::caffe::ReLUParameter& relu_param() const;
  inline ::caffe::ReLUParameter* mutable_relu_param();
  inline ::caffe::ReLUParameter* release_relu_param();
  inline void set_allocated_relu_param(::caffe::ReLUParameter* relu_param);

  // optional .caffe.ReshapeParameter reshape_param = 133;
  inline bool has_reshape_param() const;
  inline void clear_reshape_param();
  static const int kReshapeParamFieldNumber = 133;
  inline const ::caffe::ReshapeParameter& reshape_param() const;
  inline ::caffe::ReshapeParameter* mutable_reshape_param();
  inline ::caffe::ReshapeParameter* release_reshape_param();
  inline void set_allocated_reshape_param(::caffe::ReshapeParameter* reshape_param);

  // optional .caffe.ScaleParameter scale_param = 142;
  inline bool has_scale_param() const;
  inline void clear_scale_param();
  static const int kScaleParamFieldNumber = 142;
  inline const ::caffe::ScaleParameter& scale_param() const;
  inline ::caffe::ScaleParameter* mutable_scale_param();
  inline ::caffe::ScaleParameter* release_scale_param();
  inline void set_allocated_scale_param(::caffe::ScaleParameter* scale_param);

  // optional .caffe.SigmoidParameter sigmoid_param = 124;
  inline bool has_sigmoid_param() const;
  inline void clear_sigmoid_param();
  static const int kSigmoidParamFieldNumber = 124;
  inline const ::caffe::SigmoidParameter& sigmoid_param() const;
  inline ::caffe::SigmoidParameter* mutable_sigmoid_param();
  inline ::caffe::SigmoidParameter* release_sigmoid_param();
  inline void set_allocated_sigmoid_param(::caffe::SigmoidParameter* sigmoid_param);

  // optional .caffe.SoftmaxParameter softmax_param = 125;
  inline bool has_softmax_param() const;
  inline void clear_softmax_param();
  static const int kSoftmaxParamFieldNumber = 125;
  inline const ::caffe::SoftmaxParameter& softmax_param() const;
  inline ::caffe::SoftmaxParameter* mutable_softmax_param();
  inline ::caffe::SoftmaxParameter* release_softmax_param();
  inline void set_allocated_softmax_param(::caffe::SoftmaxParameter* softmax_param);

  // optional .caffe.SPPParameter spp_param = 132;
  inline bool has_spp_param() const;
  inline void clear_spp_param();
  static const int kSppParamFieldNumber = 132;
  inline const ::caffe::SPPParameter& spp_param() const;
  inline ::caffe::SPPParameter* mutable_spp_param();
  inline ::caffe::SPPParameter* release_spp_param();
  inline void set_allocated_spp_param(::caffe::SPPParameter* spp_param);

  // optional .caffe.SliceParameter slice_param = 126;
  inline bool has_slice_param() const;
  inline void clear_slice_param();
  static const int kSliceParamFieldNumber = 126;
  inline const ::caffe::SliceParameter& slice_param() const;
  inline ::caffe::SliceParameter* mutable_slice_param();
  inline ::caffe::SliceParameter* release_slice_param();
  inline void set_allocated_slice_param(::caffe::SliceParameter* slice_param);

  // optional .caffe.TanHParameter tanh_param = 127;
  inline bool has_tanh_param() const;
  inline void clear_tanh_param();
  static const int kTanhParamFieldNumber = 127;
  inline const ::caffe::TanHParameter& tanh_param() const;
  inline ::caffe::TanHParameter* mutable_tanh_param();
  inline ::caffe::TanHParameter* release_tanh_param();
  inline void set_allocated_tanh_param(::caffe::TanHParameter* tanh_param);

  // optional .caffe.ThresholdParameter threshold_param = 128;
  inline bool has_threshold_param() const;
  inline void clear_threshold_param();
  static const int kThresholdParamFieldNumber = 128;
  inline const ::caffe::ThresholdParameter& threshold_param() const;
  inline ::caffe::ThresholdParameter* mutable_threshold_param();
  inline ::caffe::ThresholdParameter* release_threshold_param();
  inline void set_allocated_threshold_param(::caffe::ThresholdParameter* threshold_param);

  // optional .caffe.TileParameter tile_param = 138;
  inline bool has_tile_param() const;
  inline void clear_tile_param();
  static const int kTileParamFieldNumber = 138;
  inline const ::caffe::TileParameter& tile_param() const;
  inline ::caffe::TileParameter* mutable_tile_param();
  inline ::caffe::TileParameter* release_tile_param();
  inline void set_allocated_tile_param(::caffe::TileParameter* tile_param);

  // optional .caffe.WindowDataParameter window_data_param = 129;
  inline bool has_window_data_param() const;
  inline void clear_window_data_param();
  static const int kWindowDataParamFieldNumber = 129;
  inline const ::caffe::WindowDataParameter& window_data_param() const;
  inline ::caffe::WindowDataParameter* mutable_window_data_param();
  inline ::caffe::WindowDataParameter* release_window_data_param();
  inline void set_allocated_window_data_param(::caffe::WindowDataParameter* window_data_param);

  // optional .caffe.DetectNetGroundTruthParameter detectnet_groundtruth_param = 6801;
  inline bool has_detectnet_groundtruth_param() const;
  inline void clear_detectnet_groundtruth_param();
  static const int kDetectnetGroundtruthParamFieldNumber = 6801;
  inline const ::caffe::DetectNetGroundTruthParameter& detectnet_groundtruth_param() const;
  inline ::caffe::DetectNetGroundTruthParameter* mutable_detectnet_groundtruth_param();
  inline ::caffe::DetectNetGroundTruthParameter* release_detectnet_groundtruth_param();
  inline void set_allocated_detectnet_groundtruth_param(::caffe::DetectNetGroundTruthParameter* detectnet_groundtruth_param);

  // optional .caffe.DetectNetAugmentationParameter detectnet_augmentation_param = 6802;
  inline bool has_detectnet_augmentation_param() const;
  inline void clear_detectnet_augmentation_param();
  static const int kDetectnetAugmentationParamFieldNumber = 6802;
  inline const ::caffe::DetectNetAugmentationParameter& detectnet_augmentation_param() const;
  inline ::caffe::DetectNetAugmentationParameter* mutable_detectnet_augmentation_param();
  inline ::caffe::DetectNetAugmentationParameter* release_detectnet_augmentation_param();
  inline void set_allocated_detectnet_augmentation_param(::caffe::DetectNetAugmentationParameter* detectnet_augmentation_param);

  // @@protoc_insertion_point(class_scope:caffe.LayerParameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_forward_type();
  inline void clear_has_forward_type();
  inline void set_has_backward_type();
  inline void clear_has_backward_type();
  inline void set_has_forward_math();
  inline void clear_has_forward_math();
  inline void set_has_backward_math();
  inline void clear_has_backward_math();
  inline void set_has_debug();
  inline void clear_has_debug();
  inline void set_has_phase();
  inline void clear_has_phase();
  inline void set_has_transform_param();
  inline void clear_has_transform_param();
  inline void set_has_loss_param();
  inline void clear_has_loss_param();
  inline void set_has_accuracy_param();
  inline void clear_has_accuracy_param();
  inline void set_has_argmax_param();
  inline void clear_has_argmax_param();
  inline void set_has_annotated_data_param();
  inline void clear_has_annotated_data_param();
  inline void set_has_batch_norm_param();
  inline void clear_has_batch_norm_param();
  inline void set_has_bias_param();
  inline void clear_has_bias_param();
  inline void set_has_concat_param();
  inline void clear_has_concat_param();
  inline void set_has_contrastive_loss_param();
  inline void clear_has_contrastive_loss_param();
  inline void set_has_convolution_param();
  inline void clear_has_convolution_param();
  inline void set_has_crop_param();
  inline void clear_has_crop_param();
  inline void set_has_data_param();
  inline void clear_has_data_param();
  inline void set_has_dropout_param();
  inline void clear_has_dropout_param();
  inline void set_has_dummy_data_param();
  inline void clear_has_dummy_data_param();
  inline void set_has_eltwise_param();
  inline void clear_has_eltwise_param();
  inline void set_has_elu_param();
  inline void clear_has_elu_param();
  inline void set_has_embed_param();
  inline void clear_has_embed_param();
  inline void set_has_exp_param();
  inline void clear_has_exp_param();
  inline void set_has_flatten_param();
  inline void clear_has_flatten_param();
  inline void set_has_hdf5_data_param();
  inline void clear_has_hdf5_data_param();
  inline void set_has_hdf5_output_param();
  inline void clear_has_hdf5_output_param();
  inline void set_has_hinge_loss_param();
  inline void clear_has_hinge_loss_param();
  inline void set_has_image_data_param();
  inline void clear_has_image_data_param();
  inline void set_has_infogain_loss_param();
  inline void clear_has_infogain_loss_param();
  inline void set_has_inner_product_param();
  inline void clear_has_inner_product_param();
  inline void set_has_input_param();
  inline void clear_has_input_param();
  inline void set_has_log_param();
  inline void clear_has_log_param();
  inline void set_has_lrn_param();
  inline void clear_has_lrn_param();
  inline void set_has_memory_data_param();
  inline void clear_has_memory_data_param();
  inline void set_has_multibox_loss_param();
  inline void clear_has_multibox_loss_param();
  inline void set_has_mvn_param();
  inline void clear_has_mvn_param();
  inline void set_has_norm_param();
  inline void clear_has_norm_param();
  inline void set_has_parameter_param();
  inline void clear_has_parameter_param();
  inline void set_has_permute_param();
  inline void clear_has_permute_param();
  inline void set_has_pooling_param();
  inline void clear_has_pooling_param();
  inline void set_has_power_param();
  inline void clear_has_power_param();
  inline void set_has_prelu_param();
  inline void clear_has_prelu_param();
  inline void set_has_prior_box_param();
  inline void clear_has_prior_box_param();
  inline void set_has_python_param();
  inline void clear_has_python_param();
  inline void set_has_reduction_param();
  inline void clear_has_reduction_param();
  inline void set_has_relu_param();
  inline void clear_has_relu_param();
  inline void set_has_reshape_param();
  inline void clear_has_reshape_param();
  inline void set_has_scale_param();
  inline void clear_has_scale_param();
  inline void set_has_sigmoid_param();
  inline void clear_has_sigmoid_param();
  inline void set_has_softmax_param();
  inline void clear_has_softmax_param();
  inline void set_has_spp_param();
  inline void clear_has_spp_param();
  inline void set_has_slice_param();
  inline void clear_has_slice_param();
  inline void set_has_tanh_param();
  inline void clear_has_tanh_param();
  inline void set_has_threshold_param();
  inline void clear_has_threshold_param();
  inline void set_has_tile_param();
  inline void clear_has_tile_param();
  inline void set_has_window_data_param();
  inline void clear_has_window_data_param();
  inline void set_has_detectnet_groundtruth_param();
  inline void clear_has_detectnet_groundtruth_param();
  inline void set_has_detectnet_augmentation_param();
  inline void clear_has_detectnet_augmentation_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[3];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bottom_;
  ::google::protobuf::RepeatedPtrField< ::std::string> top_;
  int forward_type_;
  int backward_type_;
  int forward_math_;
  int backward_math_;
  bool debug_;
  int phase_;
  ::google::protobuf::RepeatedField< float > loss_weight_;
  ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec > param_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto > blobs_;
  ::google::protobuf::RepeatedField< bool > propagate_down_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule > include_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule > exclude_;
  ::caffe::TransformationParameter* transform_param_;
  ::caffe::LossParameter* loss_param_;
  ::caffe::AccuracyParameter* accuracy_param_;
  ::caffe::ArgMaxParameter* argmax_param_;
  ::caffe::AnnotatedDataParameter* annotated_data_param_;
  ::caffe::BatchNormParameter* batch_norm_param_;
  ::caffe::BiasParameter* bias_param_;
  ::caffe::ConcatParameter* concat_param_;
  ::caffe::ContrastiveLossParameter* contrastive_loss_param_;
  ::caffe::ConvolutionParameter* convolution_param_;
  ::caffe::CropParameter* crop_param_;
  ::caffe::DataParameter* data_param_;
  ::caffe::DropoutParameter* dropout_param_;
  ::caffe::DummyDataParameter* dummy_data_param_;
  ::caffe::EltwiseParameter* eltwise_param_;
  ::caffe::ELUParameter* elu_param_;
  ::caffe::EmbedParameter* embed_param_;
  ::caffe::ExpParameter* exp_param_;
  ::caffe::FlattenParameter* flatten_param_;
  ::caffe::HDF5DataParameter* hdf5_data_param_;
  ::caffe::HDF5OutputParameter* hdf5_output_param_;
  ::caffe::HingeLossParameter* hinge_loss_param_;
  ::caffe::ImageDataParameter* image_data_param_;
  ::caffe::InfogainLossParameter* infogain_loss_param_;
  ::caffe::InnerProductParameter* inner_product_param_;
  ::caffe::InputParameter* input_param_;
  ::caffe::LogParameter* log_param_;
  ::caffe::LRNParameter* lrn_param_;
  ::caffe::MemoryDataParameter* memory_data_param_;
  ::caffe::MultiBoxLossParameter* multibox_loss_param_;
  ::caffe::MVNParameter* mvn_param_;
  ::caffe::NormalizeParameter* norm_param_;
  ::caffe::ParameterParameter* parameter_param_;
  ::caffe::PermuteParameter* permute_param_;
  ::caffe::PoolingParameter* pooling_param_;
  ::caffe::PowerParameter* power_param_;
  ::caffe::PReLUParameter* prelu_param_;
  ::caffe::PriorBoxParameter* prior_box_param_;
  ::caffe::PythonParameter* python_param_;
  ::caffe::ReductionParameter* reduction_param_;
  ::caffe::ReLUParameter* relu_param_;
  ::caffe::ReshapeParameter* reshape_param_;
  ::caffe::ScaleParameter* scale_param_;
  ::caffe::SigmoidParameter* sigmoid_param_;
  ::caffe::SoftmaxParameter* softmax_param_;
  ::caffe::SPPParameter* spp_param_;
  ::caffe::SliceParameter* slice_param_;
  ::caffe::TanHParameter* tanh_param_;
  ::caffe::ThresholdParameter* threshold_param_;
  ::caffe::TileParameter* tile_param_;
  ::caffe::WindowDataParameter* window_data_param_;
  ::caffe::DetectNetGroundTruthParameter* detectnet_groundtruth_param_;
  ::caffe::DetectNetAugmentationParameter* detectnet_augmentation_param_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static LayerParameter* default_instance_;
};
// -------------------------------------------------------------------

class TransformationParameter : public ::google::protobuf::Message {
 public:
  TransformationParameter();
  virtual ~TransformationParameter();

  TransformationParameter(const TransformationParameter& from);

  inline TransformationParameter& operator=(const TransformationParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransformationParameter& default_instance();

  void Swap(TransformationParameter* other);

  // implements Message ----------------------------------------------

  TransformationParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransformationParameter& from);
  void MergeFrom(const TransformationParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float scale = 1 [default = 1];
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 1;
  inline float scale() const;
  inline void set_scale(float value);

  // optional bool mirror = 2 [default = false];
  inline bool has_mirror() const;
  inline void clear_mirror();
  static const int kMirrorFieldNumber = 2;
  inline bool mirror() const;
  inline void set_mirror(bool value);

  // optional uint32 crop_size = 3 [default = 0];
  inline bool has_crop_size() const;
  inline void clear_crop_size();
  static const int kCropSizeFieldNumber = 3;
  inline ::google::protobuf::uint32 crop_size() const;
  inline void set_crop_size(::google::protobuf::uint32 value);

  // optional uint32 crop_h = 11 [default = 0];
  inline bool has_crop_h() const;
  inline void clear_crop_h();
  static const int kCropHFieldNumber = 11;
  inline ::google::protobuf::uint32 crop_h() const;
  inline void set_crop_h(::google::protobuf::uint32 value);

  // optional uint32 crop_w = 12 [default = 0];
  inline bool has_crop_w() const;
  inline void clear_crop_w();
  static const int kCropWFieldNumber = 12;
  inline ::google::protobuf::uint32 crop_w() const;
  inline void set_crop_w(::google::protobuf::uint32 value);

  // optional string mean_file = 4;
  inline bool has_mean_file() const;
  inline void clear_mean_file();
  static const int kMeanFileFieldNumber = 4;
  inline const ::std::string& mean_file() const;
  inline void set_mean_file(const ::std::string& value);
  inline void set_mean_file(const char* value);
  inline void set_mean_file(const char* value, size_t size);
  inline ::std::string* mutable_mean_file();
  inline ::std::string* release_mean_file();
  inline void set_allocated_mean_file(::std::string* mean_file);

  // repeated float mean_value = 5;
  inline int mean_value_size() const;
  inline void clear_mean_value();
  static const int kMeanValueFieldNumber = 5;
  inline float mean_value(int index) const;
  inline void set_mean_value(int index, float value);
  inline void add_mean_value(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      mean_value() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_mean_value();

  // optional bool force_color = 6 [default = false];
  inline bool has_force_color() const;
  inline void clear_force_color();
  static const int kForceColorFieldNumber = 6;
  inline bool force_color() const;
  inline void set_force_color(bool value);

  // optional bool force_gray = 7 [default = false];
  inline bool has_force_gray() const;
  inline void clear_force_gray();
  static const int kForceGrayFieldNumber = 7;
  inline bool force_gray() const;
  inline void set_force_gray(bool value);

  // optional .caffe.ResizeParameter resize_param = 8;
  inline bool has_resize_param() const;
  inline void clear_resize_param();
  static const int kResizeParamFieldNumber = 8;
  inline const ::caffe::ResizeParameter& resize_param() const;
  inline ::caffe::ResizeParameter* mutable_resize_param();
  inline ::caffe::ResizeParameter* release_resize_param();
  inline void set_allocated_resize_param(::caffe::ResizeParameter* resize_param);

  // optional .caffe.NoiseParameter noise_param = 9;
  inline bool has_noise_param() const;
  inline void clear_noise_param();
  static const int kNoiseParamFieldNumber = 9;
  inline const ::caffe::NoiseParameter& noise_param() const;
  inline ::caffe::NoiseParameter* mutable_noise_param();
  inline ::caffe::NoiseParameter* release_noise_param();
  inline void set_allocated_noise_param(::caffe::NoiseParameter* noise_param);

  // optional .caffe.DistortionParameter distort_param = 13;
  inline bool has_distort_param() const;
  inline void clear_distort_param();
  static const int kDistortParamFieldNumber = 13;
  inline const ::caffe::DistortionParameter& distort_param() const;
  inline ::caffe::DistortionParameter* mutable_distort_param();
  inline ::caffe::DistortionParameter* release_distort_param();
  inline void set_allocated_distort_param(::caffe::DistortionParameter* distort_param);

  // optional .caffe.ExpansionParameter expand_param = 14;
  inline bool has_expand_param() const;
  inline void clear_expand_param();
  static const int kExpandParamFieldNumber = 14;
  inline const ::caffe::ExpansionParameter& expand_param() const;
  inline ::caffe::ExpansionParameter* mutable_expand_param();
  inline ::caffe::ExpansionParameter* release_expand_param();
  inline void set_allocated_expand_param(::caffe::ExpansionParameter* expand_param);

  // optional .caffe.EmitConstraint emit_constraint = 10;
  inline bool has_emit_constraint() const;
  inline void clear_emit_constraint();
  static const int kEmitConstraintFieldNumber = 10;
  inline const ::caffe::EmitConstraint& emit_constraint() const;
  inline ::caffe::EmitConstraint* mutable_emit_constraint();
  inline ::caffe::EmitConstraint* release_emit_constraint();
  inline void set_allocated_emit_constraint(::caffe::EmitConstraint* emit_constraint);

  // optional bool use_gpu_transform = 15 [default = false];
  inline bool has_use_gpu_transform() const;
  inline void clear_use_gpu_transform();
  static const int kUseGpuTransformFieldNumber = 15;
  inline bool use_gpu_transform() const;
  inline void set_use_gpu_transform(bool value);

  // optional int64 random_seed = 16 [default = -1];
  inline bool has_random_seed() const;
  inline void clear_random_seed();
  static const int kRandomSeedFieldNumber = 16;
  inline ::google::protobuf::int64 random_seed() const;
  inline void set_random_seed(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:caffe.TransformationParameter)
 private:
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_crop_size();
  inline void clear_has_crop_size();
  inline void set_has_crop_h();
  inline void clear_has_crop_h();
  inline void set_has_crop_w();
  inline void clear_has_crop_w();
  inline void set_has_mean_file();
  inline void clear_has_mean_file();
  inline void set_has_force_color();
  inline void clear_has_force_color();
  inline void set_has_force_gray();
  inline void clear_has_force_gray();
  inline void set_has_resize_param();
  inline void clear_has_resize_param();
  inline void set_has_noise_param();
  inline void clear_has_noise_param();
  inline void set_has_distort_param();
  inline void clear_has_distort_param();
  inline void set_has_expand_param();
  inline void clear_has_expand_param();
  inline void set_has_emit_constraint();
  inline void clear_has_emit_constraint();
  inline void set_has_use_gpu_transform();
  inline void clear_has_use_gpu_transform();
  inline void set_has_random_seed();
  inline void clear_has_random_seed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float scale_;
  ::google::protobuf::uint32 crop_size_;
  ::google::protobuf::uint32 crop_h_;
  ::google::protobuf::uint32 crop_w_;
  ::std::string* mean_file_;
  ::google::protobuf::RepeatedField< float > mean_value_;
  ::caffe::ResizeParameter* resize_param_;
  ::caffe::NoiseParameter* noise_param_;
  ::caffe::DistortionParameter* distort_param_;
  ::caffe::ExpansionParameter* expand_param_;
  ::caffe::EmitConstraint* emit_constraint_;
  ::google::protobuf::int64 random_seed_;
  bool mirror_;
  bool force_color_;
  bool force_gray_;
  bool use_gpu_transform_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static TransformationParameter* default_instance_;
};
// -------------------------------------------------------------------

class ResizeParameter : public ::google::protobuf::Message {
 public:
  ResizeParameter();
  virtual ~ResizeParameter();

  ResizeParameter(const ResizeParameter& from);

  inline ResizeParameter& operator=(const ResizeParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResizeParameter& default_instance();

  void Swap(ResizeParameter* other);

  // implements Message ----------------------------------------------

  ResizeParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResizeParameter& from);
  void MergeFrom(const ResizeParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ResizeParameter_Resize_mode Resize_mode;
  static const Resize_mode WARP = ResizeParameter_Resize_mode_WARP;
  static const Resize_mode FIT_SMALL_SIZE = ResizeParameter_Resize_mode_FIT_SMALL_SIZE;
  static const Resize_mode FIT_LARGE_SIZE_AND_PAD = ResizeParameter_Resize_mode_FIT_LARGE_SIZE_AND_PAD;
  static inline bool Resize_mode_IsValid(int value) {
    return ResizeParameter_Resize_mode_IsValid(value);
  }
  static const Resize_mode Resize_mode_MIN =
    ResizeParameter_Resize_mode_Resize_mode_MIN;
  static const Resize_mode Resize_mode_MAX =
    ResizeParameter_Resize_mode_Resize_mode_MAX;
  static const int Resize_mode_ARRAYSIZE =
    ResizeParameter_Resize_mode_Resize_mode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Resize_mode_descriptor() {
    return ResizeParameter_Resize_mode_descriptor();
  }
  static inline const ::std::string& Resize_mode_Name(Resize_mode value) {
    return ResizeParameter_Resize_mode_Name(value);
  }
  static inline bool Resize_mode_Parse(const ::std::string& name,
      Resize_mode* value) {
    return ResizeParameter_Resize_mode_Parse(name, value);
  }

  typedef ResizeParameter_Pad_mode Pad_mode;
  static const Pad_mode CONSTANT = ResizeParameter_Pad_mode_CONSTANT;
  static const Pad_mode MIRRORED = ResizeParameter_Pad_mode_MIRRORED;
  static const Pad_mode REPEAT_NEAREST = ResizeParameter_Pad_mode_REPEAT_NEAREST;
  static inline bool Pad_mode_IsValid(int value) {
    return ResizeParameter_Pad_mode_IsValid(value);
  }
  static const Pad_mode Pad_mode_MIN =
    ResizeParameter_Pad_mode_Pad_mode_MIN;
  static const Pad_mode Pad_mode_MAX =
    ResizeParameter_Pad_mode_Pad_mode_MAX;
  static const int Pad_mode_ARRAYSIZE =
    ResizeParameter_Pad_mode_Pad_mode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pad_mode_descriptor() {
    return ResizeParameter_Pad_mode_descriptor();
  }
  static inline const ::std::string& Pad_mode_Name(Pad_mode value) {
    return ResizeParameter_Pad_mode_Name(value);
  }
  static inline bool Pad_mode_Parse(const ::std::string& name,
      Pad_mode* value) {
    return ResizeParameter_Pad_mode_Parse(name, value);
  }

  typedef ResizeParameter_Interp_mode Interp_mode;
  static const Interp_mode LINEAR = ResizeParameter_Interp_mode_LINEAR;
  static const Interp_mode AREA = ResizeParameter_Interp_mode_AREA;
  static const Interp_mode NEAREST = ResizeParameter_Interp_mode_NEAREST;
  static const Interp_mode CUBIC = ResizeParameter_Interp_mode_CUBIC;
  static const Interp_mode LANCZOS4 = ResizeParameter_Interp_mode_LANCZOS4;
  static inline bool Interp_mode_IsValid(int value) {
    return ResizeParameter_Interp_mode_IsValid(value);
  }
  static const Interp_mode Interp_mode_MIN =
    ResizeParameter_Interp_mode_Interp_mode_MIN;
  static const Interp_mode Interp_mode_MAX =
    ResizeParameter_Interp_mode_Interp_mode_MAX;
  static const int Interp_mode_ARRAYSIZE =
    ResizeParameter_Interp_mode_Interp_mode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Interp_mode_descriptor() {
    return ResizeParameter_Interp_mode_descriptor();
  }
  static inline const ::std::string& Interp_mode_Name(Interp_mode value) {
    return ResizeParameter_Interp_mode_Name(value);
  }
  static inline bool Interp_mode_Parse(const ::std::string& name,
      Interp_mode* value) {
    return ResizeParameter_Interp_mode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional float prob = 1 [default = 1];
  inline bool has_prob() const;
  inline void clear_prob();
  static const int kProbFieldNumber = 1;
  inline float prob() const;
  inline void set_prob(float value);

  // optional .caffe.ResizeParameter.Resize_mode resize_mode = 2 [default = WARP];
  inline bool has_resize_mode() const;
  inline void clear_resize_mode();
  static const int kResizeModeFieldNumber = 2;
  inline ::caffe::ResizeParameter_Resize_mode resize_mode() const;
  inline void set_resize_mode(::caffe::ResizeParameter_Resize_mode value);

  // optional uint32 height = 3 [default = 0];
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);

  // optional uint32 width = 4 [default = 0];
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 4;
  inline ::google::protobuf::uint32 width() const;
  inline void set_width(::google::protobuf::uint32 value);

  // optional uint32 height_scale = 8 [default = 0];
  inline bool has_height_scale() const;
  inline void clear_height_scale();
  static const int kHeightScaleFieldNumber = 8;
  inline ::google::protobuf::uint32 height_scale() const;
  inline void set_height_scale(::google::protobuf::uint32 value);

  // optional uint32 width_scale = 9 [default = 0];
  inline bool has_width_scale() const;
  inline void clear_width_scale();
  static const int kWidthScaleFieldNumber = 9;
  inline ::google::protobuf::uint32 width_scale() const;
  inline void set_width_scale(::google::protobuf::uint32 value);

  // optional .caffe.ResizeParameter.Pad_mode pad_mode = 5 [default = CONSTANT];
  inline bool has_pad_mode() const;
  inline void clear_pad_mode();
  static const int kPadModeFieldNumber = 5;
  inline ::caffe::ResizeParameter_Pad_mode pad_mode() const;
  inline void set_pad_mode(::caffe::ResizeParameter_Pad_mode value);

  // repeated float pad_value = 6;
  inline int pad_value_size() const;
  inline void clear_pad_value();
  static const int kPadValueFieldNumber = 6;
  inline float pad_value(int index) const;
  inline void set_pad_value(int index, float value);
  inline void add_pad_value(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      pad_value() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_pad_value();

  // repeated .caffe.ResizeParameter.Interp_mode interp_mode = 7;
  inline int interp_mode_size() const;
  inline void clear_interp_mode();
  static const int kInterpModeFieldNumber = 7;
  inline ::caffe::ResizeParameter_Interp_mode interp_mode(int index) const;
  inline void set_interp_mode(int index, ::caffe::ResizeParameter_Interp_mode value);
  inline void add_interp_mode(::caffe::ResizeParameter_Interp_mode value);
  inline const ::google::protobuf::RepeatedField<int>& interp_mode() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_interp_mode();

  // @@protoc_insertion_point(class_scope:caffe.ResizeParameter)
 private:
  inline void set_has_prob();
  inline void clear_has_prob();
  inline void set_has_resize_mode();
  inline void clear_has_resize_mode();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height_scale();
  inline void clear_has_height_scale();
  inline void set_has_width_scale();
  inline void clear_has_width_scale();
  inline void set_has_pad_mode();
  inline void clear_has_pad_mode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float prob_;
  int resize_mode_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_scale_;
  ::google::protobuf::uint32 width_scale_;
  ::google::protobuf::RepeatedField< float > pad_value_;
  ::google::protobuf::RepeatedField<int> interp_mode_;
  int pad_mode_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static ResizeParameter* default_instance_;
};
// -------------------------------------------------------------------

class SaltPepperParameter : public ::google::protobuf::Message {
 public:
  SaltPepperParameter();
  virtual ~SaltPepperParameter();

  SaltPepperParameter(const SaltPepperParameter& from);

  inline SaltPepperParameter& operator=(const SaltPepperParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SaltPepperParameter& default_instance();

  void Swap(SaltPepperParameter* other);

  // implements Message ----------------------------------------------

  SaltPepperParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SaltPepperParameter& from);
  void MergeFrom(const SaltPepperParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float fraction = 1 [default = 0];
  inline bool has_fraction() const;
  inline void clear_fraction();
  static const int kFractionFieldNumber = 1;
  inline float fraction() const;
  inline void set_fraction(float value);

  // repeated float value = 2;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline float value(int index) const;
  inline void set_value(int index, float value);
  inline void add_value(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      value() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:caffe.SaltPepperParameter)
 private:
  inline void set_has_fraction();
  inline void clear_has_fraction();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > value_;
  float fraction_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static SaltPepperParameter* default_instance_;
};
// -------------------------------------------------------------------

class NoiseParameter : public ::google::protobuf::Message {
 public:
  NoiseParameter();
  virtual ~NoiseParameter();

  NoiseParameter(const NoiseParameter& from);

  inline NoiseParameter& operator=(const NoiseParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NoiseParameter& default_instance();

  void Swap(NoiseParameter* other);

  // implements Message ----------------------------------------------

  NoiseParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NoiseParameter& from);
  void MergeFrom(const NoiseParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float prob = 1 [default = 0];
  inline bool has_prob() const;
  inline void clear_prob();
  static const int kProbFieldNumber = 1;
  inline float prob() const;
  inline void set_prob(float value);

  // optional bool hist_eq = 2 [default = false];
  inline bool has_hist_eq() const;
  inline void clear_hist_eq();
  static const int kHistEqFieldNumber = 2;
  inline bool hist_eq() const;
  inline void set_hist_eq(bool value);

  // optional bool inverse = 3 [default = false];
  inline bool has_inverse() const;
  inline void clear_inverse();
  static const int kInverseFieldNumber = 3;
  inline bool inverse() const;
  inline void set_inverse(bool value);

  // optional bool decolorize = 4 [default = false];
  inline bool has_decolorize() const;
  inline void clear_decolorize();
  static const int kDecolorizeFieldNumber = 4;
  inline bool decolorize() const;
  inline void set_decolorize(bool value);

  // optional bool gauss_blur = 5 [default = false];
  inline bool has_gauss_blur() const;
  inline void clear_gauss_blur();
  static const int kGaussBlurFieldNumber = 5;
  inline bool gauss_blur() const;
  inline void set_gauss_blur(bool value);

  // optional float jpeg = 6 [default = -1];
  inline bool has_jpeg() const;
  inline void clear_jpeg();
  static const int kJpegFieldNumber = 6;
  inline float jpeg() const;
  inline void set_jpeg(float value);

  // optional bool posterize = 7 [default = false];
  inline bool has_posterize() const;
  inline void clear_posterize();
  static const int kPosterizeFieldNumber = 7;
  inline bool posterize() const;
  inline void set_posterize(bool value);

  // optional bool erode = 8 [default = false];
  inline bool has_erode() const;
  inline void clear_erode();
  static const int kErodeFieldNumber = 8;
  inline bool erode() const;
  inline void set_erode(bool value);

  // optional bool saltpepper = 9 [default = false];
  inline bool has_saltpepper() const;
  inline void clear_saltpepper();
  static const int kSaltpepperFieldNumber = 9;
  inline bool saltpepper() const;
  inline void set_saltpepper(bool value);

  // optional .caffe.SaltPepperParameter saltpepper_param = 10;
  inline bool has_saltpepper_param() const;
  inline void clear_saltpepper_param();
  static const int kSaltpepperParamFieldNumber = 10;
  inline const ::caffe::SaltPepperParameter& saltpepper_param() const;
  inline ::caffe::SaltPepperParameter* mutable_saltpepper_param();
  inline ::caffe::SaltPepperParameter* release_saltpepper_param();
  inline void set_allocated_saltpepper_param(::caffe::SaltPepperParameter* saltpepper_param);

  // optional bool clahe = 11 [default = false];
  inline bool has_clahe() const;
  inline void clear_clahe();
  static const int kClaheFieldNumber = 11;
  inline bool clahe() const;
  inline void set_clahe(bool value);

  // optional bool convert_to_hsv = 12 [default = false];
  inline bool has_convert_to_hsv() const;
  inline void clear_convert_to_hsv();
  static const int kConvertToHsvFieldNumber = 12;
  inline bool convert_to_hsv() const;
  inline void set_convert_to_hsv(bool value);

  // optional bool convert_to_lab = 13 [default = false];
  inline bool has_convert_to_lab() const;
  inline void clear_convert_to_lab();
  static const int kConvertToLabFieldNumber = 13;
  inline bool convert_to_lab() const;
  inline void set_convert_to_lab(bool value);

  // @@protoc_insertion_point(class_scope:caffe.NoiseParameter)
 private:
  inline void set_has_prob();
  inline void clear_has_prob();
  inline void set_has_hist_eq();
  inline void clear_has_hist_eq();
  inline void set_has_inverse();
  inline void clear_has_inverse();
  inline void set_has_decolorize();
  inline void clear_has_decolorize();
  inline void set_has_gauss_blur();
  inline void clear_has_gauss_blur();
  inline void set_has_jpeg();
  inline void clear_has_jpeg();
  inline void set_has_posterize();
  inline void clear_has_posterize();
  inline void set_has_erode();
  inline void clear_has_erode();
  inline void set_has_saltpepper();
  inline void clear_has_saltpepper();
  inline void set_has_saltpepper_param();
  inline void clear_has_saltpepper_param();
  inline void set_has_clahe();
  inline void clear_has_clahe();
  inline void set_has_convert_to_hsv();
  inline void clear_has_convert_to_hsv();
  inline void set_has_convert_to_lab();
  inline void clear_has_convert_to_lab();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float prob_;
  bool hist_eq_;
  bool inverse_;
  bool decolorize_;
  bool gauss_blur_;
  float jpeg_;
  bool posterize_;
  bool erode_;
  bool saltpepper_;
  bool clahe_;
  ::caffe::SaltPepperParameter* saltpepper_param_;
  bool convert_to_hsv_;
  bool convert_to_lab_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static NoiseParameter* default_instance_;
};
// -------------------------------------------------------------------

class DistortionParameter : public ::google::protobuf::Message {
 public:
  DistortionParameter();
  virtual ~DistortionParameter();

  DistortionParameter(const DistortionParameter& from);

  inline DistortionParameter& operator=(const DistortionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DistortionParameter& default_instance();

  void Swap(DistortionParameter* other);

  // implements Message ----------------------------------------------

  DistortionParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DistortionParameter& from);
  void MergeFrom(const DistortionParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float brightness_prob = 1 [default = 0];
  inline bool has_brightness_prob() const;
  inline void clear_brightness_prob();
  static const int kBrightnessProbFieldNumber = 1;
  inline float brightness_prob() const;
  inline void set_brightness_prob(float value);

  // optional float brightness_delta = 2 [default = 0];
  inline bool has_brightness_delta() const;
  inline void clear_brightness_delta();
  static const int kBrightnessDeltaFieldNumber = 2;
  inline float brightness_delta() const;
  inline void set_brightness_delta(float value);

  // optional float contrast_prob = 3 [default = 0];
  inline bool has_contrast_prob() const;
  inline void clear_contrast_prob();
  static const int kContrastProbFieldNumber = 3;
  inline float contrast_prob() const;
  inline void set_contrast_prob(float value);

  // optional float contrast_lower = 4 [default = 0];
  inline bool has_contrast_lower() const;
  inline void clear_contrast_lower();
  static const int kContrastLowerFieldNumber = 4;
  inline float contrast_lower() const;
  inline void set_contrast_lower(float value);

  // optional float contrast_upper = 5 [default = 0];
  inline bool has_contrast_upper() const;
  inline void clear_contrast_upper();
  static const int kContrastUpperFieldNumber = 5;
  inline float contrast_upper() const;
  inline void set_contrast_upper(float value);

  // optional float hue_prob = 6 [default = 0];
  inline bool has_hue_prob() const;
  inline void clear_hue_prob();
  static const int kHueProbFieldNumber = 6;
  inline float hue_prob() const;
  inline void set_hue_prob(float value);

  // optional float hue_delta = 7 [default = 0];
  inline bool has_hue_delta() const;
  inline void clear_hue_delta();
  static const int kHueDeltaFieldNumber = 7;
  inline float hue_delta() const;
  inline void set_hue_delta(float value);

  // optional float saturation_prob = 8 [default = 0];
  inline bool has_saturation_prob() const;
  inline void clear_saturation_prob();
  static const int kSaturationProbFieldNumber = 8;
  inline float saturation_prob() const;
  inline void set_saturation_prob(float value);

  // optional float saturation_lower = 9 [default = 0];
  inline bool has_saturation_lower() const;
  inline void clear_saturation_lower();
  static const int kSaturationLowerFieldNumber = 9;
  inline float saturation_lower() const;
  inline void set_saturation_lower(float value);

  // optional float saturation_upper = 10 [default = 0];
  inline bool has_saturation_upper() const;
  inline void clear_saturation_upper();
  static const int kSaturationUpperFieldNumber = 10;
  inline float saturation_upper() const;
  inline void set_saturation_upper(float value);

  // optional float random_order_prob = 11 [default = 0];
  inline bool has_random_order_prob() const;
  inline void clear_random_order_prob();
  static const int kRandomOrderProbFieldNumber = 11;
  inline float random_order_prob() const;
  inline void set_random_order_prob(float value);

  // @@protoc_insertion_point(class_scope:caffe.DistortionParameter)
 private:
  inline void set_has_brightness_prob();
  inline void clear_has_brightness_prob();
  inline void set_has_brightness_delta();
  inline void clear_has_brightness_delta();
  inline void set_has_contrast_prob();
  inline void clear_has_contrast_prob();
  inline void set_has_contrast_lower();
  inline void clear_has_contrast_lower();
  inline void set_has_contrast_upper();
  inline void clear_has_contrast_upper();
  inline void set_has_hue_prob();
  inline void clear_has_hue_prob();
  inline void set_has_hue_delta();
  inline void clear_has_hue_delta();
  inline void set_has_saturation_prob();
  inline void clear_has_saturation_prob();
  inline void set_has_saturation_lower();
  inline void clear_has_saturation_lower();
  inline void set_has_saturation_upper();
  inline void clear_has_saturation_upper();
  inline void set_has_random_order_prob();
  inline void clear_has_random_order_prob();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float brightness_prob_;
  float brightness_delta_;
  float contrast_prob_;
  float contrast_lower_;
  float contrast_upper_;
  float hue_prob_;
  float hue_delta_;
  float saturation_prob_;
  float saturation_lower_;
  float saturation_upper_;
  float random_order_prob_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static DistortionParameter* default_instance_;
};
// -------------------------------------------------------------------

class ExpansionParameter : public ::google::protobuf::Message {
 public:
  ExpansionParameter();
  virtual ~ExpansionParameter();

  ExpansionParameter(const ExpansionParameter& from);

  inline ExpansionParameter& operator=(const ExpansionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExpansionParameter& default_instance();

  void Swap(ExpansionParameter* other);

  // implements Message ----------------------------------------------

  ExpansionParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExpansionParameter& from);
  void MergeFrom(const ExpansionParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float prob = 1 [default = 1];
  inline bool has_prob() const;
  inline void clear_prob();
  static const int kProbFieldNumber = 1;
  inline float prob() const;
  inline void set_prob(float value);

  // optional float max_expand_ratio = 2 [default = 1];
  inline bool has_max_expand_ratio() const;
  inline void clear_max_expand_ratio();
  static const int kMaxExpandRatioFieldNumber = 2;
  inline float max_expand_ratio() const;
  inline void set_max_expand_ratio(float value);

  // @@protoc_insertion_point(class_scope:caffe.ExpansionParameter)
 private:
  inline void set_has_prob();
  inline void clear_has_prob();
  inline void set_has_max_expand_ratio();
  inline void clear_has_max_expand_ratio();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float prob_;
  float max_expand_ratio_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static ExpansionParameter* default_instance_;
};
// -------------------------------------------------------------------

class DetectNetGroundTruthParameter_ClassMapping : public ::google::protobuf::Message {
 public:
  DetectNetGroundTruthParameter_ClassMapping();
  virtual ~DetectNetGroundTruthParameter_ClassMapping();

  DetectNetGroundTruthParameter_ClassMapping(const DetectNetGroundTruthParameter_ClassMapping& from);

  inline DetectNetGroundTruthParameter_ClassMapping& operator=(const DetectNetGroundTruthParameter_ClassMapping& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DetectNetGroundTruthParameter_ClassMapping& default_instance();

  void Swap(DetectNetGroundTruthParameter_ClassMapping* other);

  // implements Message ----------------------------------------------

  DetectNetGroundTruthParameter_ClassMapping* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DetectNetGroundTruthParameter_ClassMapping& from);
  void MergeFrom(const DetectNetGroundTruthParameter_ClassMapping& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline ::google::protobuf::uint32 src() const;
  inline void set_src(::google::protobuf::uint32 value);

  // required uint32 dst = 2;
  inline bool has_dst() const;
  inline void clear_dst();
  static const int kDstFieldNumber = 2;
  inline ::google::protobuf::uint32 dst() const;
  inline void set_dst(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.DetectNetGroundTruthParameter.ClassMapping)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_dst();
  inline void clear_has_dst();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 src_;
  ::google::protobuf::uint32 dst_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static DetectNetGroundTruthParameter_ClassMapping* default_instance_;
};
// -------------------------------------------------------------------

class DetectNetGroundTruthParameter : public ::google::protobuf::Message {
 public:
  DetectNetGroundTruthParameter();
  virtual ~DetectNetGroundTruthParameter();

  DetectNetGroundTruthParameter(const DetectNetGroundTruthParameter& from);

  inline DetectNetGroundTruthParameter& operator=(const DetectNetGroundTruthParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DetectNetGroundTruthParameter& default_instance();

  void Swap(DetectNetGroundTruthParameter* other);

  // implements Message ----------------------------------------------

  DetectNetGroundTruthParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DetectNetGroundTruthParameter& from);
  void MergeFrom(const DetectNetGroundTruthParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DetectNetGroundTruthParameter_ClassMapping ClassMapping;

  typedef DetectNetGroundTruthParameter_GridboxType GridboxType;
  static const GridboxType GRIDBOX_MAX = DetectNetGroundTruthParameter_GridboxType_GRIDBOX_MAX;
  static const GridboxType GRIDBOX_MIN = DetectNetGroundTruthParameter_GridboxType_GRIDBOX_MIN;
  static inline bool GridboxType_IsValid(int value) {
    return DetectNetGroundTruthParameter_GridboxType_IsValid(value);
  }
  static const GridboxType GridboxType_MIN =
    DetectNetGroundTruthParameter_GridboxType_GridboxType_MIN;
  static const GridboxType GridboxType_MAX =
    DetectNetGroundTruthParameter_GridboxType_GridboxType_MAX;
  static const int GridboxType_ARRAYSIZE =
    DetectNetGroundTruthParameter_GridboxType_GridboxType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GridboxType_descriptor() {
    return DetectNetGroundTruthParameter_GridboxType_descriptor();
  }
  static inline const ::std::string& GridboxType_Name(GridboxType value) {
    return DetectNetGroundTruthParameter_GridboxType_Name(value);
  }
  static inline bool GridboxType_Parse(const ::std::string& name,
      GridboxType* value) {
    return DetectNetGroundTruthParameter_GridboxType_Parse(name, value);
  }

  typedef DetectNetGroundTruthParameter_CoverageType CoverageType;
  static const CoverageType RECTANGULAR = DetectNetGroundTruthParameter_CoverageType_RECTANGULAR;
  static inline bool CoverageType_IsValid(int value) {
    return DetectNetGroundTruthParameter_CoverageType_IsValid(value);
  }
  static const CoverageType CoverageType_MIN =
    DetectNetGroundTruthParameter_CoverageType_CoverageType_MIN;
  static const CoverageType CoverageType_MAX =
    DetectNetGroundTruthParameter_CoverageType_CoverageType_MAX;
  static const int CoverageType_ARRAYSIZE =
    DetectNetGroundTruthParameter_CoverageType_CoverageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CoverageType_descriptor() {
    return DetectNetGroundTruthParameter_CoverageType_descriptor();
  }
  static inline const ::std::string& CoverageType_Name(CoverageType value) {
    return DetectNetGroundTruthParameter_CoverageType_Name(value);
  }
  static inline bool CoverageType_Parse(const ::std::string& name,
      CoverageType* value) {
    return DetectNetGroundTruthParameter_CoverageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 stride = 1 [default = 4];
  inline bool has_stride() const;
  inline void clear_stride();
  static const int kStrideFieldNumber = 1;
  inline ::google::protobuf::uint32 stride() const;
  inline void set_stride(::google::protobuf::uint32 value);

  // optional float scale_cvg = 2 [default = 0.5];
  inline bool has_scale_cvg() const;
  inline void clear_scale_cvg();
  static const int kScaleCvgFieldNumber = 2;
  inline float scale_cvg() const;
  inline void set_scale_cvg(float value);

  // optional .caffe.DetectNetGroundTruthParameter.GridboxType gridbox_type = 3 [default = GRIDBOX_MAX];
  inline bool has_gridbox_type() const;
  inline void clear_gridbox_type();
  static const int kGridboxTypeFieldNumber = 3;
  inline ::caffe::DetectNetGroundTruthParameter_GridboxType gridbox_type() const;
  inline void set_gridbox_type(::caffe::DetectNetGroundTruthParameter_GridboxType value);

  // optional uint32 max_cvg_len = 4 [default = 50];
  inline bool has_max_cvg_len() const;
  inline void clear_max_cvg_len();
  static const int kMaxCvgLenFieldNumber = 4;
  inline ::google::protobuf::uint32 max_cvg_len() const;
  inline void set_max_cvg_len(::google::protobuf::uint32 value);

  // optional uint32 min_cvg_len = 5 [default = 50];
  inline bool has_min_cvg_len() const;
  inline void clear_min_cvg_len();
  static const int kMinCvgLenFieldNumber = 5;
  inline ::google::protobuf::uint32 min_cvg_len() const;
  inline void set_min_cvg_len(::google::protobuf::uint32 value);

  // optional .caffe.DetectNetGroundTruthParameter.CoverageType coverage_type = 7 [default = RECTANGULAR];
  inline bool has_coverage_type() const;
  inline void clear_coverage_type();
  static const int kCoverageTypeFieldNumber = 7;
  inline ::caffe::DetectNetGroundTruthParameter_CoverageType coverage_type() const;
  inline void set_coverage_type(::caffe::DetectNetGroundTruthParameter_CoverageType value);

  // optional uint32 image_size_x = 8 [default = 1248];
  inline bool has_image_size_x() const;
  inline void clear_image_size_x();
  static const int kImageSizeXFieldNumber = 8;
  inline ::google::protobuf::uint32 image_size_x() const;
  inline void set_image_size_x(::google::protobuf::uint32 value);

  // optional uint32 image_size_y = 9 [default = 384];
  inline bool has_image_size_y() const;
  inline void clear_image_size_y();
  static const int kImageSizeYFieldNumber = 9;
  inline ::google::protobuf::uint32 image_size_y() const;
  inline void set_image_size_y(::google::protobuf::uint32 value);

  // optional bool obj_norm = 11 [default = false];
  inline bool has_obj_norm() const;
  inline void clear_obj_norm();
  static const int kObjNormFieldNumber = 11;
  inline bool obj_norm() const;
  inline void set_obj_norm(bool value);

  // optional bool crop_bboxes = 12 [default = true];
  inline bool has_crop_bboxes() const;
  inline void clear_crop_bboxes();
  static const int kCropBboxesFieldNumber = 12;
  inline bool crop_bboxes() const;
  inline void set_crop_bboxes(bool value);

  // repeated .caffe.DetectNetGroundTruthParameter.ClassMapping object_class = 13;
  inline int object_class_size() const;
  inline void clear_object_class();
  static const int kObjectClassFieldNumber = 13;
  inline const ::caffe::DetectNetGroundTruthParameter_ClassMapping& object_class(int index) const;
  inline ::caffe::DetectNetGroundTruthParameter_ClassMapping* mutable_object_class(int index);
  inline ::caffe::DetectNetGroundTruthParameter_ClassMapping* add_object_class();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::DetectNetGroundTruthParameter_ClassMapping >&
      object_class() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::DetectNetGroundTruthParameter_ClassMapping >*
      mutable_object_class();

  // @@protoc_insertion_point(class_scope:caffe.DetectNetGroundTruthParameter)
 private:
  inline void set_has_stride();
  inline void clear_has_stride();
  inline void set_has_scale_cvg();
  inline void clear_has_scale_cvg();
  inline void set_has_gridbox_type();
  inline void clear_has_gridbox_type();
  inline void set_has_max_cvg_len();
  inline void clear_has_max_cvg_len();
  inline void set_has_min_cvg_len();
  inline void clear_has_min_cvg_len();
  inline void set_has_coverage_type();
  inline void clear_has_coverage_type();
  inline void set_has_image_size_x();
  inline void clear_has_image_size_x();
  inline void set_has_image_size_y();
  inline void clear_has_image_size_y();
  inline void set_has_obj_norm();
  inline void clear_has_obj_norm();
  inline void set_has_crop_bboxes();
  inline void clear_has_crop_bboxes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 stride_;
  float scale_cvg_;
  int gridbox_type_;
  ::google::protobuf::uint32 max_cvg_len_;
  ::google::protobuf::uint32 min_cvg_len_;
  int coverage_type_;
  ::google::protobuf::uint32 image_size_x_;
  ::google::protobuf::uint32 image_size_y_;
  ::google::protobuf::RepeatedPtrField< ::caffe::DetectNetGroundTruthParameter_ClassMapping > object_class_;
  bool obj_norm_;
  bool crop_bboxes_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static DetectNetGroundTruthParameter* default_instance_;
};
// -------------------------------------------------------------------

class DetectNetAugmentationParameter : public ::google::protobuf::Message {
 public:
  DetectNetAugmentationParameter();
  virtual ~DetectNetAugmentationParameter();

  DetectNetAugmentationParameter(const DetectNetAugmentationParameter& from);

  inline DetectNetAugmentationParameter& operator=(const DetectNetAugmentationParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DetectNetAugmentationParameter& default_instance();

  void Swap(DetectNetAugmentationParameter* other);

  // implements Message ----------------------------------------------

  DetectNetAugmentationParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DetectNetAugmentationParameter& from);
  void MergeFrom(const DetectNetAugmentationParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float crop_prob = 1 [default = 1];
  inline bool has_crop_prob() const;
  inline void clear_crop_prob();
  static const int kCropProbFieldNumber = 1;
  inline float crop_prob() const;
  inline void set_crop_prob(float value);

  // optional uint32 shift_x = 2 [default = 0];
  inline bool has_shift_x() const;
  inline void clear_shift_x();
  static const int kShiftXFieldNumber = 2;
  inline ::google::protobuf::uint32 shift_x() const;
  inline void set_shift_x(::google::protobuf::uint32 value);

  // optional uint32 shift_y = 3 [default = 0];
  inline bool has_shift_y() const;
  inline void clear_shift_y();
  static const int kShiftYFieldNumber = 3;
  inline ::google::protobuf::uint32 shift_y() const;
  inline void set_shift_y(::google::protobuf::uint32 value);

  // optional float scale_prob = 4 [default = 0.33];
  inline bool has_scale_prob() const;
  inline void clear_scale_prob();
  static const int kScaleProbFieldNumber = 4;
  inline float scale_prob() const;
  inline void set_scale_prob(float value);

  // optional float scale_min = 5 [default = 0.7];
  inline bool has_scale_min() const;
  inline void clear_scale_min();
  static const int kScaleMinFieldNumber = 5;
  inline float scale_min() const;
  inline void set_scale_min(float value);

  // optional float scale_max = 6 [default = 1];
  inline bool has_scale_max() const;
  inline void clear_scale_max();
  static const int kScaleMaxFieldNumber = 6;
  inline float scale_max() const;
  inline void set_scale_max(float value);

  // optional float flip_prob = 7 [default = 0.33];
  inline bool has_flip_prob() const;
  inline void clear_flip_prob();
  static const int kFlipProbFieldNumber = 7;
  inline float flip_prob() const;
  inline void set_flip_prob(float value);

  // optional float rotation_prob = 8 [default = 0.33];
  inline bool has_rotation_prob() const;
  inline void clear_rotation_prob();
  static const int kRotationProbFieldNumber = 8;
  inline float rotation_prob() const;
  inline void set_rotation_prob(float value);

  // optional float max_rotate_degree = 9 [default = 1];
  inline bool has_max_rotate_degree() const;
  inline void clear_max_rotate_degree();
  static const int kMaxRotateDegreeFieldNumber = 9;
  inline float max_rotate_degree() const;
  inline void set_max_rotate_degree(float value);

  // optional float hue_rotation_prob = 10 [default = 0.33];
  inline bool has_hue_rotation_prob() const;
  inline void clear_hue_rotation_prob();
  static const int kHueRotationProbFieldNumber = 10;
  inline float hue_rotation_prob() const;
  inline void set_hue_rotation_prob(float value);

  // optional float hue_rotation = 11 [default = 15];
  inline bool has_hue_rotation() const;
  inline void clear_hue_rotation();
  static const int kHueRotationFieldNumber = 11;
  inline float hue_rotation() const;
  inline void set_hue_rotation(float value);

  // optional float desaturation_prob = 12 [default = 0.33];
  inline bool has_desaturation_prob() const;
  inline void clear_desaturation_prob();
  static const int kDesaturationProbFieldNumber = 12;
  inline float desaturation_prob() const;
  inline void set_desaturation_prob(float value);

  // optional float desaturation_max = 13 [default = 0.5];
  inline bool has_desaturation_max() const;
  inline void clear_desaturation_max();
  static const int kDesaturationMaxFieldNumber = 13;
  inline float desaturation_max() const;
  inline void set_desaturation_max(float value);

  // @@protoc_insertion_point(class_scope:caffe.DetectNetAugmentationParameter)
 private:
  inline void set_has_crop_prob();
  inline void clear_has_crop_prob();
  inline void set_has_shift_x();
  inline void clear_has_shift_x();
  inline void set_has_shift_y();
  inline void clear_has_shift_y();
  inline void set_has_scale_prob();
  inline void clear_has_scale_prob();
  inline void set_has_scale_min();
  inline void clear_has_scale_min();
  inline void set_has_scale_max();
  inline void clear_has_scale_max();
  inline void set_has_flip_prob();
  inline void clear_has_flip_prob();
  inline void set_has_rotation_prob();
  inline void clear_has_rotation_prob();
  inline void set_has_max_rotate_degree();
  inline void clear_has_max_rotate_degree();
  inline void set_has_hue_rotation_prob();
  inline void clear_has_hue_rotation_prob();
  inline void set_has_hue_rotation();
  inline void clear_has_hue_rotation();
  inline void set_has_desaturation_prob();
  inline void clear_has_desaturation_prob();
  inline void set_has_desaturation_max();
  inline void clear_has_desaturation_max();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float crop_prob_;
  ::google::protobuf::uint32 shift_x_;
  ::google::protobuf::uint32 shift_y_;
  float scale_prob_;
  float scale_min_;
  float scale_max_;
  float flip_prob_;
  float rotation_prob_;
  float max_rotate_degree_;
  float hue_rotation_prob_;
  float hue_rotation_;
  float desaturation_prob_;
  float desaturation_max_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static DetectNetAugmentationParameter* default_instance_;
};
// -------------------------------------------------------------------

class LossParameter : public ::google::protobuf::Message {
 public:
  LossParameter();
  virtual ~LossParameter();

  LossParameter(const LossParameter& from);

  inline LossParameter& operator=(const LossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LossParameter& default_instance();

  void Swap(LossParameter* other);

  // implements Message ----------------------------------------------

  LossParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LossParameter& from);
  void MergeFrom(const LossParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LossParameter_NormalizationMode NormalizationMode;
  static const NormalizationMode FULL = LossParameter_NormalizationMode_FULL;
  static const NormalizationMode VALID = LossParameter_NormalizationMode_VALID;
  static const NormalizationMode BATCH_SIZE = LossParameter_NormalizationMode_BATCH_SIZE;
  static const NormalizationMode NONE = LossParameter_NormalizationMode_NONE;
  static inline bool NormalizationMode_IsValid(int value) {
    return LossParameter_NormalizationMode_IsValid(value);
  }
  static const NormalizationMode NormalizationMode_MIN =
    LossParameter_NormalizationMode_NormalizationMode_MIN;
  static const NormalizationMode NormalizationMode_MAX =
    LossParameter_NormalizationMode_NormalizationMode_MAX;
  static const int NormalizationMode_ARRAYSIZE =
    LossParameter_NormalizationMode_NormalizationMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NormalizationMode_descriptor() {
    return LossParameter_NormalizationMode_descriptor();
  }
  static inline const ::std::string& NormalizationMode_Name(NormalizationMode value) {
    return LossParameter_NormalizationMode_Name(value);
  }
  static inline bool NormalizationMode_Parse(const ::std::string& name,
      NormalizationMode* value) {
    return LossParameter_NormalizationMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 ignore_label = 1;
  inline bool has_ignore_label() const;
  inline void clear_ignore_label();
  static const int kIgnoreLabelFieldNumber = 1;
  inline ::google::protobuf::int32 ignore_label() const;
  inline void set_ignore_label(::google::protobuf::int32 value);

  // optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
  inline bool has_normalization() const;
  inline void clear_normalization();
  static const int kNormalizationFieldNumber = 3;
  inline ::caffe::LossParameter_NormalizationMode normalization() const;
  inline void set_normalization(::caffe::LossParameter_NormalizationMode value);

  // optional bool normalize = 2;
  inline bool has_normalize() const;
  inline void clear_normalize();
  static const int kNormalizeFieldNumber = 2;
  inline bool normalize() const;
  inline void set_normalize(bool value);

  // @@protoc_insertion_point(class_scope:caffe.LossParameter)
 private:
  inline void set_has_ignore_label();
  inline void clear_has_ignore_label();
  inline void set_has_normalization();
  inline void clear_has_normalization();
  inline void set_has_normalize();
  inline void clear_has_normalize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 ignore_label_;
  int normalization_;
  bool normalize_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static LossParameter* default_instance_;
};
// -------------------------------------------------------------------

class AccuracyParameter : public ::google::protobuf::Message {
 public:
  AccuracyParameter();
  virtual ~AccuracyParameter();

  AccuracyParameter(const AccuracyParameter& from);

  inline AccuracyParameter& operator=(const AccuracyParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccuracyParameter& default_instance();

  void Swap(AccuracyParameter* other);

  // implements Message ----------------------------------------------

  AccuracyParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccuracyParameter& from);
  void MergeFrom(const AccuracyParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 top_k = 1 [default = 1];
  inline bool has_top_k() const;
  inline void clear_top_k();
  static const int kTopKFieldNumber = 1;
  inline ::google::protobuf::uint32 top_k() const;
  inline void set_top_k(::google::protobuf::uint32 value);

  // optional int32 axis = 2 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 2;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional int32 ignore_label = 3;
  inline bool has_ignore_label() const;
  inline void clear_ignore_label();
  static const int kIgnoreLabelFieldNumber = 3;
  inline ::google::protobuf::int32 ignore_label() const;
  inline void set_ignore_label(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.AccuracyParameter)
 private:
  inline void set_has_top_k();
  inline void clear_has_top_k();
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_ignore_label();
  inline void clear_has_ignore_label();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 top_k_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 ignore_label_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static AccuracyParameter* default_instance_;
};
// -------------------------------------------------------------------

class AnnotatedDataParameter : public ::google::protobuf::Message {
 public:
  AnnotatedDataParameter();
  virtual ~AnnotatedDataParameter();

  AnnotatedDataParameter(const AnnotatedDataParameter& from);

  inline AnnotatedDataParameter& operator=(const AnnotatedDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnnotatedDataParameter& default_instance();

  void Swap(AnnotatedDataParameter* other);

  // implements Message ----------------------------------------------

  AnnotatedDataParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnnotatedDataParameter& from);
  void MergeFrom(const AnnotatedDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.BatchSampler batch_sampler = 1;
  inline int batch_sampler_size() const;
  inline void clear_batch_sampler();
  static const int kBatchSamplerFieldNumber = 1;
  inline const ::caffe::BatchSampler& batch_sampler(int index) const;
  inline ::caffe::BatchSampler* mutable_batch_sampler(int index);
  inline ::caffe::BatchSampler* add_batch_sampler();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::BatchSampler >&
      batch_sampler() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::BatchSampler >*
      mutable_batch_sampler();

  // optional string label_map_file = 2;
  inline bool has_label_map_file() const;
  inline void clear_label_map_file();
  static const int kLabelMapFileFieldNumber = 2;
  inline const ::std::string& label_map_file() const;
  inline void set_label_map_file(const ::std::string& value);
  inline void set_label_map_file(const char* value);
  inline void set_label_map_file(const char* value, size_t size);
  inline ::std::string* mutable_label_map_file();
  inline ::std::string* release_label_map_file();
  inline void set_allocated_label_map_file(::std::string* label_map_file);

  // optional .caffe.AnnotatedDatum.AnnotationType anno_type = 3;
  inline bool has_anno_type() const;
  inline void clear_anno_type();
  static const int kAnnoTypeFieldNumber = 3;
  inline ::caffe::AnnotatedDatum_AnnotationType anno_type() const;
  inline void set_anno_type(::caffe::AnnotatedDatum_AnnotationType value);

  // @@protoc_insertion_point(class_scope:caffe.AnnotatedDataParameter)
 private:
  inline void set_has_label_map_file();
  inline void clear_has_label_map_file();
  inline void set_has_anno_type();
  inline void clear_has_anno_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BatchSampler > batch_sampler_;
  ::std::string* label_map_file_;
  int anno_type_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static AnnotatedDataParameter* default_instance_;
};
// -------------------------------------------------------------------

class ArgMaxParameter : public ::google::protobuf::Message {
 public:
  ArgMaxParameter();
  virtual ~ArgMaxParameter();

  ArgMaxParameter(const ArgMaxParameter& from);

  inline ArgMaxParameter& operator=(const ArgMaxParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArgMaxParameter& default_instance();

  void Swap(ArgMaxParameter* other);

  // implements Message ----------------------------------------------

  ArgMaxParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArgMaxParameter& from);
  void MergeFrom(const ArgMaxParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool out_max_val = 1 [default = false];
  inline bool has_out_max_val() const;
  inline void clear_out_max_val();
  static const int kOutMaxValFieldNumber = 1;
  inline bool out_max_val() const;
  inline void set_out_max_val(bool value);

  // optional uint32 top_k = 2 [default = 1];
  inline bool has_top_k() const;
  inline void clear_top_k();
  static const int kTopKFieldNumber = 2;
  inline ::google::protobuf::uint32 top_k() const;
  inline void set_top_k(::google::protobuf::uint32 value);

  // optional int32 axis = 3;
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 3;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.ArgMaxParameter)
 private:
  inline void set_has_out_max_val();
  inline void clear_has_out_max_val();
  inline void set_has_top_k();
  inline void clear_has_top_k();
  inline void set_has_axis();
  inline void clear_has_axis();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool out_max_val_;
  ::google::protobuf::uint32 top_k_;
  ::google::protobuf::int32 axis_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static ArgMaxParameter* default_instance_;
};
// -------------------------------------------------------------------

class ConcatParameter : public ::google::protobuf::Message {
 public:
  ConcatParameter();
  virtual ~ConcatParameter();

  ConcatParameter(const ConcatParameter& from);

  inline ConcatParameter& operator=(const ConcatParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConcatParameter& default_instance();

  void Swap(ConcatParameter* other);

  // implements Message ----------------------------------------------

  ConcatParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConcatParameter& from);
  void MergeFrom(const ConcatParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 2 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 2;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional uint32 concat_dim = 1 [default = 1];
  inline bool has_concat_dim() const;
  inline void clear_concat_dim();
  static const int kConcatDimFieldNumber = 1;
  inline ::google::protobuf::uint32 concat_dim() const;
  inline void set_concat_dim(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.ConcatParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_concat_dim();
  inline void clear_has_concat_dim();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::uint32 concat_dim_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static ConcatParameter* default_instance_;
};
// -------------------------------------------------------------------

class BatchNormParameter : public ::google::protobuf::Message {
 public:
  BatchNormParameter();
  virtual ~BatchNormParameter();

  BatchNormParameter(const BatchNormParameter& from);

  inline BatchNormParameter& operator=(const BatchNormParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchNormParameter& default_instance();

  void Swap(BatchNormParameter* other);

  // implements Message ----------------------------------------------

  BatchNormParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BatchNormParameter& from);
  void MergeFrom(const BatchNormParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BatchNormParameter_Engine Engine;
  static const Engine DEFAULT = BatchNormParameter_Engine_DEFAULT;
  static const Engine CAFFE = BatchNormParameter_Engine_CAFFE;
  static const Engine CUDNN = BatchNormParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return BatchNormParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    BatchNormParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    BatchNormParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    BatchNormParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return BatchNormParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return BatchNormParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return BatchNormParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool use_global_stats = 1 [default = false];
  inline bool has_use_global_stats() const;
  inline void clear_use_global_stats();
  static const int kUseGlobalStatsFieldNumber = 1;
  inline bool use_global_stats() const;
  inline void set_use_global_stats(bool value);

  // optional float moving_average_fraction = 2 [default = 0.999];
  inline bool has_moving_average_fraction() const;
  inline void clear_moving_average_fraction();
  static const int kMovingAverageFractionFieldNumber = 2;
  inline float moving_average_fraction() const;
  inline void set_moving_average_fraction(float value);

  // optional float eps = 3 [default = 0.0001];
  inline bool has_eps() const;
  inline void clear_eps();
  static const int kEpsFieldNumber = 3;
  inline float eps() const;
  inline void set_eps(float value);

  // optional .caffe.FillerParameter scale_filler = 5;
  inline bool has_scale_filler() const;
  inline void clear_scale_filler();
  static const int kScaleFillerFieldNumber = 5;
  inline const ::caffe::FillerParameter& scale_filler() const;
  inline ::caffe::FillerParameter* mutable_scale_filler();
  inline ::caffe::FillerParameter* release_scale_filler();
  inline void set_allocated_scale_filler(::caffe::FillerParameter* scale_filler);

  // optional .caffe.FillerParameter bias_filler = 6;
  inline bool has_bias_filler() const;
  inline void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 6;
  inline const ::caffe::FillerParameter& bias_filler() const;
  inline ::caffe::FillerParameter* mutable_bias_filler();
  inline ::caffe::FillerParameter* release_bias_filler();
  inline void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional bool scale_bias = 7 [default = false];
  inline bool has_scale_bias() const;
  inline void clear_scale_bias();
  static const int kScaleBiasFieldNumber = 7;
  inline bool scale_bias() const;
  inline void set_scale_bias(bool value);

  // optional .caffe.BatchNormParameter.Engine engine = 15 [default = DEFAULT];
  inline bool has_engine() const;
  inline void clear_engine();
  static const int kEngineFieldNumber = 15;
  inline ::caffe::BatchNormParameter_Engine engine() const;
  inline void set_engine(::caffe::BatchNormParameter_Engine value);

  // @@protoc_insertion_point(class_scope:caffe.BatchNormParameter)
 private:
  inline void set_has_use_global_stats();
  inline void clear_has_use_global_stats();
  inline void set_has_moving_average_fraction();
  inline void clear_has_moving_average_fraction();
  inline void set_has_eps();
  inline void clear_has_eps();
  inline void set_has_scale_filler();
  inline void clear_has_scale_filler();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();
  inline void set_has_scale_bias();
  inline void clear_has_scale_bias();
  inline void set_has_engine();
  inline void clear_has_engine();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float moving_average_fraction_;
  float eps_;
  ::caffe::FillerParameter* scale_filler_;
  bool use_global_stats_;
  bool scale_bias_;
  int engine_;
  ::caffe::FillerParameter* bias_filler_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static BatchNormParameter* default_instance_;
};
// -------------------------------------------------------------------

class BiasParameter : public ::google::protobuf::Message {
 public:
  BiasParameter();
  virtual ~BiasParameter();

  BiasParameter(const BiasParameter& from);

  inline BiasParameter& operator=(const BiasParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BiasParameter& default_instance();

  void Swap(BiasParameter* other);

  // implements Message ----------------------------------------------

  BiasParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BiasParameter& from);
  void MergeFrom(const BiasParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 1 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 1;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional int32 num_axes = 2 [default = 1];
  inline bool has_num_axes() const;
  inline void clear_num_axes();
  static const int kNumAxesFieldNumber = 2;
  inline ::google::protobuf::int32 num_axes() const;
  inline void set_num_axes(::google::protobuf::int32 value);

  // optional .caffe.FillerParameter filler = 3;
  inline bool has_filler() const;
  inline void clear_filler();
  static const int kFillerFieldNumber = 3;
  inline const ::caffe::FillerParameter& filler() const;
  inline ::caffe::FillerParameter* mutable_filler();
  inline ::caffe::FillerParameter* release_filler();
  inline void set_allocated_filler(::caffe::FillerParameter* filler);

  // @@protoc_insertion_point(class_scope:caffe.BiasParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_num_axes();
  inline void clear_has_num_axes();
  inline void set_has_filler();
  inline void clear_has_filler();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 num_axes_;
  ::caffe::FillerParameter* filler_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static BiasParameter* default_instance_;
};
// -------------------------------------------------------------------

class ContrastiveLossParameter : public ::google::protobuf::Message {
 public:
  ContrastiveLossParameter();
  virtual ~ContrastiveLossParameter();

  ContrastiveLossParameter(const ContrastiveLossParameter& from);

  inline ContrastiveLossParameter& operator=(const ContrastiveLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContrastiveLossParameter& default_instance();

  void Swap(ContrastiveLossParameter* other);

  // implements Message ----------------------------------------------

  ContrastiveLossParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContrastiveLossParameter& from);
  void MergeFrom(const ContrastiveLossParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float margin = 1 [default = 1];
  inline bool has_margin() const;
  inline void clear_margin();
  static const int kMarginFieldNumber = 1;
  inline float margin() const;
  inline void set_margin(float value);

  // optional bool legacy_version = 2 [default = false];
  inline bool has_legacy_version() const;
  inline void clear_legacy_version();
  static const int kLegacyVersionFieldNumber = 2;
  inline bool legacy_version() const;
  inline void set_legacy_version(bool value);

  // @@protoc_insertion_point(class_scope:caffe.ContrastiveLossParameter)
 private:
  inline void set_has_margin();
  inline void clear_has_margin();
  inline void set_has_legacy_version();
  inline void clear_has_legacy_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float margin_;
  bool legacy_version_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static ContrastiveLossParameter* default_instance_;
};
// -------------------------------------------------------------------

class ConvolutionParameter : public ::google::protobuf::Message {
 public:
  ConvolutionParameter();
  virtual ~ConvolutionParameter();

  ConvolutionParameter(const ConvolutionParameter& from);

  inline ConvolutionParameter& operator=(const ConvolutionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConvolutionParameter& default_instance();

  void Swap(ConvolutionParameter* other);

  // implements Message ----------------------------------------------

  ConvolutionParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConvolutionParameter& from);
  void MergeFrom(const ConvolutionParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ConvolutionParameter_Engine Engine;
  static const Engine DEFAULT = ConvolutionParameter_Engine_DEFAULT;
  static const Engine CAFFE = ConvolutionParameter_Engine_CAFFE;
  static const Engine CUDNN = ConvolutionParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return ConvolutionParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    ConvolutionParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    ConvolutionParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    ConvolutionParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return ConvolutionParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return ConvolutionParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return ConvolutionParameter_Engine_Parse(name, value);
  }

  typedef ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker CuDNNConvolutionAlgorithmSeeker;
  static const CuDNNConvolutionAlgorithmSeeker GET = ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_GET;
  static const CuDNNConvolutionAlgorithmSeeker FINDEX = ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_FINDEX;
  static inline bool CuDNNConvolutionAlgorithmSeeker_IsValid(int value) {
    return ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_IsValid(value);
  }
  static const CuDNNConvolutionAlgorithmSeeker CuDNNConvolutionAlgorithmSeeker_MIN =
    ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_CuDNNConvolutionAlgorithmSeeker_MIN;
  static const CuDNNConvolutionAlgorithmSeeker CuDNNConvolutionAlgorithmSeeker_MAX =
    ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_CuDNNConvolutionAlgorithmSeeker_MAX;
  static const int CuDNNConvolutionAlgorithmSeeker_ARRAYSIZE =
    ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_CuDNNConvolutionAlgorithmSeeker_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CuDNNConvolutionAlgorithmSeeker_descriptor() {
    return ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_descriptor();
  }
  static inline const ::std::string& CuDNNConvolutionAlgorithmSeeker_Name(CuDNNConvolutionAlgorithmSeeker value) {
    return ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_Name(value);
  }
  static inline bool CuDNNConvolutionAlgorithmSeeker_Parse(const ::std::string& name,
      CuDNNConvolutionAlgorithmSeeker* value) {
    return ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 num_output = 1;
  inline bool has_num_output() const;
  inline void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  inline ::google::protobuf::uint32 num_output() const;
  inline void set_num_output(::google::protobuf::uint32 value);

  // optional bool bias_term = 2 [default = true];
  inline bool has_bias_term() const;
  inline void clear_bias_term();
  static const int kBiasTermFieldNumber = 2;
  inline bool bias_term() const;
  inline void set_bias_term(bool value);

  // repeated uint32 pad = 3;
  inline int pad_size() const;
  inline void clear_pad();
  static const int kPadFieldNumber = 3;
  inline ::google::protobuf::uint32 pad(int index) const;
  inline void set_pad(int index, ::google::protobuf::uint32 value);
  inline void add_pad(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      pad() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_pad();

  // repeated uint32 kernel_size = 4;
  inline int kernel_size_size() const;
  inline void clear_kernel_size();
  static const int kKernelSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 kernel_size(int index) const;
  inline void set_kernel_size(int index, ::google::protobuf::uint32 value);
  inline void add_kernel_size(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      kernel_size() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_kernel_size();

  // repeated uint32 stride = 6;
  inline int stride_size() const;
  inline void clear_stride();
  static const int kStrideFieldNumber = 6;
  inline ::google::protobuf::uint32 stride(int index) const;
  inline void set_stride(int index, ::google::protobuf::uint32 value);
  inline void add_stride(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      stride() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_stride();

  // repeated uint32 dilation = 18;
  inline int dilation_size() const;
  inline void clear_dilation();
  static const int kDilationFieldNumber = 18;
  inline ::google::protobuf::uint32 dilation(int index) const;
  inline void set_dilation(int index, ::google::protobuf::uint32 value);
  inline void add_dilation(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      dilation() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_dilation();

  // optional uint32 pad_h = 9 [default = 0];
  inline bool has_pad_h() const;
  inline void clear_pad_h();
  static const int kPadHFieldNumber = 9;
  inline ::google::protobuf::uint32 pad_h() const;
  inline void set_pad_h(::google::protobuf::uint32 value);

  // optional uint32 pad_w = 10 [default = 0];
  inline bool has_pad_w() const;
  inline void clear_pad_w();
  static const int kPadWFieldNumber = 10;
  inline ::google::protobuf::uint32 pad_w() const;
  inline void set_pad_w(::google::protobuf::uint32 value);

  // optional uint32 kernel_h = 11;
  inline bool has_kernel_h() const;
  inline void clear_kernel_h();
  static const int kKernelHFieldNumber = 11;
  inline ::google::protobuf::uint32 kernel_h() const;
  inline void set_kernel_h(::google::protobuf::uint32 value);

  // optional uint32 kernel_w = 12;
  inline bool has_kernel_w() const;
  inline void clear_kernel_w();
  static const int kKernelWFieldNumber = 12;
  inline ::google::protobuf::uint32 kernel_w() const;
  inline void set_kernel_w(::google::protobuf::uint32 value);

  // optional uint32 stride_h = 13;
  inline bool has_stride_h() const;
  inline void clear_stride_h();
  static const int kStrideHFieldNumber = 13;
  inline ::google::protobuf::uint32 stride_h() const;
  inline void set_stride_h(::google::protobuf::uint32 value);

  // optional uint32 stride_w = 14;
  inline bool has_stride_w() const;
  inline void clear_stride_w();
  static const int kStrideWFieldNumber = 14;
  inline ::google::protobuf::uint32 stride_w() const;
  inline void set_stride_w(::google::protobuf::uint32 value);

  // optional uint32 group = 5 [default = 1];
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 5;
  inline ::google::protobuf::uint32 group() const;
  inline void set_group(::google::protobuf::uint32 value);

  // optional .caffe.FillerParameter weight_filler = 7;
  inline bool has_weight_filler() const;
  inline void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 7;
  inline const ::caffe::FillerParameter& weight_filler() const;
  inline ::caffe::FillerParameter* mutable_weight_filler();
  inline ::caffe::FillerParameter* release_weight_filler();
  inline void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 8;
  inline bool has_bias_filler() const;
  inline void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 8;
  inline const ::caffe::FillerParameter& bias_filler() const;
  inline ::caffe::FillerParameter* mutable_bias_filler();
  inline ::caffe::FillerParameter* release_bias_filler();
  inline void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
  inline bool has_engine() const;
  inline void clear_engine();
  static const int kEngineFieldNumber = 15;
  inline ::caffe::ConvolutionParameter_Engine engine() const;
  inline void set_engine(::caffe::ConvolutionParameter_Engine value);

  // optional int32 axis = 16 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 16;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional bool force_nd_im2col = 17 [default = false];
  inline bool has_force_nd_im2col() const;
  inline void clear_force_nd_im2col();
  static const int kForceNdIm2ColFieldNumber = 17;
  inline bool force_nd_im2col() const;
  inline void set_force_nd_im2col(bool value);

  // optional .caffe.ConvolutionParameter.CuDNNConvolutionAlgorithmSeeker cudnn_convolution_algo_seeker = 19 [default = FINDEX];
  inline bool has_cudnn_convolution_algo_seeker() const;
  inline void clear_cudnn_convolution_algo_seeker();
  static const int kCudnnConvolutionAlgoSeekerFieldNumber = 19;
  inline ::caffe::ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker cudnn_convolution_algo_seeker() const;
  inline void set_cudnn_convolution_algo_seeker(::caffe::ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker value);

  // optional string conv_algos_override = 20 [default = "-1,-1,-1"];
  inline bool has_conv_algos_override() const;
  inline void clear_conv_algos_override();
  static const int kConvAlgosOverrideFieldNumber = 20;
  inline const ::std::string& conv_algos_override() const;
  inline void set_conv_algos_override(const ::std::string& value);
  inline void set_conv_algos_override(const char* value);
  inline void set_conv_algos_override(const char* value, size_t size);
  inline ::std::string* mutable_conv_algos_override();
  inline ::std::string* release_conv_algos_override();
  inline void set_allocated_conv_algos_override(::std::string* conv_algos_override);

  // @@protoc_insertion_point(class_scope:caffe.ConvolutionParameter)
 private:
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_bias_term();
  inline void clear_has_bias_term();
  inline void set_has_pad_h();
  inline void clear_has_pad_h();
  inline void set_has_pad_w();
  inline void clear_has_pad_w();
  inline void set_has_kernel_h();
  inline void clear_has_kernel_h();
  inline void set_has_kernel_w();
  inline void clear_has_kernel_w();
  inline void set_has_stride_h();
  inline void clear_has_stride_h();
  inline void set_has_stride_w();
  inline void clear_has_stride_w();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_weight_filler();
  inline void clear_has_weight_filler();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();
  inline void set_has_engine();
  inline void clear_has_engine();
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_force_nd_im2col();
  inline void clear_has_force_nd_im2col();
  inline void set_has_cudnn_convolution_algo_seeker();
  inline void clear_has_cudnn_convolution_algo_seeker();
  inline void set_has_conv_algos_override();
  inline void clear_has_conv_algos_override();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pad_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > kernel_size_;
  ::google::protobuf::uint32 num_output_;
  ::google::protobuf::uint32 pad_h_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > stride_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > dilation_;
  ::google::protobuf::uint32 pad_w_;
  ::google::protobuf::uint32 kernel_h_;
  ::google::protobuf::uint32 kernel_w_;
  bool bias_term_;
  bool force_nd_im2col_;
  ::google::protobuf::uint32 stride_h_;
  ::google::protobuf::uint32 stride_w_;
  ::caffe::FillerParameter* weight_filler_;
  ::google::protobuf::uint32 group_;
  int engine_;
  ::caffe::FillerParameter* bias_filler_;
  ::google::protobuf::int32 axis_;
  int cudnn_convolution_algo_seeker_;
  static ::std::string* _default_conv_algos_override_;
  ::std::string* conv_algos_override_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static ConvolutionParameter* default_instance_;
};
// -------------------------------------------------------------------

class CropParameter : public ::google::protobuf::Message {
 public:
  CropParameter();
  virtual ~CropParameter();

  CropParameter(const CropParameter& from);

  inline CropParameter& operator=(const CropParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CropParameter& default_instance();

  void Swap(CropParameter* other);

  // implements Message ----------------------------------------------

  CropParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CropParameter& from);
  void MergeFrom(const CropParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 1 [default = 2];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 1;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // repeated uint32 offset = 2;
  inline int offset_size() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  inline ::google::protobuf::uint32 offset(int index) const;
  inline void set_offset(int index, ::google::protobuf::uint32 value);
  inline void add_offset(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      offset() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_offset();

  // @@protoc_insertion_point(class_scope:caffe.CropParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > offset_;
  ::google::protobuf::int32 axis_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static CropParameter* default_instance_;
};
// -------------------------------------------------------------------

class DataParameter : public ::google::protobuf::Message {
 public:
  DataParameter();
  virtual ~DataParameter();

  DataParameter(const DataParameter& from);

  inline DataParameter& operator=(const DataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataParameter& default_instance();

  void Swap(DataParameter* other);

  // implements Message ----------------------------------------------

  DataParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataParameter& from);
  void MergeFrom(const DataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DataParameter_DB DB;
  static const DB LEVELDB = DataParameter_DB_LEVELDB;
  static const DB LMDB = DataParameter_DB_LMDB;
  static inline bool DB_IsValid(int value) {
    return DataParameter_DB_IsValid(value);
  }
  static const DB DB_MIN =
    DataParameter_DB_DB_MIN;
  static const DB DB_MAX =
    DataParameter_DB_DB_MAX;
  static const int DB_ARRAYSIZE =
    DataParameter_DB_DB_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DB_descriptor() {
    return DataParameter_DB_descriptor();
  }
  static inline const ::std::string& DB_Name(DB value) {
    return DataParameter_DB_Name(value);
  }
  static inline bool DB_Parse(const ::std::string& name,
      DB* value) {
    return DataParameter_DB_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string source = 1;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 1;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // optional uint32 batch_size = 4;
  inline bool has_batch_size() const;
  inline void clear_batch_size();
  static const int kBatchSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 batch_size() const;
  inline void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 rand_skip = 7 [default = 0];
  inline bool has_rand_skip() const;
  inline void clear_rand_skip();
  static const int kRandSkipFieldNumber = 7;
  inline ::google::protobuf::uint32 rand_skip() const;
  inline void set_rand_skip(::google::protobuf::uint32 value);

  // optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
  inline bool has_backend() const;
  inline void clear_backend();
  static const int kBackendFieldNumber = 8;
  inline ::caffe::DataParameter_DB backend() const;
  inline void set_backend(::caffe::DataParameter_DB value);

  // optional float scale = 2 [default = 1];
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 2;
  inline float scale() const;
  inline void set_scale(float value);

  // optional string mean_file = 3;
  inline bool has_mean_file() const;
  inline void clear_mean_file();
  static const int kMeanFileFieldNumber = 3;
  inline const ::std::string& mean_file() const;
  inline void set_mean_file(const ::std::string& value);
  inline void set_mean_file(const char* value);
  inline void set_mean_file(const char* value, size_t size);
  inline ::std::string* mutable_mean_file();
  inline ::std::string* release_mean_file();
  inline void set_allocated_mean_file(::std::string* mean_file);

  // optional uint32 crop_size = 5 [default = 0];
  inline bool has_crop_size() const;
  inline void clear_crop_size();
  static const int kCropSizeFieldNumber = 5;
  inline ::google::protobuf::uint32 crop_size() const;
  inline void set_crop_size(::google::protobuf::uint32 value);

  // optional bool mirror = 6 [default = false];
  inline bool has_mirror() const;
  inline void clear_mirror();
  static const int kMirrorFieldNumber = 6;
  inline bool mirror() const;
  inline void set_mirror(bool value);

  // optional bool force_encoded_color = 9 [default = false];
  inline bool has_force_encoded_color() const;
  inline void clear_force_encoded_color();
  static const int kForceEncodedColorFieldNumber = 9;
  inline bool force_encoded_color() const;
  inline void set_force_encoded_color(bool value);

  // optional uint32 prefetch = 10 [default = 0];
  inline bool has_prefetch() const;
  inline void clear_prefetch();
  static const int kPrefetchFieldNumber = 10;
  inline ::google::protobuf::uint32 prefetch() const;
  inline void set_prefetch(::google::protobuf::uint32 value);

  // optional uint32 threads = 11 [default = 0];
  inline bool has_threads() const;
  inline void clear_threads();
  static const int kThreadsFieldNumber = 11;
  inline ::google::protobuf::uint32 threads() const;
  inline void set_threads(::google::protobuf::uint32 value);

  // optional uint32 parser_threads = 12 [default = 0];
  inline bool has_parser_threads() const;
  inline void clear_parser_threads();
  static const int kParserThreadsFieldNumber = 12;
  inline ::google::protobuf::uint32 parser_threads() const;
  inline void set_parser_threads(::google::protobuf::uint32 value);

  // optional bool cache = 13 [default = false];
  inline bool has_cache() const;
  inline void clear_cache();
  static const int kCacheFieldNumber = 13;
  inline bool cache() const;
  inline void set_cache(bool value);

  // optional bool shuffle = 14 [default = false];
  inline bool has_shuffle() const;
  inline void clear_shuffle();
  static const int kShuffleFieldNumber = 14;
  inline bool shuffle() const;
  inline void set_shuffle(bool value);

  // @@protoc_insertion_point(class_scope:caffe.DataParameter)
 private:
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_rand_skip();
  inline void clear_has_rand_skip();
  inline void set_has_backend();
  inline void clear_has_backend();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_mean_file();
  inline void clear_has_mean_file();
  inline void set_has_crop_size();
  inline void clear_has_crop_size();
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_force_encoded_color();
  inline void clear_has_force_encoded_color();
  inline void set_has_prefetch();
  inline void clear_has_prefetch();
  inline void set_has_threads();
  inline void clear_has_threads();
  inline void set_has_parser_threads();
  inline void clear_has_parser_threads();
  inline void set_has_cache();
  inline void clear_has_cache();
  inline void set_has_shuffle();
  inline void clear_has_shuffle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* source_;
  ::google::protobuf::uint32 batch_size_;
  ::google::protobuf::uint32 rand_skip_;
  int backend_;
  float scale_;
  ::std::string* mean_file_;
  ::google::protobuf::uint32 crop_size_;
  ::google::protobuf::uint32 prefetch_;
  ::google::protobuf::uint32 threads_;
  bool mirror_;
  bool force_encoded_color_;
  bool cache_;
  bool shuffle_;
  ::google::protobuf::uint32 parser_threads_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static DataParameter* default_instance_;
};
// -------------------------------------------------------------------

class DropoutParameter : public ::google::protobuf::Message {
 public:
  DropoutParameter();
  virtual ~DropoutParameter();

  DropoutParameter(const DropoutParameter& from);

  inline DropoutParameter& operator=(const DropoutParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DropoutParameter& default_instance();

  void Swap(DropoutParameter* other);

  // implements Message ----------------------------------------------

  DropoutParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DropoutParameter& from);
  void MergeFrom(const DropoutParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DropoutParameter_Engine Engine;
  static const Engine DEFAULT = DropoutParameter_Engine_DEFAULT;
  static const Engine CAFFE = DropoutParameter_Engine_CAFFE;
  static const Engine CUDNN = DropoutParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return DropoutParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    DropoutParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    DropoutParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    DropoutParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return DropoutParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return DropoutParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return DropoutParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional float dropout_ratio = 1 [default = 0.5];
  inline bool has_dropout_ratio() const;
  inline void clear_dropout_ratio();
  static const int kDropoutRatioFieldNumber = 1;
  inline float dropout_ratio() const;
  inline void set_dropout_ratio(float value);

  // optional .caffe.DropoutParameter.Engine engine = 2 [default = DEFAULT];
  inline bool has_engine() const;
  inline void clear_engine();
  static const int kEngineFieldNumber = 2;
  inline ::caffe::DropoutParameter_Engine engine() const;
  inline void set_engine(::caffe::DropoutParameter_Engine value);

  // optional int64 random_seed = 3 [default = -1];
  inline bool has_random_seed() const;
  inline void clear_random_seed();
  static const int kRandomSeedFieldNumber = 3;
  inline ::google::protobuf::int64 random_seed() const;
  inline void set_random_seed(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:caffe.DropoutParameter)
 private:
  inline void set_has_dropout_ratio();
  inline void clear_has_dropout_ratio();
  inline void set_has_engine();
  inline void clear_has_engine();
  inline void set_has_random_seed();
  inline void clear_has_random_seed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float dropout_ratio_;
  int engine_;
  ::google::protobuf::int64 random_seed_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static DropoutParameter* default_instance_;
};
// -------------------------------------------------------------------

class DummyDataParameter : public ::google::protobuf::Message {
 public:
  DummyDataParameter();
  virtual ~DummyDataParameter();

  DummyDataParameter(const DummyDataParameter& from);

  inline DummyDataParameter& operator=(const DummyDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DummyDataParameter& default_instance();

  void Swap(DummyDataParameter* other);

  // implements Message ----------------------------------------------

  DummyDataParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DummyDataParameter& from);
  void MergeFrom(const DummyDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.FillerParameter data_filler = 1;
  inline int data_filler_size() const;
  inline void clear_data_filler();
  static const int kDataFillerFieldNumber = 1;
  inline const ::caffe::FillerParameter& data_filler(int index) const;
  inline ::caffe::FillerParameter* mutable_data_filler(int index);
  inline ::caffe::FillerParameter* add_data_filler();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter >&
      data_filler() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter >*
      mutable_data_filler();

  // repeated .caffe.BlobShape shape = 6;
  inline int shape_size() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 6;
  inline const ::caffe::BlobShape& shape(int index) const;
  inline ::caffe::BlobShape* mutable_shape(int index);
  inline ::caffe::BlobShape* add_shape();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
      shape() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
      mutable_shape();

  // repeated uint32 num = 2;
  inline int num_size() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num(int index) const;
  inline void set_num(int index, ::google::protobuf::uint32 value);
  inline void add_num(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      num() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_num();

  // repeated uint32 channels = 3;
  inline int channels_size() const;
  inline void clear_channels();
  static const int kChannelsFieldNumber = 3;
  inline ::google::protobuf::uint32 channels(int index) const;
  inline void set_channels(int index, ::google::protobuf::uint32 value);
  inline void add_channels(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      channels() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_channels();

  // repeated uint32 height = 4;
  inline int height_size() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 4;
  inline ::google::protobuf::uint32 height(int index) const;
  inline void set_height(int index, ::google::protobuf::uint32 value);
  inline void add_height(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      height() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_height();

  // repeated uint32 width = 5;
  inline int width_size() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 5;
  inline ::google::protobuf::uint32 width(int index) const;
  inline void set_width(int index, ::google::protobuf::uint32 value);
  inline void add_width(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      width() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_width();

  // @@protoc_insertion_point(class_scope:caffe.DummyDataParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter > data_filler_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape > shape_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > num_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > channels_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > height_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > width_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static DummyDataParameter* default_instance_;
};
// -------------------------------------------------------------------

class EltwiseParameter : public ::google::protobuf::Message {
 public:
  EltwiseParameter();
  virtual ~EltwiseParameter();

  EltwiseParameter(const EltwiseParameter& from);

  inline EltwiseParameter& operator=(const EltwiseParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EltwiseParameter& default_instance();

  void Swap(EltwiseParameter* other);

  // implements Message ----------------------------------------------

  EltwiseParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EltwiseParameter& from);
  void MergeFrom(const EltwiseParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef EltwiseParameter_EltwiseOp EltwiseOp;
  static const EltwiseOp PROD = EltwiseParameter_EltwiseOp_PROD;
  static const EltwiseOp SUM = EltwiseParameter_EltwiseOp_SUM;
  static const EltwiseOp MAX = EltwiseParameter_EltwiseOp_MAX;
  static inline bool EltwiseOp_IsValid(int value) {
    return EltwiseParameter_EltwiseOp_IsValid(value);
  }
  static const EltwiseOp EltwiseOp_MIN =
    EltwiseParameter_EltwiseOp_EltwiseOp_MIN;
  static const EltwiseOp EltwiseOp_MAX =
    EltwiseParameter_EltwiseOp_EltwiseOp_MAX;
  static const int EltwiseOp_ARRAYSIZE =
    EltwiseParameter_EltwiseOp_EltwiseOp_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EltwiseOp_descriptor() {
    return EltwiseParameter_EltwiseOp_descriptor();
  }
  static inline const ::std::string& EltwiseOp_Name(EltwiseOp value) {
    return EltwiseParameter_EltwiseOp_Name(value);
  }
  static inline bool EltwiseOp_Parse(const ::std::string& name,
      EltwiseOp* value) {
    return EltwiseParameter_EltwiseOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
  inline bool has_operation() const;
  inline void clear_operation();
  static const int kOperationFieldNumber = 1;
  inline ::caffe::EltwiseParameter_EltwiseOp operation() const;
  inline void set_operation(::caffe::EltwiseParameter_EltwiseOp value);

  // repeated float coeff = 2;
  inline int coeff_size() const;
  inline void clear_coeff();
  static const int kCoeffFieldNumber = 2;
  inline float coeff(int index) const;
  inline void set_coeff(int index, float value);
  inline void add_coeff(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      coeff() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_coeff();

  // optional bool stable_prod_grad = 3 [default = true];
  inline bool has_stable_prod_grad() const;
  inline void clear_stable_prod_grad();
  static const int kStableProdGradFieldNumber = 3;
  inline bool stable_prod_grad() const;
  inline void set_stable_prod_grad(bool value);

  // @@protoc_insertion_point(class_scope:caffe.EltwiseParameter)
 private:
  inline void set_has_operation();
  inline void clear_has_operation();
  inline void set_has_stable_prod_grad();
  inline void clear_has_stable_prod_grad();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > coeff_;
  int operation_;
  bool stable_prod_grad_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static EltwiseParameter* default_instance_;
};
// -------------------------------------------------------------------

class ELUParameter : public ::google::protobuf::Message {
 public:
  ELUParameter();
  virtual ~ELUParameter();

  ELUParameter(const ELUParameter& from);

  inline ELUParameter& operator=(const ELUParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ELUParameter& default_instance();

  void Swap(ELUParameter* other);

  // implements Message ----------------------------------------------

  ELUParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ELUParameter& from);
  void MergeFrom(const ELUParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float alpha = 1 [default = 1];
  inline bool has_alpha() const;
  inline void clear_alpha();
  static const int kAlphaFieldNumber = 1;
  inline float alpha() const;
  inline void set_alpha(float value);

  // @@protoc_insertion_point(class_scope:caffe.ELUParameter)
 private:
  inline void set_has_alpha();
  inline void clear_has_alpha();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float alpha_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static ELUParameter* default_instance_;
};
// -------------------------------------------------------------------

class EmbedParameter : public ::google::protobuf::Message {
 public:
  EmbedParameter();
  virtual ~EmbedParameter();

  EmbedParameter(const EmbedParameter& from);

  inline EmbedParameter& operator=(const EmbedParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmbedParameter& default_instance();

  void Swap(EmbedParameter* other);

  // implements Message ----------------------------------------------

  EmbedParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmbedParameter& from);
  void MergeFrom(const EmbedParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_output = 1;
  inline bool has_num_output() const;
  inline void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  inline ::google::protobuf::uint32 num_output() const;
  inline void set_num_output(::google::protobuf::uint32 value);

  // optional uint32 input_dim = 2;
  inline bool has_input_dim() const;
  inline void clear_input_dim();
  static const int kInputDimFieldNumber = 2;
  inline ::google::protobuf::uint32 input_dim() const;
  inline void set_input_dim(::google::protobuf::uint32 value);

  // optional bool bias_term = 3 [default = true];
  inline bool has_bias_term() const;
  inline void clear_bias_term();
  static const int kBiasTermFieldNumber = 3;
  inline bool bias_term() const;
  inline void set_bias_term(bool value);

  // optional .caffe.FillerParameter weight_filler = 4;
  inline bool has_weight_filler() const;
  inline void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 4;
  inline const ::caffe::FillerParameter& weight_filler() const;
  inline ::caffe::FillerParameter* mutable_weight_filler();
  inline ::caffe::FillerParameter* release_weight_filler();
  inline void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 5;
  inline bool has_bias_filler() const;
  inline void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 5;
  inline const ::caffe::FillerParameter& bias_filler() const;
  inline ::caffe::FillerParameter* mutable_bias_filler();
  inline ::caffe::FillerParameter* release_bias_filler();
  inline void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // @@protoc_insertion_point(class_scope:caffe.EmbedParameter)
 private:
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_input_dim();
  inline void clear_has_input_dim();
  inline void set_has_bias_term();
  inline void clear_has_bias_term();
  inline void set_has_weight_filler();
  inline void clear_has_weight_filler();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 num_output_;
  ::google::protobuf::uint32 input_dim_;
  ::caffe::FillerParameter* weight_filler_;
  ::caffe::FillerParameter* bias_filler_;
  bool bias_term_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static EmbedParameter* default_instance_;
};
// -------------------------------------------------------------------

class ExpParameter : public ::google::protobuf::Message {
 public:
  ExpParameter();
  virtual ~ExpParameter();

  ExpParameter(const ExpParameter& from);

  inline ExpParameter& operator=(const ExpParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExpParameter& default_instance();

  void Swap(ExpParameter* other);

  // implements Message ----------------------------------------------

  ExpParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExpParameter& from);
  void MergeFrom(const ExpParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float base = 1 [default = -1];
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline float base() const;
  inline void set_base(float value);

  // optional float scale = 2 [default = 1];
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 2;
  inline float scale() const;
  inline void set_scale(float value);

  // optional float shift = 3 [default = 0];
  inline bool has_shift() const;
  inline void clear_shift();
  static const int kShiftFieldNumber = 3;
  inline float shift() const;
  inline void set_shift(float value);

  // @@protoc_insertion_point(class_scope:caffe.ExpParameter)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_shift();
  inline void clear_has_shift();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float base_;
  float scale_;
  float shift_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static ExpParameter* default_instance_;
};
// -------------------------------------------------------------------

class FlattenParameter : public ::google::protobuf::Message {
 public:
  FlattenParameter();
  virtual ~FlattenParameter();

  FlattenParameter(const FlattenParameter& from);

  inline FlattenParameter& operator=(const FlattenParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlattenParameter& default_instance();

  void Swap(FlattenParameter* other);

  // implements Message ----------------------------------------------

  FlattenParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlattenParameter& from);
  void MergeFrom(const FlattenParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 1 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 1;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional int32 end_axis = 2 [default = -1];
  inline bool has_end_axis() const;
  inline void clear_end_axis();
  static const int kEndAxisFieldNumber = 2;
  inline ::google::protobuf::int32 end_axis() const;
  inline void set_end_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.FlattenParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_end_axis();
  inline void clear_has_end_axis();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 end_axis_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static FlattenParameter* default_instance_;
};
// -------------------------------------------------------------------

class HDF5DataParameter : public ::google::protobuf::Message {
 public:
  HDF5DataParameter();
  virtual ~HDF5DataParameter();

  HDF5DataParameter(const HDF5DataParameter& from);

  inline HDF5DataParameter& operator=(const HDF5DataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HDF5DataParameter& default_instance();

  void Swap(HDF5DataParameter* other);

  // implements Message ----------------------------------------------

  HDF5DataParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HDF5DataParameter& from);
  void MergeFrom(const HDF5DataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 1;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // optional uint32 batch_size = 2;
  inline bool has_batch_size() const;
  inline void clear_batch_size();
  static const int kBatchSizeFieldNumber = 2;
  inline ::google::protobuf::uint32 batch_size() const;
  inline void set_batch_size(::google::protobuf::uint32 value);

  // optional bool shuffle = 3 [default = false];
  inline bool has_shuffle() const;
  inline void clear_shuffle();
  static const int kShuffleFieldNumber = 3;
  inline bool shuffle() const;
  inline void set_shuffle(bool value);

  // @@protoc_insertion_point(class_scope:caffe.HDF5DataParameter)
 private:
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_shuffle();
  inline void clear_has_shuffle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* source_;
  ::google::protobuf::uint32 batch_size_;
  bool shuffle_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static HDF5DataParameter* default_instance_;
};
// -------------------------------------------------------------------

class HDF5OutputParameter : public ::google::protobuf::Message {
 public:
  HDF5OutputParameter();
  virtual ~HDF5OutputParameter();

  HDF5OutputParameter(const HDF5OutputParameter& from);

  inline HDF5OutputParameter& operator=(const HDF5OutputParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HDF5OutputParameter& default_instance();

  void Swap(HDF5OutputParameter* other);

  // implements Message ----------------------------------------------

  HDF5OutputParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HDF5OutputParameter& from);
  void MergeFrom(const HDF5OutputParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string file_name = 1;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const char* value, size_t size);
  inline ::std::string* mutable_file_name();
  inline ::std::string* release_file_name();
  inline void set_allocated_file_name(::std::string* file_name);

  // @@protoc_insertion_point(class_scope:caffe.HDF5OutputParameter)
 private:
  inline void set_has_file_name();
  inline void clear_has_file_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* file_name_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static HDF5OutputParameter* default_instance_;
};
// -------------------------------------------------------------------

class HingeLossParameter : public ::google::protobuf::Message {
 public:
  HingeLossParameter();
  virtual ~HingeLossParameter();

  HingeLossParameter(const HingeLossParameter& from);

  inline HingeLossParameter& operator=(const HingeLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HingeLossParameter& default_instance();

  void Swap(HingeLossParameter* other);

  // implements Message ----------------------------------------------

  HingeLossParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HingeLossParameter& from);
  void MergeFrom(const HingeLossParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef HingeLossParameter_Norm Norm;
  static const Norm L1 = HingeLossParameter_Norm_L1;
  static const Norm L2 = HingeLossParameter_Norm_L2;
  static inline bool Norm_IsValid(int value) {
    return HingeLossParameter_Norm_IsValid(value);
  }
  static const Norm Norm_MIN =
    HingeLossParameter_Norm_Norm_MIN;
  static const Norm Norm_MAX =
    HingeLossParameter_Norm_Norm_MAX;
  static const int Norm_ARRAYSIZE =
    HingeLossParameter_Norm_Norm_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Norm_descriptor() {
    return HingeLossParameter_Norm_descriptor();
  }
  static inline const ::std::string& Norm_Name(Norm value) {
    return HingeLossParameter_Norm_Name(value);
  }
  static inline bool Norm_Parse(const ::std::string& name,
      Norm* value) {
    return HingeLossParameter_Norm_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
  inline bool has_norm() const;
  inline void clear_norm();
  static const int kNormFieldNumber = 1;
  inline ::caffe::HingeLossParameter_Norm norm() const;
  inline void set_norm(::caffe::HingeLossParameter_Norm value);

  // @@protoc_insertion_point(class_scope:caffe.HingeLossParameter)
 private:
  inline void set_has_norm();
  inline void clear_has_norm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int norm_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static HingeLossParameter* default_instance_;
};
// -------------------------------------------------------------------

class ImageDataParameter : public ::google::protobuf::Message {
 public:
  ImageDataParameter();
  virtual ~ImageDataParameter();

  ImageDataParameter(const ImageDataParameter& from);

  inline ImageDataParameter& operator=(const ImageDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageDataParameter& default_instance();

  void Swap(ImageDataParameter* other);

  // implements Message ----------------------------------------------

  ImageDataParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImageDataParameter& from);
  void MergeFrom(const ImageDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 1;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // optional uint32 batch_size = 4 [default = 1];
  inline bool has_batch_size() const;
  inline void clear_batch_size();
  static const int kBatchSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 batch_size() const;
  inline void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 rand_skip = 7 [default = 0];
  inline bool has_rand_skip() const;
  inline void clear_rand_skip();
  static const int kRandSkipFieldNumber = 7;
  inline ::google::protobuf::uint32 rand_skip() const;
  inline void set_rand_skip(::google::protobuf::uint32 value);

  // optional bool shuffle = 8 [default = false];
  inline bool has_shuffle() const;
  inline void clear_shuffle();
  static const int kShuffleFieldNumber = 8;
  inline bool shuffle() const;
  inline void set_shuffle(bool value);

  // optional uint32 new_height = 9 [default = 0];
  inline bool has_new_height() const;
  inline void clear_new_height();
  static const int kNewHeightFieldNumber = 9;
  inline ::google::protobuf::uint32 new_height() const;
  inline void set_new_height(::google::protobuf::uint32 value);

  // optional uint32 new_width = 10 [default = 0];
  inline bool has_new_width() const;
  inline void clear_new_width();
  static const int kNewWidthFieldNumber = 10;
  inline ::google::protobuf::uint32 new_width() const;
  inline void set_new_width(::google::protobuf::uint32 value);

  // optional bool is_color = 11 [default = true];
  inline bool has_is_color() const;
  inline void clear_is_color();
  static const int kIsColorFieldNumber = 11;
  inline bool is_color() const;
  inline void set_is_color(bool value);

  // optional float scale = 2 [default = 1];
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 2;
  inline float scale() const;
  inline void set_scale(float value);

  // optional string mean_file = 3;
  inline bool has_mean_file() const;
  inline void clear_mean_file();
  static const int kMeanFileFieldNumber = 3;
  inline const ::std::string& mean_file() const;
  inline void set_mean_file(const ::std::string& value);
  inline void set_mean_file(const char* value);
  inline void set_mean_file(const char* value, size_t size);
  inline ::std::string* mutable_mean_file();
  inline ::std::string* release_mean_file();
  inline void set_allocated_mean_file(::std::string* mean_file);

  // optional uint32 crop_size = 5 [default = 0];
  inline bool has_crop_size() const;
  inline void clear_crop_size();
  static const int kCropSizeFieldNumber = 5;
  inline ::google::protobuf::uint32 crop_size() const;
  inline void set_crop_size(::google::protobuf::uint32 value);

  // optional bool mirror = 6 [default = false];
  inline bool has_mirror() const;
  inline void clear_mirror();
  static const int kMirrorFieldNumber = 6;
  inline bool mirror() const;
  inline void set_mirror(bool value);

  // optional string root_folder = 12 [default = ""];
  inline bool has_root_folder() const;
  inline void clear_root_folder();
  static const int kRootFolderFieldNumber = 12;
  inline const ::std::string& root_folder() const;
  inline void set_root_folder(const ::std::string& value);
  inline void set_root_folder(const char* value);
  inline void set_root_folder(const char* value, size_t size);
  inline ::std::string* mutable_root_folder();
  inline ::std::string* release_root_folder();
  inline void set_allocated_root_folder(::std::string* root_folder);

  // @@protoc_insertion_point(class_scope:caffe.ImageDataParameter)
 private:
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_rand_skip();
  inline void clear_has_rand_skip();
  inline void set_has_shuffle();
  inline void clear_has_shuffle();
  inline void set_has_new_height();
  inline void clear_has_new_height();
  inline void set_has_new_width();
  inline void clear_has_new_width();
  inline void set_has_is_color();
  inline void clear_has_is_color();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_mean_file();
  inline void clear_has_mean_file();
  inline void set_has_crop_size();
  inline void clear_has_crop_size();
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_root_folder();
  inline void clear_has_root_folder();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* source_;
  ::google::protobuf::uint32 batch_size_;
  ::google::protobuf::uint32 rand_skip_;
  ::google::protobuf::uint32 new_height_;
  ::google::protobuf::uint32 new_width_;
  bool shuffle_;
  bool is_color_;
  bool mirror_;
  float scale_;
  ::std::string* mean_file_;
  ::std::string* root_folder_;
  ::google::protobuf::uint32 crop_size_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static ImageDataParameter* default_instance_;
};
// -------------------------------------------------------------------

class InfogainLossParameter : public ::google::protobuf::Message {
 public:
  InfogainLossParameter();
  virtual ~InfogainLossParameter();

  InfogainLossParameter(const InfogainLossParameter& from);

  inline InfogainLossParameter& operator=(const InfogainLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InfogainLossParameter& default_instance();

  void Swap(InfogainLossParameter* other);

  // implements Message ----------------------------------------------

  InfogainLossParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InfogainLossParameter& from);
  void MergeFrom(const InfogainLossParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 1;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // @@protoc_insertion_point(class_scope:caffe.InfogainLossParameter)
 private:
  inline void set_has_source();
  inline void clear_has_source();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* source_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static InfogainLossParameter* default_instance_;
};
// -------------------------------------------------------------------

class InnerProductParameter : public ::google::protobuf::Message {
 public:
  InnerProductParameter();
  virtual ~InnerProductParameter();

  InnerProductParameter(const InnerProductParameter& from);

  inline InnerProductParameter& operator=(const InnerProductParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InnerProductParameter& default_instance();

  void Swap(InnerProductParameter* other);

  // implements Message ----------------------------------------------

  InnerProductParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InnerProductParameter& from);
  void MergeFrom(const InnerProductParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_output = 1;
  inline bool has_num_output() const;
  inline void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  inline ::google::protobuf::uint32 num_output() const;
  inline void set_num_output(::google::protobuf::uint32 value);

  // optional bool bias_term = 2 [default = true];
  inline bool has_bias_term() const;
  inline void clear_bias_term();
  static const int kBiasTermFieldNumber = 2;
  inline bool bias_term() const;
  inline void set_bias_term(bool value);

  // optional .caffe.FillerParameter weight_filler = 3;
  inline bool has_weight_filler() const;
  inline void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 3;
  inline const ::caffe::FillerParameter& weight_filler() const;
  inline ::caffe::FillerParameter* mutable_weight_filler();
  inline ::caffe::FillerParameter* release_weight_filler();
  inline void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 4;
  inline bool has_bias_filler() const;
  inline void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 4;
  inline const ::caffe::FillerParameter& bias_filler() const;
  inline ::caffe::FillerParameter* mutable_bias_filler();
  inline ::caffe::FillerParameter* release_bias_filler();
  inline void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional int32 axis = 5 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 5;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional bool transpose = 6 [default = false];
  inline bool has_transpose() const;
  inline void clear_transpose();
  static const int kTransposeFieldNumber = 6;
  inline bool transpose() const;
  inline void set_transpose(bool value);

  // @@protoc_insertion_point(class_scope:caffe.InnerProductParameter)
 private:
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_bias_term();
  inline void clear_has_bias_term();
  inline void set_has_weight_filler();
  inline void clear_has_weight_filler();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_transpose();
  inline void clear_has_transpose();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::caffe::FillerParameter* weight_filler_;
  ::google::protobuf::uint32 num_output_;
  bool bias_term_;
  bool transpose_;
  ::caffe::FillerParameter* bias_filler_;
  ::google::protobuf::int32 axis_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static InnerProductParameter* default_instance_;
};
// -------------------------------------------------------------------

class InputParameter : public ::google::protobuf::Message {
 public:
  InputParameter();
  virtual ~InputParameter();

  InputParameter(const InputParameter& from);

  inline InputParameter& operator=(const InputParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InputParameter& default_instance();

  void Swap(InputParameter* other);

  // implements Message ----------------------------------------------

  InputParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InputParameter& from);
  void MergeFrom(const InputParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.BlobShape shape = 1;
  inline int shape_size() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 1;
  inline const ::caffe::BlobShape& shape(int index) const;
  inline ::caffe::BlobShape* mutable_shape(int index);
  inline ::caffe::BlobShape* add_shape();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
      shape() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
      mutable_shape();

  // @@protoc_insertion_point(class_scope:caffe.InputParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape > shape_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static InputParameter* default_instance_;
};
// -------------------------------------------------------------------

class LogParameter : public ::google::protobuf::Message {
 public:
  LogParameter();
  virtual ~LogParameter();

  LogParameter(const LogParameter& from);

  inline LogParameter& operator=(const LogParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogParameter& default_instance();

  void Swap(LogParameter* other);

  // implements Message ----------------------------------------------

  LogParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogParameter& from);
  void MergeFrom(const LogParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float base = 1 [default = -1];
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline float base() const;
  inline void set_base(float value);

  // optional float scale = 2 [default = 1];
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 2;
  inline float scale() const;
  inline void set_scale(float value);

  // optional float shift = 3 [default = 0];
  inline bool has_shift() const;
  inline void clear_shift();
  static const int kShiftFieldNumber = 3;
  inline float shift() const;
  inline void set_shift(float value);

  // @@protoc_insertion_point(class_scope:caffe.LogParameter)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_shift();
  inline void clear_has_shift();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float base_;
  float scale_;
  float shift_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static LogParameter* default_instance_;
};
// -------------------------------------------------------------------

class LRNParameter : public ::google::protobuf::Message {
 public:
  LRNParameter();
  virtual ~LRNParameter();

  LRNParameter(const LRNParameter& from);

  inline LRNParameter& operator=(const LRNParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LRNParameter& default_instance();

  void Swap(LRNParameter* other);

  // implements Message ----------------------------------------------

  LRNParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LRNParameter& from);
  void MergeFrom(const LRNParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LRNParameter_NormRegion NormRegion;
  static const NormRegion ACROSS_CHANNELS = LRNParameter_NormRegion_ACROSS_CHANNELS;
  static const NormRegion WITHIN_CHANNEL = LRNParameter_NormRegion_WITHIN_CHANNEL;
  static inline bool NormRegion_IsValid(int value) {
    return LRNParameter_NormRegion_IsValid(value);
  }
  static const NormRegion NormRegion_MIN =
    LRNParameter_NormRegion_NormRegion_MIN;
  static const NormRegion NormRegion_MAX =
    LRNParameter_NormRegion_NormRegion_MAX;
  static const int NormRegion_ARRAYSIZE =
    LRNParameter_NormRegion_NormRegion_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NormRegion_descriptor() {
    return LRNParameter_NormRegion_descriptor();
  }
  static inline const ::std::string& NormRegion_Name(NormRegion value) {
    return LRNParameter_NormRegion_Name(value);
  }
  static inline bool NormRegion_Parse(const ::std::string& name,
      NormRegion* value) {
    return LRNParameter_NormRegion_Parse(name, value);
  }

  typedef LRNParameter_Engine Engine;
  static const Engine DEFAULT = LRNParameter_Engine_DEFAULT;
  static const Engine CAFFE = LRNParameter_Engine_CAFFE;
  static const Engine CUDNN = LRNParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return LRNParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    LRNParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    LRNParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    LRNParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return LRNParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return LRNParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return LRNParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 local_size = 1 [default = 5];
  inline bool has_local_size() const;
  inline void clear_local_size();
  static const int kLocalSizeFieldNumber = 1;
  inline ::google::protobuf::uint32 local_size() const;
  inline void set_local_size(::google::protobuf::uint32 value);

  // optional float alpha = 2 [default = 1];
  inline bool has_alpha() const;
  inline void clear_alpha();
  static const int kAlphaFieldNumber = 2;
  inline float alpha() const;
  inline void set_alpha(float value);

  // optional float beta = 3 [default = 0.75];
  inline bool has_beta() const;
  inline void clear_beta();
  static const int kBetaFieldNumber = 3;
  inline float beta() const;
  inline void set_beta(float value);

  // optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
  inline bool has_norm_region() const;
  inline void clear_norm_region();
  static const int kNormRegionFieldNumber = 4;
  inline ::caffe::LRNParameter_NormRegion norm_region() const;
  inline void set_norm_region(::caffe::LRNParameter_NormRegion value);

  // optional float k = 5 [default = 1];
  inline bool has_k() const;
  inline void clear_k();
  static const int kKFieldNumber = 5;
  inline float k() const;
  inline void set_k(float value);

  // optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
  inline bool has_engine() const;
  inline void clear_engine();
  static const int kEngineFieldNumber = 6;
  inline ::caffe::LRNParameter_Engine engine() const;
  inline void set_engine(::caffe::LRNParameter_Engine value);

  // @@protoc_insertion_point(class_scope:caffe.LRNParameter)
 private:
  inline void set_has_local_size();
  inline void clear_has_local_size();
  inline void set_has_alpha();
  inline void clear_has_alpha();
  inline void set_has_beta();
  inline void clear_has_beta();
  inline void set_has_norm_region();
  inline void clear_has_norm_region();
  inline void set_has_k();
  inline void clear_has_k();
  inline void set_has_engine();
  inline void clear_has_engine();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 local_size_;
  float alpha_;
  float beta_;
  int norm_region_;
  float k_;
  int engine_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static LRNParameter* default_instance_;
};
// -------------------------------------------------------------------

class MemoryDataParameter : public ::google::protobuf::Message {
 public:
  MemoryDataParameter();
  virtual ~MemoryDataParameter();

  MemoryDataParameter(const MemoryDataParameter& from);

  inline MemoryDataParameter& operator=(const MemoryDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MemoryDataParameter& default_instance();

  void Swap(MemoryDataParameter* other);

  // implements Message ----------------------------------------------

  MemoryDataParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MemoryDataParameter& from);
  void MergeFrom(const MemoryDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 batch_size = 1;
  inline bool has_batch_size() const;
  inline void clear_batch_size();
  static const int kBatchSizeFieldNumber = 1;
  inline ::google::protobuf::uint32 batch_size() const;
  inline void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 channels = 2;
  inline bool has_channels() const;
  inline void clear_channels();
  static const int kChannelsFieldNumber = 2;
  inline ::google::protobuf::uint32 channels() const;
  inline void set_channels(::google::protobuf::uint32 value);

  // optional uint32 height = 3;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);

  // optional uint32 width = 4;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 4;
  inline ::google::protobuf::uint32 width() const;
  inline void set_width(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.MemoryDataParameter)
 private:
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_channels();
  inline void clear_has_channels();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width();
  inline void clear_has_width();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 batch_size_;
  ::google::protobuf::uint32 channels_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 width_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static MemoryDataParameter* default_instance_;
};
// -------------------------------------------------------------------

class MultiBoxLossParameter : public ::google::protobuf::Message {
 public:
  MultiBoxLossParameter();
  virtual ~MultiBoxLossParameter();

  MultiBoxLossParameter(const MultiBoxLossParameter& from);

  inline MultiBoxLossParameter& operator=(const MultiBoxLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MultiBoxLossParameter& default_instance();

  void Swap(MultiBoxLossParameter* other);

  // implements Message ----------------------------------------------

  MultiBoxLossParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MultiBoxLossParameter& from);
  void MergeFrom(const MultiBoxLossParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MultiBoxLossParameter_LocLossType LocLossType;
  static const LocLossType L2 = MultiBoxLossParameter_LocLossType_L2;
  static const LocLossType SMOOTH_L1 = MultiBoxLossParameter_LocLossType_SMOOTH_L1;
  static inline bool LocLossType_IsValid(int value) {
    return MultiBoxLossParameter_LocLossType_IsValid(value);
  }
  static const LocLossType LocLossType_MIN =
    MultiBoxLossParameter_LocLossType_LocLossType_MIN;
  static const LocLossType LocLossType_MAX =
    MultiBoxLossParameter_LocLossType_LocLossType_MAX;
  static const int LocLossType_ARRAYSIZE =
    MultiBoxLossParameter_LocLossType_LocLossType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LocLossType_descriptor() {
    return MultiBoxLossParameter_LocLossType_descriptor();
  }
  static inline const ::std::string& LocLossType_Name(LocLossType value) {
    return MultiBoxLossParameter_LocLossType_Name(value);
  }
  static inline bool LocLossType_Parse(const ::std::string& name,
      LocLossType* value) {
    return MultiBoxLossParameter_LocLossType_Parse(name, value);
  }

  typedef MultiBoxLossParameter_ConfLossType ConfLossType;
  static const ConfLossType SOFTMAX = MultiBoxLossParameter_ConfLossType_SOFTMAX;
  static const ConfLossType LOGISTIC = MultiBoxLossParameter_ConfLossType_LOGISTIC;
  static inline bool ConfLossType_IsValid(int value) {
    return MultiBoxLossParameter_ConfLossType_IsValid(value);
  }
  static const ConfLossType ConfLossType_MIN =
    MultiBoxLossParameter_ConfLossType_ConfLossType_MIN;
  static const ConfLossType ConfLossType_MAX =
    MultiBoxLossParameter_ConfLossType_ConfLossType_MAX;
  static const int ConfLossType_ARRAYSIZE =
    MultiBoxLossParameter_ConfLossType_ConfLossType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ConfLossType_descriptor() {
    return MultiBoxLossParameter_ConfLossType_descriptor();
  }
  static inline const ::std::string& ConfLossType_Name(ConfLossType value) {
    return MultiBoxLossParameter_ConfLossType_Name(value);
  }
  static inline bool ConfLossType_Parse(const ::std::string& name,
      ConfLossType* value) {
    return MultiBoxLossParameter_ConfLossType_Parse(name, value);
  }

  typedef MultiBoxLossParameter_MatchType MatchType;
  static const MatchType BIPARTITE = MultiBoxLossParameter_MatchType_BIPARTITE;
  static const MatchType PER_PREDICTION = MultiBoxLossParameter_MatchType_PER_PREDICTION;
  static inline bool MatchType_IsValid(int value) {
    return MultiBoxLossParameter_MatchType_IsValid(value);
  }
  static const MatchType MatchType_MIN =
    MultiBoxLossParameter_MatchType_MatchType_MIN;
  static const MatchType MatchType_MAX =
    MultiBoxLossParameter_MatchType_MatchType_MAX;
  static const int MatchType_ARRAYSIZE =
    MultiBoxLossParameter_MatchType_MatchType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MatchType_descriptor() {
    return MultiBoxLossParameter_MatchType_descriptor();
  }
  static inline const ::std::string& MatchType_Name(MatchType value) {
    return MultiBoxLossParameter_MatchType_Name(value);
  }
  static inline bool MatchType_Parse(const ::std::string& name,
      MatchType* value) {
    return MultiBoxLossParameter_MatchType_Parse(name, value);
  }

  typedef MultiBoxLossParameter_MiningType MiningType;
  static const MiningType NONE = MultiBoxLossParameter_MiningType_NONE;
  static const MiningType MAX_NEGATIVE = MultiBoxLossParameter_MiningType_MAX_NEGATIVE;
  static const MiningType HARD_EXAMPLE = MultiBoxLossParameter_MiningType_HARD_EXAMPLE;
  static inline bool MiningType_IsValid(int value) {
    return MultiBoxLossParameter_MiningType_IsValid(value);
  }
  static const MiningType MiningType_MIN =
    MultiBoxLossParameter_MiningType_MiningType_MIN;
  static const MiningType MiningType_MAX =
    MultiBoxLossParameter_MiningType_MiningType_MAX;
  static const int MiningType_ARRAYSIZE =
    MultiBoxLossParameter_MiningType_MiningType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MiningType_descriptor() {
    return MultiBoxLossParameter_MiningType_descriptor();
  }
  static inline const ::std::string& MiningType_Name(MiningType value) {
    return MultiBoxLossParameter_MiningType_Name(value);
  }
  static inline bool MiningType_Parse(const ::std::string& name,
      MiningType* value) {
    return MultiBoxLossParameter_MiningType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.MultiBoxLossParameter.LocLossType loc_loss_type = 1 [default = SMOOTH_L1];
  inline bool has_loc_loss_type() const;
  inline void clear_loc_loss_type();
  static const int kLocLossTypeFieldNumber = 1;
  inline ::caffe::MultiBoxLossParameter_LocLossType loc_loss_type() const;
  inline void set_loc_loss_type(::caffe::MultiBoxLossParameter_LocLossType value);

  // optional .caffe.MultiBoxLossParameter.ConfLossType conf_loss_type = 2 [default = SOFTMAX];
  inline bool has_conf_loss_type() const;
  inline void clear_conf_loss_type();
  static const int kConfLossTypeFieldNumber = 2;
  inline ::caffe::MultiBoxLossParameter_ConfLossType conf_loss_type() const;
  inline void set_conf_loss_type(::caffe::MultiBoxLossParameter_ConfLossType value);

  // optional float loc_weight = 3 [default = 1];
  inline bool has_loc_weight() const;
  inline void clear_loc_weight();
  static const int kLocWeightFieldNumber = 3;
  inline float loc_weight() const;
  inline void set_loc_weight(float value);

  // optional uint32 num_classes = 4;
  inline bool has_num_classes() const;
  inline void clear_num_classes();
  static const int kNumClassesFieldNumber = 4;
  inline ::google::protobuf::uint32 num_classes() const;
  inline void set_num_classes(::google::protobuf::uint32 value);

  // optional bool share_location = 5 [default = true];
  inline bool has_share_location() const;
  inline void clear_share_location();
  static const int kShareLocationFieldNumber = 5;
  inline bool share_location() const;
  inline void set_share_location(bool value);

  // optional .caffe.MultiBoxLossParameter.MatchType match_type = 6 [default = PER_PREDICTION];
  inline bool has_match_type() const;
  inline void clear_match_type();
  static const int kMatchTypeFieldNumber = 6;
  inline ::caffe::MultiBoxLossParameter_MatchType match_type() const;
  inline void set_match_type(::caffe::MultiBoxLossParameter_MatchType value);

  // optional float overlap_threshold = 7 [default = 0.5];
  inline bool has_overlap_threshold() const;
  inline void clear_overlap_threshold();
  static const int kOverlapThresholdFieldNumber = 7;
  inline float overlap_threshold() const;
  inline void set_overlap_threshold(float value);

  // optional bool use_prior_for_matching = 8 [default = true];
  inline bool has_use_prior_for_matching() const;
  inline void clear_use_prior_for_matching();
  static const int kUsePriorForMatchingFieldNumber = 8;
  inline bool use_prior_for_matching() const;
  inline void set_use_prior_for_matching(bool value);

  // optional uint32 background_label_id = 9 [default = 0];
  inline bool has_background_label_id() const;
  inline void clear_background_label_id();
  static const int kBackgroundLabelIdFieldNumber = 9;
  inline ::google::protobuf::uint32 background_label_id() const;
  inline void set_background_label_id(::google::protobuf::uint32 value);

  // optional bool use_difficult_gt = 10 [default = true];
  inline bool has_use_difficult_gt() const;
  inline void clear_use_difficult_gt();
  static const int kUseDifficultGtFieldNumber = 10;
  inline bool use_difficult_gt() const;
  inline void set_use_difficult_gt(bool value);

  // optional bool do_neg_mining = 11;
  inline bool has_do_neg_mining() const;
  inline void clear_do_neg_mining();
  static const int kDoNegMiningFieldNumber = 11;
  inline bool do_neg_mining() const;
  inline void set_do_neg_mining(bool value);

  // optional float neg_pos_ratio = 12 [default = 3];
  inline bool has_neg_pos_ratio() const;
  inline void clear_neg_pos_ratio();
  static const int kNegPosRatioFieldNumber = 12;
  inline float neg_pos_ratio() const;
  inline void set_neg_pos_ratio(float value);

  // optional float neg_overlap = 13 [default = 0.5];
  inline bool has_neg_overlap() const;
  inline void clear_neg_overlap();
  static const int kNegOverlapFieldNumber = 13;
  inline float neg_overlap() const;
  inline void set_neg_overlap(float value);

  // optional .caffe.PriorBoxParameter.CodeType code_type = 14 [default = CORNER];
  inline bool has_code_type() const;
  inline void clear_code_type();
  static const int kCodeTypeFieldNumber = 14;
  inline ::caffe::PriorBoxParameter_CodeType code_type() const;
  inline void set_code_type(::caffe::PriorBoxParameter_CodeType value);

  // optional bool encode_variance_in_target = 16 [default = false];
  inline bool has_encode_variance_in_target() const;
  inline void clear_encode_variance_in_target();
  static const int kEncodeVarianceInTargetFieldNumber = 16;
  inline bool encode_variance_in_target() const;
  inline void set_encode_variance_in_target(bool value);

  // optional bool map_object_to_agnostic = 17 [default = false];
  inline bool has_map_object_to_agnostic() const;
  inline void clear_map_object_to_agnostic();
  static const int kMapObjectToAgnosticFieldNumber = 17;
  inline bool map_object_to_agnostic() const;
  inline void set_map_object_to_agnostic(bool value);

  // optional bool ignore_cross_boundary_bbox = 18 [default = false];
  inline bool has_ignore_cross_boundary_bbox() const;
  inline void clear_ignore_cross_boundary_bbox();
  static const int kIgnoreCrossBoundaryBboxFieldNumber = 18;
  inline bool ignore_cross_boundary_bbox() const;
  inline void set_ignore_cross_boundary_bbox(bool value);

  // optional bool bp_inside = 19 [default = false];
  inline bool has_bp_inside() const;
  inline void clear_bp_inside();
  static const int kBpInsideFieldNumber = 19;
  inline bool bp_inside() const;
  inline void set_bp_inside(bool value);

  // optional .caffe.MultiBoxLossParameter.MiningType mining_type = 20 [default = MAX_NEGATIVE];
  inline bool has_mining_type() const;
  inline void clear_mining_type();
  static const int kMiningTypeFieldNumber = 20;
  inline ::caffe::MultiBoxLossParameter_MiningType mining_type() const;
  inline void set_mining_type(::caffe::MultiBoxLossParameter_MiningType value);

  // optional .caffe.NonMaximumSuppressionParameter nms_param = 21;
  inline bool has_nms_param() const;
  inline void clear_nms_param();
  static const int kNmsParamFieldNumber = 21;
  inline const ::caffe::NonMaximumSuppressionParameter& nms_param() const;
  inline ::caffe::NonMaximumSuppressionParameter* mutable_nms_param();
  inline ::caffe::NonMaximumSuppressionParameter* release_nms_param();
  inline void set_allocated_nms_param(::caffe::NonMaximumSuppressionParameter* nms_param);

  // optional int32 sample_size = 22 [default = 64];
  inline bool has_sample_size() const;
  inline void clear_sample_size();
  static const int kSampleSizeFieldNumber = 22;
  inline ::google::protobuf::int32 sample_size() const;
  inline void set_sample_size(::google::protobuf::int32 value);

  // optional bool use_prior_for_nms = 23 [default = false];
  inline bool has_use_prior_for_nms() const;
  inline void clear_use_prior_for_nms();
  static const int kUsePriorForNmsFieldNumber = 23;
  inline bool use_prior_for_nms() const;
  inline void set_use_prior_for_nms(bool value);

  // @@protoc_insertion_point(class_scope:caffe.MultiBoxLossParameter)
 private:
  inline void set_has_loc_loss_type();
  inline void clear_has_loc_loss_type();
  inline void set_has_conf_loss_type();
  inline void clear_has_conf_loss_type();
  inline void set_has_loc_weight();
  inline void clear_has_loc_weight();
  inline void set_has_num_classes();
  inline void clear_has_num_classes();
  inline void set_has_share_location();
  inline void clear_has_share_location();
  inline void set_has_match_type();
  inline void clear_has_match_type();
  inline void set_has_overlap_threshold();
  inline void clear_has_overlap_threshold();
  inline void set_has_use_prior_for_matching();
  inline void clear_has_use_prior_for_matching();
  inline void set_has_background_label_id();
  inline void clear_has_background_label_id();
  inline void set_has_use_difficult_gt();
  inline void clear_has_use_difficult_gt();
  inline void set_has_do_neg_mining();
  inline void clear_has_do_neg_mining();
  inline void set_has_neg_pos_ratio();
  inline void clear_has_neg_pos_ratio();
  inline void set_has_neg_overlap();
  inline void clear_has_neg_overlap();
  inline void set_has_code_type();
  inline void clear_has_code_type();
  inline void set_has_encode_variance_in_target();
  inline void clear_has_encode_variance_in_target();
  inline void set_has_map_object_to_agnostic();
  inline void clear_has_map_object_to_agnostic();
  inline void set_has_ignore_cross_boundary_bbox();
  inline void clear_has_ignore_cross_boundary_bbox();
  inline void set_has_bp_inside();
  inline void clear_has_bp_inside();
  inline void set_has_mining_type();
  inline void clear_has_mining_type();
  inline void set_has_nms_param();
  inline void clear_has_nms_param();
  inline void set_has_sample_size();
  inline void clear_has_sample_size();
  inline void set_has_use_prior_for_nms();
  inline void clear_has_use_prior_for_nms();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int loc_loss_type_;
  int conf_loss_type_;
  float loc_weight_;
  ::google::protobuf::uint32 num_classes_;
  int match_type_;
  float overlap_threshold_;
  bool share_location_;
  bool use_prior_for_matching_;
  bool use_difficult_gt_;
  bool do_neg_mining_;
  ::google::protobuf::uint32 background_label_id_;
  float neg_pos_ratio_;
  float neg_overlap_;
  int code_type_;
  bool encode_variance_in_target_;
  bool map_object_to_agnostic_;
  bool ignore_cross_boundary_bbox_;
  bool bp_inside_;
  ::caffe::NonMaximumSuppressionParameter* nms_param_;
  int mining_type_;
  ::google::protobuf::int32 sample_size_;
  bool use_prior_for_nms_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static MultiBoxLossParameter* default_instance_;
};
// -------------------------------------------------------------------

class NonMaximumSuppressionParameter : public ::google::protobuf::Message {
 public:
  NonMaximumSuppressionParameter();
  virtual ~NonMaximumSuppressionParameter();

  NonMaximumSuppressionParameter(const NonMaximumSuppressionParameter& from);

  inline NonMaximumSuppressionParameter& operator=(const NonMaximumSuppressionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NonMaximumSuppressionParameter& default_instance();

  void Swap(NonMaximumSuppressionParameter* other);

  // implements Message ----------------------------------------------

  NonMaximumSuppressionParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NonMaximumSuppressionParameter& from);
  void MergeFrom(const NonMaximumSuppressionParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float nms_threshold = 1 [default = 0.3];
  inline bool has_nms_threshold() const;
  inline void clear_nms_threshold();
  static const int kNmsThresholdFieldNumber = 1;
  inline float nms_threshold() const;
  inline void set_nms_threshold(float value);

  // optional int32 top_k = 2;
  inline bool has_top_k() const;
  inline void clear_top_k();
  static const int kTopKFieldNumber = 2;
  inline ::google::protobuf::int32 top_k() const;
  inline void set_top_k(::google::protobuf::int32 value);

  // optional float eta = 3 [default = 1];
  inline bool has_eta() const;
  inline void clear_eta();
  static const int kEtaFieldNumber = 3;
  inline float eta() const;
  inline void set_eta(float value);

  // @@protoc_insertion_point(class_scope:caffe.NonMaximumSuppressionParameter)
 private:
  inline void set_has_nms_threshold();
  inline void clear_has_nms_threshold();
  inline void set_has_top_k();
  inline void clear_has_top_k();
  inline void set_has_eta();
  inline void clear_has_eta();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float nms_threshold_;
  ::google::protobuf::int32 top_k_;
  float eta_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static NonMaximumSuppressionParameter* default_instance_;
};
// -------------------------------------------------------------------

class MVNParameter : public ::google::protobuf::Message {
 public:
  MVNParameter();
  virtual ~MVNParameter();

  MVNParameter(const MVNParameter& from);

  inline MVNParameter& operator=(const MVNParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MVNParameter& default_instance();

  void Swap(MVNParameter* other);

  // implements Message ----------------------------------------------

  MVNParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MVNParameter& from);
  void MergeFrom(const MVNParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool normalize_variance = 1 [default = true];
  inline bool has_normalize_variance() const;
  inline void clear_normalize_variance();
  static const int kNormalizeVarianceFieldNumber = 1;
  inline bool normalize_variance() const;
  inline void set_normalize_variance(bool value);

  // optional bool across_channels = 2 [default = false];
  inline bool has_across_channels() const;
  inline void clear_across_channels();
  static const int kAcrossChannelsFieldNumber = 2;
  inline bool across_channels() const;
  inline void set_across_channels(bool value);

  // optional float eps = 3 [default = 1e-09];
  inline bool has_eps() const;
  inline void clear_eps();
  static const int kEpsFieldNumber = 3;
  inline float eps() const;
  inline void set_eps(float value);

  // @@protoc_insertion_point(class_scope:caffe.MVNParameter)
 private:
  inline void set_has_normalize_variance();
  inline void clear_has_normalize_variance();
  inline void set_has_across_channels();
  inline void clear_has_across_channels();
  inline void set_has_eps();
  inline void clear_has_eps();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool normalize_variance_;
  bool across_channels_;
  float eps_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static MVNParameter* default_instance_;
};
// -------------------------------------------------------------------

class NormalizeParameter : public ::google::protobuf::Message {
 public:
  NormalizeParameter();
  virtual ~NormalizeParameter();

  NormalizeParameter(const NormalizeParameter& from);

  inline NormalizeParameter& operator=(const NormalizeParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NormalizeParameter& default_instance();

  void Swap(NormalizeParameter* other);

  // implements Message ----------------------------------------------

  NormalizeParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NormalizeParameter& from);
  void MergeFrom(const NormalizeParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool across_spatial = 1 [default = true];
  inline bool has_across_spatial() const;
  inline void clear_across_spatial();
  static const int kAcrossSpatialFieldNumber = 1;
  inline bool across_spatial() const;
  inline void set_across_spatial(bool value);

  // optional .caffe.FillerParameter scale_filler = 2;
  inline bool has_scale_filler() const;
  inline void clear_scale_filler();
  static const int kScaleFillerFieldNumber = 2;
  inline const ::caffe::FillerParameter& scale_filler() const;
  inline ::caffe::FillerParameter* mutable_scale_filler();
  inline ::caffe::FillerParameter* release_scale_filler();
  inline void set_allocated_scale_filler(::caffe::FillerParameter* scale_filler);

  // optional bool channel_shared = 3 [default = true];
  inline bool has_channel_shared() const;
  inline void clear_channel_shared();
  static const int kChannelSharedFieldNumber = 3;
  inline bool channel_shared() const;
  inline void set_channel_shared(bool value);

  // optional float eps = 4 [default = 1e-10];
  inline bool has_eps() const;
  inline void clear_eps();
  static const int kEpsFieldNumber = 4;
  inline float eps() const;
  inline void set_eps(float value);

  // @@protoc_insertion_point(class_scope:caffe.NormalizeParameter)
 private:
  inline void set_has_across_spatial();
  inline void clear_has_across_spatial();
  inline void set_has_scale_filler();
  inline void clear_has_scale_filler();
  inline void set_has_channel_shared();
  inline void clear_has_channel_shared();
  inline void set_has_eps();
  inline void clear_has_eps();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::caffe::FillerParameter* scale_filler_;
  bool across_spatial_;
  bool channel_shared_;
  float eps_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static NormalizeParameter* default_instance_;
};
// -------------------------------------------------------------------

class ParameterParameter : public ::google::protobuf::Message {
 public:
  ParameterParameter();
  virtual ~ParameterParameter();

  ParameterParameter(const ParameterParameter& from);

  inline ParameterParameter& operator=(const ParameterParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParameterParameter& default_instance();

  void Swap(ParameterParameter* other);

  // implements Message ----------------------------------------------

  ParameterParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParameterParameter& from);
  void MergeFrom(const ParameterParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.BlobShape shape = 1;
  inline bool has_shape() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 1;
  inline const ::caffe::BlobShape& shape() const;
  inline ::caffe::BlobShape* mutable_shape();
  inline ::caffe::BlobShape* release_shape();
  inline void set_allocated_shape(::caffe::BlobShape* shape);

  // @@protoc_insertion_point(class_scope:caffe.ParameterParameter)
 private:
  inline void set_has_shape();
  inline void clear_has_shape();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::caffe::BlobShape* shape_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static ParameterParameter* default_instance_;
};
// -------------------------------------------------------------------

class PermuteParameter : public ::google::protobuf::Message {
 public:
  PermuteParameter();
  virtual ~PermuteParameter();

  PermuteParameter(const PermuteParameter& from);

  inline PermuteParameter& operator=(const PermuteParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PermuteParameter& default_instance();

  void Swap(PermuteParameter* other);

  // implements Message ----------------------------------------------

  PermuteParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PermuteParameter& from);
  void MergeFrom(const PermuteParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 order = 1;
  inline int order_size() const;
  inline void clear_order();
  static const int kOrderFieldNumber = 1;
  inline ::google::protobuf::uint32 order(int index) const;
  inline void set_order(int index, ::google::protobuf::uint32 value);
  inline void add_order(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      order() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_order();

  // @@protoc_insertion_point(class_scope:caffe.PermuteParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > order_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static PermuteParameter* default_instance_;
};
// -------------------------------------------------------------------

class PoolingParameter : public ::google::protobuf::Message {
 public:
  PoolingParameter();
  virtual ~PoolingParameter();

  PoolingParameter(const PoolingParameter& from);

  inline PoolingParameter& operator=(const PoolingParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PoolingParameter& default_instance();

  void Swap(PoolingParameter* other);

  // implements Message ----------------------------------------------

  PoolingParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PoolingParameter& from);
  void MergeFrom(const PoolingParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PoolingParameter_PoolMethod PoolMethod;
  static const PoolMethod MAX = PoolingParameter_PoolMethod_MAX;
  static const PoolMethod AVE = PoolingParameter_PoolMethod_AVE;
  static const PoolMethod STOCHASTIC = PoolingParameter_PoolMethod_STOCHASTIC;
  static inline bool PoolMethod_IsValid(int value) {
    return PoolingParameter_PoolMethod_IsValid(value);
  }
  static const PoolMethod PoolMethod_MIN =
    PoolingParameter_PoolMethod_PoolMethod_MIN;
  static const PoolMethod PoolMethod_MAX =
    PoolingParameter_PoolMethod_PoolMethod_MAX;
  static const int PoolMethod_ARRAYSIZE =
    PoolingParameter_PoolMethod_PoolMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PoolMethod_descriptor() {
    return PoolingParameter_PoolMethod_descriptor();
  }
  static inline const ::std::string& PoolMethod_Name(PoolMethod value) {
    return PoolingParameter_PoolMethod_Name(value);
  }
  static inline bool PoolMethod_Parse(const ::std::string& name,
      PoolMethod* value) {
    return PoolingParameter_PoolMethod_Parse(name, value);
  }

  typedef PoolingParameter_Engine Engine;
  static const Engine DEFAULT = PoolingParameter_Engine_DEFAULT;
  static const Engine CAFFE = PoolingParameter_Engine_CAFFE;
  static const Engine CUDNN = PoolingParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return PoolingParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    PoolingParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    PoolingParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    PoolingParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return PoolingParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return PoolingParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return PoolingParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
  inline bool has_pool() const;
  inline void clear_pool();
  static const int kPoolFieldNumber = 1;
  inline ::caffe::PoolingParameter_PoolMethod pool() const;
  inline void set_pool(::caffe::PoolingParameter_PoolMethod value);

  // optional uint32 pad = 4 [default = 0];
  inline bool has_pad() const;
  inline void clear_pad();
  static const int kPadFieldNumber = 4;
  inline ::google::protobuf::uint32 pad() const;
  inline void set_pad(::google::protobuf::uint32 value);

  // optional uint32 pad_h = 9 [default = 0];
  inline bool has_pad_h() const;
  inline void clear_pad_h();
  static const int kPadHFieldNumber = 9;
  inline ::google::protobuf::uint32 pad_h() const;
  inline void set_pad_h(::google::protobuf::uint32 value);

  // optional uint32 pad_w = 10 [default = 0];
  inline bool has_pad_w() const;
  inline void clear_pad_w();
  static const int kPadWFieldNumber = 10;
  inline ::google::protobuf::uint32 pad_w() const;
  inline void set_pad_w(::google::protobuf::uint32 value);

  // optional uint32 kernel_size = 2;
  inline bool has_kernel_size() const;
  inline void clear_kernel_size();
  static const int kKernelSizeFieldNumber = 2;
  inline ::google::protobuf::uint32 kernel_size() const;
  inline void set_kernel_size(::google::protobuf::uint32 value);

  // optional uint32 kernel_h = 5;
  inline bool has_kernel_h() const;
  inline void clear_kernel_h();
  static const int kKernelHFieldNumber = 5;
  inline ::google::protobuf::uint32 kernel_h() const;
  inline void set_kernel_h(::google::protobuf::uint32 value);

  // optional uint32 kernel_w = 6;
  inline bool has_kernel_w() const;
  inline void clear_kernel_w();
  static const int kKernelWFieldNumber = 6;
  inline ::google::protobuf::uint32 kernel_w() const;
  inline void set_kernel_w(::google::protobuf::uint32 value);

  // optional uint32 stride = 3 [default = 1];
  inline bool has_stride() const;
  inline void clear_stride();
  static const int kStrideFieldNumber = 3;
  inline ::google::protobuf::uint32 stride() const;
  inline void set_stride(::google::protobuf::uint32 value);

  // optional uint32 stride_h = 7;
  inline bool has_stride_h() const;
  inline void clear_stride_h();
  static const int kStrideHFieldNumber = 7;
  inline ::google::protobuf::uint32 stride_h() const;
  inline void set_stride_h(::google::protobuf::uint32 value);

  // optional uint32 stride_w = 8;
  inline bool has_stride_w() const;
  inline void clear_stride_w();
  static const int kStrideWFieldNumber = 8;
  inline ::google::protobuf::uint32 stride_w() const;
  inline void set_stride_w(::google::protobuf::uint32 value);

  // optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
  inline bool has_engine() const;
  inline void clear_engine();
  static const int kEngineFieldNumber = 11;
  inline ::caffe::PoolingParameter_Engine engine() const;
  inline void set_engine(::caffe::PoolingParameter_Engine value);

  // optional bool global_pooling = 12 [default = false];
  inline bool has_global_pooling() const;
  inline void clear_global_pooling();
  static const int kGlobalPoolingFieldNumber = 12;
  inline bool global_pooling() const;
  inline void set_global_pooling(bool value);

  // @@protoc_insertion_point(class_scope:caffe.PoolingParameter)
 private:
  inline void set_has_pool();
  inline void clear_has_pool();
  inline void set_has_pad();
  inline void clear_has_pad();
  inline void set_has_pad_h();
  inline void clear_has_pad_h();
  inline void set_has_pad_w();
  inline void clear_has_pad_w();
  inline void set_has_kernel_size();
  inline void clear_has_kernel_size();
  inline void set_has_kernel_h();
  inline void clear_has_kernel_h();
  inline void set_has_kernel_w();
  inline void clear_has_kernel_w();
  inline void set_has_stride();
  inline void clear_has_stride();
  inline void set_has_stride_h();
  inline void clear_has_stride_h();
  inline void set_has_stride_w();
  inline void clear_has_stride_w();
  inline void set_has_engine();
  inline void clear_has_engine();
  inline void set_has_global_pooling();
  inline void clear_has_global_pooling();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int pool_;
  ::google::protobuf::uint32 pad_;
  ::google::protobuf::uint32 pad_h_;
  ::google::protobuf::uint32 pad_w_;
  ::google::protobuf::uint32 kernel_size_;
  ::google::protobuf::uint32 kernel_h_;
  ::google::protobuf::uint32 kernel_w_;
  ::google::protobuf::uint32 stride_;
  ::google::protobuf::uint32 stride_h_;
  ::google::protobuf::uint32 stride_w_;
  int engine_;
  bool global_pooling_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static PoolingParameter* default_instance_;
};
// -------------------------------------------------------------------

class PowerParameter : public ::google::protobuf::Message {
 public:
  PowerParameter();
  virtual ~PowerParameter();

  PowerParameter(const PowerParameter& from);

  inline PowerParameter& operator=(const PowerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PowerParameter& default_instance();

  void Swap(PowerParameter* other);

  // implements Message ----------------------------------------------

  PowerParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PowerParameter& from);
  void MergeFrom(const PowerParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float power = 1 [default = 1];
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 1;
  inline float power() const;
  inline void set_power(float value);

  // optional float scale = 2 [default = 1];
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 2;
  inline float scale() const;
  inline void set_scale(float value);

  // optional float shift = 3 [default = 0];
  inline bool has_shift() const;
  inline void clear_shift();
  static const int kShiftFieldNumber = 3;
  inline float shift() const;
  inline void set_shift(float value);

  // @@protoc_insertion_point(class_scope:caffe.PowerParameter)
 private:
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_shift();
  inline void clear_has_shift();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float power_;
  float scale_;
  float shift_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static PowerParameter* default_instance_;
};
// -------------------------------------------------------------------

class PriorBoxParameter : public ::google::protobuf::Message {
 public:
  PriorBoxParameter();
  virtual ~PriorBoxParameter();

  PriorBoxParameter(const PriorBoxParameter& from);

  inline PriorBoxParameter& operator=(const PriorBoxParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PriorBoxParameter& default_instance();

  void Swap(PriorBoxParameter* other);

  // implements Message ----------------------------------------------

  PriorBoxParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PriorBoxParameter& from);
  void MergeFrom(const PriorBoxParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PriorBoxParameter_CodeType CodeType;
  static const CodeType CORNER = PriorBoxParameter_CodeType_CORNER;
  static const CodeType CENTER_SIZE = PriorBoxParameter_CodeType_CENTER_SIZE;
  static const CodeType CORNER_SIZE = PriorBoxParameter_CodeType_CORNER_SIZE;
  static inline bool CodeType_IsValid(int value) {
    return PriorBoxParameter_CodeType_IsValid(value);
  }
  static const CodeType CodeType_MIN =
    PriorBoxParameter_CodeType_CodeType_MIN;
  static const CodeType CodeType_MAX =
    PriorBoxParameter_CodeType_CodeType_MAX;
  static const int CodeType_ARRAYSIZE =
    PriorBoxParameter_CodeType_CodeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CodeType_descriptor() {
    return PriorBoxParameter_CodeType_descriptor();
  }
  static inline const ::std::string& CodeType_Name(CodeType value) {
    return PriorBoxParameter_CodeType_Name(value);
  }
  static inline bool CodeType_Parse(const ::std::string& name,
      CodeType* value) {
    return PriorBoxParameter_CodeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated float min_size = 1;
  inline int min_size_size() const;
  inline void clear_min_size();
  static const int kMinSizeFieldNumber = 1;
  inline float min_size(int index) const;
  inline void set_min_size(int index, float value);
  inline void add_min_size(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      min_size() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_min_size();

  // repeated float max_size = 2;
  inline int max_size_size() const;
  inline void clear_max_size();
  static const int kMaxSizeFieldNumber = 2;
  inline float max_size(int index) const;
  inline void set_max_size(int index, float value);
  inline void add_max_size(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      max_size() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_max_size();

  // repeated float aspect_ratio = 3;
  inline int aspect_ratio_size() const;
  inline void clear_aspect_ratio();
  static const int kAspectRatioFieldNumber = 3;
  inline float aspect_ratio(int index) const;
  inline void set_aspect_ratio(int index, float value);
  inline void add_aspect_ratio(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      aspect_ratio() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_aspect_ratio();

  // optional bool flip = 4 [default = true];
  inline bool has_flip() const;
  inline void clear_flip();
  static const int kFlipFieldNumber = 4;
  inline bool flip() const;
  inline void set_flip(bool value);

  // optional bool clip = 5 [default = false];
  inline bool has_clip() const;
  inline void clear_clip();
  static const int kClipFieldNumber = 5;
  inline bool clip() const;
  inline void set_clip(bool value);

  // repeated float variance = 6;
  inline int variance_size() const;
  inline void clear_variance();
  static const int kVarianceFieldNumber = 6;
  inline float variance(int index) const;
  inline void set_variance(int index, float value);
  inline void add_variance(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      variance() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_variance();

  // optional uint32 img_size = 7;
  inline bool has_img_size() const;
  inline void clear_img_size();
  static const int kImgSizeFieldNumber = 7;
  inline ::google::protobuf::uint32 img_size() const;
  inline void set_img_size(::google::protobuf::uint32 value);

  // optional uint32 img_h = 8;
  inline bool has_img_h() const;
  inline void clear_img_h();
  static const int kImgHFieldNumber = 8;
  inline ::google::protobuf::uint32 img_h() const;
  inline void set_img_h(::google::protobuf::uint32 value);

  // optional uint32 img_w = 9;
  inline bool has_img_w() const;
  inline void clear_img_w();
  static const int kImgWFieldNumber = 9;
  inline ::google::protobuf::uint32 img_w() const;
  inline void set_img_w(::google::protobuf::uint32 value);

  // optional float step = 10;
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 10;
  inline float step() const;
  inline void set_step(float value);

  // optional float step_h = 11;
  inline bool has_step_h() const;
  inline void clear_step_h();
  static const int kStepHFieldNumber = 11;
  inline float step_h() const;
  inline void set_step_h(float value);

  // optional float step_w = 12;
  inline bool has_step_w() const;
  inline void clear_step_w();
  static const int kStepWFieldNumber = 12;
  inline float step_w() const;
  inline void set_step_w(float value);

  // optional float offset = 13 [default = 0.5];
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 13;
  inline float offset() const;
  inline void set_offset(float value);

  // @@protoc_insertion_point(class_scope:caffe.PriorBoxParameter)
 private:
  inline void set_has_flip();
  inline void clear_has_flip();
  inline void set_has_clip();
  inline void clear_has_clip();
  inline void set_has_img_size();
  inline void clear_has_img_size();
  inline void set_has_img_h();
  inline void clear_has_img_h();
  inline void set_has_img_w();
  inline void clear_has_img_w();
  inline void set_has_step();
  inline void clear_has_step();
  inline void set_has_step_h();
  inline void clear_has_step_h();
  inline void set_has_step_w();
  inline void clear_has_step_w();
  inline void set_has_offset();
  inline void clear_has_offset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > min_size_;
  ::google::protobuf::RepeatedField< float > max_size_;
  ::google::protobuf::RepeatedField< float > aspect_ratio_;
  bool flip_;
  bool clip_;
  ::google::protobuf::uint32 img_size_;
  ::google::protobuf::RepeatedField< float > variance_;
  ::google::protobuf::uint32 img_h_;
  ::google::protobuf::uint32 img_w_;
  float step_;
  float step_h_;
  float step_w_;
  float offset_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static PriorBoxParameter* default_instance_;
};
// -------------------------------------------------------------------

class PythonParameter : public ::google::protobuf::Message {
 public:
  PythonParameter();
  virtual ~PythonParameter();

  PythonParameter(const PythonParameter& from);

  inline PythonParameter& operator=(const PythonParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PythonParameter& default_instance();

  void Swap(PythonParameter* other);

  // implements Message ----------------------------------------------

  PythonParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PythonParameter& from);
  void MergeFrom(const PythonParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string module = 1;
  inline bool has_module() const;
  inline void clear_module();
  static const int kModuleFieldNumber = 1;
  inline const ::std::string& module() const;
  inline void set_module(const ::std::string& value);
  inline void set_module(const char* value);
  inline void set_module(const char* value, size_t size);
  inline ::std::string* mutable_module();
  inline ::std::string* release_module();
  inline void set_allocated_module(::std::string* module);

  // optional string layer = 2;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 2;
  inline const ::std::string& layer() const;
  inline void set_layer(const ::std::string& value);
  inline void set_layer(const char* value);
  inline void set_layer(const char* value, size_t size);
  inline ::std::string* mutable_layer();
  inline ::std::string* release_layer();
  inline void set_allocated_layer(::std::string* layer);

  // optional string param_str = 3 [default = ""];
  inline bool has_param_str() const;
  inline void clear_param_str();
  static const int kParamStrFieldNumber = 3;
  inline const ::std::string& param_str() const;
  inline void set_param_str(const ::std::string& value);
  inline void set_param_str(const char* value);
  inline void set_param_str(const char* value, size_t size);
  inline ::std::string* mutable_param_str();
  inline ::std::string* release_param_str();
  inline void set_allocated_param_str(::std::string* param_str);

  // optional bool share_in_parallel = 4 [default = false];
  inline bool has_share_in_parallel() const;
  inline void clear_share_in_parallel();
  static const int kShareInParallelFieldNumber = 4;
  inline bool share_in_parallel() const;
  inline void set_share_in_parallel(bool value);

  // @@protoc_insertion_point(class_scope:caffe.PythonParameter)
 private:
  inline void set_has_module();
  inline void clear_has_module();
  inline void set_has_layer();
  inline void clear_has_layer();
  inline void set_has_param_str();
  inline void clear_has_param_str();
  inline void set_has_share_in_parallel();
  inline void clear_has_share_in_parallel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* module_;
  ::std::string* layer_;
  ::std::string* param_str_;
  bool share_in_parallel_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static PythonParameter* default_instance_;
};
// -------------------------------------------------------------------

class ReductionParameter : public ::google::protobuf::Message {
 public:
  ReductionParameter();
  virtual ~ReductionParameter();

  ReductionParameter(const ReductionParameter& from);

  inline ReductionParameter& operator=(const ReductionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReductionParameter& default_instance();

  void Swap(ReductionParameter* other);

  // implements Message ----------------------------------------------

  ReductionParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReductionParameter& from);
  void MergeFrom(const ReductionParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReductionParameter_ReductionOp ReductionOp;
  static const ReductionOp SUM = ReductionParameter_ReductionOp_SUM;
  static const ReductionOp ASUM = ReductionParameter_ReductionOp_ASUM;
  static const ReductionOp SUMSQ = ReductionParameter_ReductionOp_SUMSQ;
  static const ReductionOp MEAN = ReductionParameter_ReductionOp_MEAN;
  static inline bool ReductionOp_IsValid(int value) {
    return ReductionParameter_ReductionOp_IsValid(value);
  }
  static const ReductionOp ReductionOp_MIN =
    ReductionParameter_ReductionOp_ReductionOp_MIN;
  static const ReductionOp ReductionOp_MAX =
    ReductionParameter_ReductionOp_ReductionOp_MAX;
  static const int ReductionOp_ARRAYSIZE =
    ReductionParameter_ReductionOp_ReductionOp_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ReductionOp_descriptor() {
    return ReductionParameter_ReductionOp_descriptor();
  }
  static inline const ::std::string& ReductionOp_Name(ReductionOp value) {
    return ReductionParameter_ReductionOp_Name(value);
  }
  static inline bool ReductionOp_Parse(const ::std::string& name,
      ReductionOp* value) {
    return ReductionParameter_ReductionOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
  inline bool has_operation() const;
  inline void clear_operation();
  static const int kOperationFieldNumber = 1;
  inline ::caffe::ReductionParameter_ReductionOp operation() const;
  inline void set_operation(::caffe::ReductionParameter_ReductionOp value);

  // optional int32 axis = 2 [default = 0];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 2;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional float coeff = 3 [default = 1];
  inline bool has_coeff() const;
  inline void clear_coeff();
  static const int kCoeffFieldNumber = 3;
  inline float coeff() const;
  inline void set_coeff(float value);

  // @@protoc_insertion_point(class_scope:caffe.ReductionParameter)
 private:
  inline void set_has_operation();
  inline void clear_has_operation();
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_coeff();
  inline void clear_has_coeff();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int operation_;
  ::google::protobuf::int32 axis_;
  float coeff_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static ReductionParameter* default_instance_;
};
// -------------------------------------------------------------------

class ReLUParameter : public ::google::protobuf::Message {
 public:
  ReLUParameter();
  virtual ~ReLUParameter();

  ReLUParameter(const ReLUParameter& from);

  inline ReLUParameter& operator=(const ReLUParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReLUParameter& default_instance();

  void Swap(ReLUParameter* other);

  // implements Message ----------------------------------------------

  ReLUParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReLUParameter& from);
  void MergeFrom(const ReLUParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReLUParameter_Engine Engine;
  static const Engine DEFAULT = ReLUParameter_Engine_DEFAULT;
  static const Engine CAFFE = ReLUParameter_Engine_CAFFE;
  static const Engine CUDNN = ReLUParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return ReLUParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    ReLUParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    ReLUParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    ReLUParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return ReLUParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return ReLUParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return ReLUParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional float negative_slope = 1 [default = 0];
  inline bool has_negative_slope() const;
  inline void clear_negative_slope();
  static const int kNegativeSlopeFieldNumber = 1;
  inline float negative_slope() const;
  inline void set_negative_slope(float value);

  // optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
  inline bool has_engine() const;
  inline void clear_engine();
  static const int kEngineFieldNumber = 2;
  inline ::caffe::ReLUParameter_Engine engine() const;
  inline void set_engine(::caffe::ReLUParameter_Engine value);

  // @@protoc_insertion_point(class_scope:caffe.ReLUParameter)
 private:
  inline void set_has_negative_slope();
  inline void clear_has_negative_slope();
  inline void set_has_engine();
  inline void clear_has_engine();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float negative_slope_;
  int engine_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static ReLUParameter* default_instance_;
};
// -------------------------------------------------------------------

class ReshapeParameter : public ::google::protobuf::Message {
 public:
  ReshapeParameter();
  virtual ~ReshapeParameter();

  ReshapeParameter(const ReshapeParameter& from);

  inline ReshapeParameter& operator=(const ReshapeParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReshapeParameter& default_instance();

  void Swap(ReshapeParameter* other);

  // implements Message ----------------------------------------------

  ReshapeParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReshapeParameter& from);
  void MergeFrom(const ReshapeParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.BlobShape shape = 1;
  inline bool has_shape() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 1;
  inline const ::caffe::BlobShape& shape() const;
  inline ::caffe::BlobShape* mutable_shape();
  inline ::caffe::BlobShape* release_shape();
  inline void set_allocated_shape(::caffe::BlobShape* shape);

  // optional int32 axis = 2 [default = 0];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 2;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional int32 num_axes = 3 [default = -1];
  inline bool has_num_axes() const;
  inline void clear_num_axes();
  static const int kNumAxesFieldNumber = 3;
  inline ::google::protobuf::int32 num_axes() const;
  inline void set_num_axes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.ReshapeParameter)
 private:
  inline void set_has_shape();
  inline void clear_has_shape();
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_num_axes();
  inline void clear_has_num_axes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::caffe::BlobShape* shape_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 num_axes_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static ReshapeParameter* default_instance_;
};
// -------------------------------------------------------------------

class ScaleParameter : public ::google::protobuf::Message {
 public:
  ScaleParameter();
  virtual ~ScaleParameter();

  ScaleParameter(const ScaleParameter& from);

  inline ScaleParameter& operator=(const ScaleParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScaleParameter& default_instance();

  void Swap(ScaleParameter* other);

  // implements Message ----------------------------------------------

  ScaleParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScaleParameter& from);
  void MergeFrom(const ScaleParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 1 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 1;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional int32 num_axes = 2 [default = 1];
  inline bool has_num_axes() const;
  inline void clear_num_axes();
  static const int kNumAxesFieldNumber = 2;
  inline ::google::protobuf::int32 num_axes() const;
  inline void set_num_axes(::google::protobuf::int32 value);

  // optional .caffe.FillerParameter filler = 3;
  inline bool has_filler() const;
  inline void clear_filler();
  static const int kFillerFieldNumber = 3;
  inline const ::caffe::FillerParameter& filler() const;
  inline ::caffe::FillerParameter* mutable_filler();
  inline ::caffe::FillerParameter* release_filler();
  inline void set_allocated_filler(::caffe::FillerParameter* filler);

  // optional bool bias_term = 4 [default = false];
  inline bool has_bias_term() const;
  inline void clear_bias_term();
  static const int kBiasTermFieldNumber = 4;
  inline bool bias_term() const;
  inline void set_bias_term(bool value);

  // optional .caffe.FillerParameter bias_filler = 5;
  inline bool has_bias_filler() const;
  inline void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 5;
  inline const ::caffe::FillerParameter& bias_filler() const;
  inline ::caffe::FillerParameter* mutable_bias_filler();
  inline ::caffe::FillerParameter* release_bias_filler();
  inline void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // @@protoc_insertion_point(class_scope:caffe.ScaleParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_num_axes();
  inline void clear_has_num_axes();
  inline void set_has_filler();
  inline void clear_has_filler();
  inline void set_has_bias_term();
  inline void clear_has_bias_term();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 num_axes_;
  ::caffe::FillerParameter* filler_;
  ::caffe::FillerParameter* bias_filler_;
  bool bias_term_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static ScaleParameter* default_instance_;
};
// -------------------------------------------------------------------

class SigmoidParameter : public ::google::protobuf::Message {
 public:
  SigmoidParameter();
  virtual ~SigmoidParameter();

  SigmoidParameter(const SigmoidParameter& from);

  inline SigmoidParameter& operator=(const SigmoidParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SigmoidParameter& default_instance();

  void Swap(SigmoidParameter* other);

  // implements Message ----------------------------------------------

  SigmoidParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SigmoidParameter& from);
  void MergeFrom(const SigmoidParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SigmoidParameter_Engine Engine;
  static const Engine DEFAULT = SigmoidParameter_Engine_DEFAULT;
  static const Engine CAFFE = SigmoidParameter_Engine_CAFFE;
  static const Engine CUDNN = SigmoidParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return SigmoidParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    SigmoidParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    SigmoidParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    SigmoidParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return SigmoidParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return SigmoidParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return SigmoidParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
  inline bool has_engine() const;
  inline void clear_engine();
  static const int kEngineFieldNumber = 1;
  inline ::caffe::SigmoidParameter_Engine engine() const;
  inline void set_engine(::caffe::SigmoidParameter_Engine value);

  // @@protoc_insertion_point(class_scope:caffe.SigmoidParameter)
 private:
  inline void set_has_engine();
  inline void clear_has_engine();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int engine_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static SigmoidParameter* default_instance_;
};
// -------------------------------------------------------------------

class SliceParameter : public ::google::protobuf::Message {
 public:
  SliceParameter();
  virtual ~SliceParameter();

  SliceParameter(const SliceParameter& from);

  inline SliceParameter& operator=(const SliceParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SliceParameter& default_instance();

  void Swap(SliceParameter* other);

  // implements Message ----------------------------------------------

  SliceParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SliceParameter& from);
  void MergeFrom(const SliceParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 3 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 3;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // repeated uint32 slice_point = 2;
  inline int slice_point_size() const;
  inline void clear_slice_point();
  static const int kSlicePointFieldNumber = 2;
  inline ::google::protobuf::uint32 slice_point(int index) const;
  inline void set_slice_point(int index, ::google::protobuf::uint32 value);
  inline void add_slice_point(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      slice_point() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_slice_point();

  // optional uint32 slice_dim = 1 [default = 1];
  inline bool has_slice_dim() const;
  inline void clear_slice_dim();
  static const int kSliceDimFieldNumber = 1;
  inline ::google::protobuf::uint32 slice_dim() const;
  inline void set_slice_dim(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.SliceParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_slice_dim();
  inline void clear_has_slice_dim();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > slice_point_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::uint32 slice_dim_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static SliceParameter* default_instance_;
};
// -------------------------------------------------------------------

class SoftmaxParameter : public ::google::protobuf::Message {
 public:
  SoftmaxParameter();
  virtual ~SoftmaxParameter();

  SoftmaxParameter(const SoftmaxParameter& from);

  inline SoftmaxParameter& operator=(const SoftmaxParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SoftmaxParameter& default_instance();

  void Swap(SoftmaxParameter* other);

  // implements Message ----------------------------------------------

  SoftmaxParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SoftmaxParameter& from);
  void MergeFrom(const SoftmaxParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SoftmaxParameter_Engine Engine;
  static const Engine DEFAULT = SoftmaxParameter_Engine_DEFAULT;
  static const Engine CAFFE = SoftmaxParameter_Engine_CAFFE;
  static const Engine CUDNN = SoftmaxParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return SoftmaxParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    SoftmaxParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    SoftmaxParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    SoftmaxParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return SoftmaxParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return SoftmaxParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return SoftmaxParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
  inline bool has_engine() const;
  inline void clear_engine();
  static const int kEngineFieldNumber = 1;
  inline ::caffe::SoftmaxParameter_Engine engine() const;
  inline void set_engine(::caffe::SoftmaxParameter_Engine value);

  // optional int32 axis = 2 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 2;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.SoftmaxParameter)
 private:
  inline void set_has_engine();
  inline void clear_has_engine();
  inline void set_has_axis();
  inline void clear_has_axis();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int engine_;
  ::google::protobuf::int32 axis_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static SoftmaxParameter* default_instance_;
};
// -------------------------------------------------------------------

class TanHParameter : public ::google::protobuf::Message {
 public:
  TanHParameter();
  virtual ~TanHParameter();

  TanHParameter(const TanHParameter& from);

  inline TanHParameter& operator=(const TanHParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TanHParameter& default_instance();

  void Swap(TanHParameter* other);

  // implements Message ----------------------------------------------

  TanHParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TanHParameter& from);
  void MergeFrom(const TanHParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TanHParameter_Engine Engine;
  static const Engine DEFAULT = TanHParameter_Engine_DEFAULT;
  static const Engine CAFFE = TanHParameter_Engine_CAFFE;
  static const Engine CUDNN = TanHParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return TanHParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    TanHParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    TanHParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    TanHParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return TanHParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return TanHParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return TanHParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
  inline bool has_engine() const;
  inline void clear_engine();
  static const int kEngineFieldNumber = 1;
  inline ::caffe::TanHParameter_Engine engine() const;
  inline void set_engine(::caffe::TanHParameter_Engine value);

  // @@protoc_insertion_point(class_scope:caffe.TanHParameter)
 private:
  inline void set_has_engine();
  inline void clear_has_engine();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int engine_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static TanHParameter* default_instance_;
};
// -------------------------------------------------------------------

class TileParameter : public ::google::protobuf::Message {
 public:
  TileParameter();
  virtual ~TileParameter();

  TileParameter(const TileParameter& from);

  inline TileParameter& operator=(const TileParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TileParameter& default_instance();

  void Swap(TileParameter* other);

  // implements Message ----------------------------------------------

  TileParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TileParameter& from);
  void MergeFrom(const TileParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 1 [default = 1];
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 1;
  inline ::google::protobuf::int32 axis() const;
  inline void set_axis(::google::protobuf::int32 value);

  // optional int32 tiles = 2;
  inline bool has_tiles() const;
  inline void clear_tiles();
  static const int kTilesFieldNumber = 2;
  inline ::google::protobuf::int32 tiles() const;
  inline void set_tiles(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.TileParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_tiles();
  inline void clear_has_tiles();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 tiles_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static TileParameter* default_instance_;
};
// -------------------------------------------------------------------

class ThresholdParameter : public ::google::protobuf::Message {
 public:
  ThresholdParameter();
  virtual ~ThresholdParameter();

  ThresholdParameter(const ThresholdParameter& from);

  inline ThresholdParameter& operator=(const ThresholdParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ThresholdParameter& default_instance();

  void Swap(ThresholdParameter* other);

  // implements Message ----------------------------------------------

  ThresholdParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ThresholdParameter& from);
  void MergeFrom(const ThresholdParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float threshold = 1 [default = 0];
  inline bool has_threshold() const;
  inline void clear_threshold();
  static const int kThresholdFieldNumber = 1;
  inline float threshold() const;
  inline void set_threshold(float value);

  // @@protoc_insertion_point(class_scope:caffe.ThresholdParameter)
 private:
  inline void set_has_threshold();
  inline void clear_has_threshold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float threshold_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static ThresholdParameter* default_instance_;
};
// -------------------------------------------------------------------

class WindowDataParameter : public ::google::protobuf::Message {
 public:
  WindowDataParameter();
  virtual ~WindowDataParameter();

  WindowDataParameter(const WindowDataParameter& from);

  inline WindowDataParameter& operator=(const WindowDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WindowDataParameter& default_instance();

  void Swap(WindowDataParameter* other);

  // implements Message ----------------------------------------------

  WindowDataParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WindowDataParameter& from);
  void MergeFrom(const WindowDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 1;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // optional float scale = 2 [default = 1];
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 2;
  inline float scale() const;
  inline void set_scale(float value);

  // optional string mean_file = 3;
  inline bool has_mean_file() const;
  inline void clear_mean_file();
  static const int kMeanFileFieldNumber = 3;
  inline const ::std::string& mean_file() const;
  inline void set_mean_file(const ::std::string& value);
  inline void set_mean_file(const char* value);
  inline void set_mean_file(const char* value, size_t size);
  inline ::std::string* mutable_mean_file();
  inline ::std::string* release_mean_file();
  inline void set_allocated_mean_file(::std::string* mean_file);

  // optional uint32 batch_size = 4;
  inline bool has_batch_size() const;
  inline void clear_batch_size();
  static const int kBatchSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 batch_size() const;
  inline void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 crop_size = 5 [default = 0];
  inline bool has_crop_size() const;
  inline void clear_crop_size();
  static const int kCropSizeFieldNumber = 5;
  inline ::google::protobuf::uint32 crop_size() const;
  inline void set_crop_size(::google::protobuf::uint32 value);

  // optional bool mirror = 6 [default = false];
  inline bool has_mirror() const;
  inline void clear_mirror();
  static const int kMirrorFieldNumber = 6;
  inline bool mirror() const;
  inline void set_mirror(bool value);

  // optional float fg_threshold = 7 [default = 0.5];
  inline bool has_fg_threshold() const;
  inline void clear_fg_threshold();
  static const int kFgThresholdFieldNumber = 7;
  inline float fg_threshold() const;
  inline void set_fg_threshold(float value);

  // optional float bg_threshold = 8 [default = 0.5];
  inline bool has_bg_threshold() const;
  inline void clear_bg_threshold();
  static const int kBgThresholdFieldNumber = 8;
  inline float bg_threshold() const;
  inline void set_bg_threshold(float value);

  // optional float fg_fraction = 9 [default = 0.25];
  inline bool has_fg_fraction() const;
  inline void clear_fg_fraction();
  static const int kFgFractionFieldNumber = 9;
  inline float fg_fraction() const;
  inline void set_fg_fraction(float value);

  // optional uint32 context_pad = 10 [default = 0];
  inline bool has_context_pad() const;
  inline void clear_context_pad();
  static const int kContextPadFieldNumber = 10;
  inline ::google::protobuf::uint32 context_pad() const;
  inline void set_context_pad(::google::protobuf::uint32 value);

  // optional string crop_mode = 11 [default = "warp"];
  inline bool has_crop_mode() const;
  inline void clear_crop_mode();
  static const int kCropModeFieldNumber = 11;
  inline const ::std::string& crop_mode() const;
  inline void set_crop_mode(const ::std::string& value);
  inline void set_crop_mode(const char* value);
  inline void set_crop_mode(const char* value, size_t size);
  inline ::std::string* mutable_crop_mode();
  inline ::std::string* release_crop_mode();
  inline void set_allocated_crop_mode(::std::string* crop_mode);

  // optional bool cache_images = 12 [default = false];
  inline bool has_cache_images() const;
  inline void clear_cache_images();
  static const int kCacheImagesFieldNumber = 12;
  inline bool cache_images() const;
  inline void set_cache_images(bool value);

  // optional string root_folder = 13 [default = ""];
  inline bool has_root_folder() const;
  inline void clear_root_folder();
  static const int kRootFolderFieldNumber = 13;
  inline const ::std::string& root_folder() const;
  inline void set_root_folder(const ::std::string& value);
  inline void set_root_folder(const char* value);
  inline void set_root_folder(const char* value, size_t size);
  inline ::std::string* mutable_root_folder();
  inline ::std::string* release_root_folder();
  inline void set_allocated_root_folder(::std::string* root_folder);

  // @@protoc_insertion_point(class_scope:caffe.WindowDataParameter)
 private:
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_mean_file();
  inline void clear_has_mean_file();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_crop_size();
  inline void clear_has_crop_size();
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_fg_threshold();
  inline void clear_has_fg_threshold();
  inline void set_has_bg_threshold();
  inline void clear_has_bg_threshold();
  inline void set_has_fg_fraction();
  inline void clear_has_fg_fraction();
  inline void set_has_context_pad();
  inline void clear_has_context_pad();
  inline void set_has_crop_mode();
  inline void clear_has_crop_mode();
  inline void set_has_cache_images();
  inline void clear_has_cache_images();
  inline void set_has_root_folder();
  inline void clear_has_root_folder();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* source_;
  ::std::string* mean_file_;
  float scale_;
  ::google::protobuf::uint32 batch_size_;
  ::google::protobuf::uint32 crop_size_;
  float fg_threshold_;
  float bg_threshold_;
  float fg_fraction_;
  bool mirror_;
  bool cache_images_;
  ::google::protobuf::uint32 context_pad_;
  static ::std::string* _default_crop_mode_;
  ::std::string* crop_mode_;
  ::std::string* root_folder_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static WindowDataParameter* default_instance_;
};
// -------------------------------------------------------------------

class SPPParameter : public ::google::protobuf::Message {
 public:
  SPPParameter();
  virtual ~SPPParameter();

  SPPParameter(const SPPParameter& from);

  inline SPPParameter& operator=(const SPPParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SPPParameter& default_instance();

  void Swap(SPPParameter* other);

  // implements Message ----------------------------------------------

  SPPParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SPPParameter& from);
  void MergeFrom(const SPPParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SPPParameter_PoolMethod PoolMethod;
  static const PoolMethod MAX = SPPParameter_PoolMethod_MAX;
  static const PoolMethod AVE = SPPParameter_PoolMethod_AVE;
  static const PoolMethod STOCHASTIC = SPPParameter_PoolMethod_STOCHASTIC;
  static inline bool PoolMethod_IsValid(int value) {
    return SPPParameter_PoolMethod_IsValid(value);
  }
  static const PoolMethod PoolMethod_MIN =
    SPPParameter_PoolMethod_PoolMethod_MIN;
  static const PoolMethod PoolMethod_MAX =
    SPPParameter_PoolMethod_PoolMethod_MAX;
  static const int PoolMethod_ARRAYSIZE =
    SPPParameter_PoolMethod_PoolMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PoolMethod_descriptor() {
    return SPPParameter_PoolMethod_descriptor();
  }
  static inline const ::std::string& PoolMethod_Name(PoolMethod value) {
    return SPPParameter_PoolMethod_Name(value);
  }
  static inline bool PoolMethod_Parse(const ::std::string& name,
      PoolMethod* value) {
    return SPPParameter_PoolMethod_Parse(name, value);
  }

  typedef SPPParameter_Engine Engine;
  static const Engine DEFAULT = SPPParameter_Engine_DEFAULT;
  static const Engine CAFFE = SPPParameter_Engine_CAFFE;
  static const Engine CUDNN = SPPParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return SPPParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    SPPParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    SPPParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    SPPParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return SPPParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return SPPParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return SPPParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 pyramid_height = 1;
  inline bool has_pyramid_height() const;
  inline void clear_pyramid_height();
  static const int kPyramidHeightFieldNumber = 1;
  inline ::google::protobuf::uint32 pyramid_height() const;
  inline void set_pyramid_height(::google::protobuf::uint32 value);

  // optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
  inline bool has_pool() const;
  inline void clear_pool();
  static const int kPoolFieldNumber = 2;
  inline ::caffe::SPPParameter_PoolMethod pool() const;
  inline void set_pool(::caffe::SPPParameter_PoolMethod value);

  // optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
  inline bool has_engine() const;
  inline void clear_engine();
  static const int kEngineFieldNumber = 6;
  inline ::caffe::SPPParameter_Engine engine() const;
  inline void set_engine(::caffe::SPPParameter_Engine value);

  // @@protoc_insertion_point(class_scope:caffe.SPPParameter)
 private:
  inline void set_has_pyramid_height();
  inline void clear_has_pyramid_height();
  inline void set_has_pool();
  inline void clear_has_pool();
  inline void set_has_engine();
  inline void clear_has_engine();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 pyramid_height_;
  int pool_;
  int engine_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static SPPParameter* default_instance_;
};
// -------------------------------------------------------------------

class V1LayerParameter : public ::google::protobuf::Message {
 public:
  V1LayerParameter();
  virtual ~V1LayerParameter();

  V1LayerParameter(const V1LayerParameter& from);

  inline V1LayerParameter& operator=(const V1LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const V1LayerParameter& default_instance();

  void Swap(V1LayerParameter* other);

  // implements Message ----------------------------------------------

  V1LayerParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const V1LayerParameter& from);
  void MergeFrom(const V1LayerParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef V1LayerParameter_LayerType LayerType;
  static const LayerType NONE = V1LayerParameter_LayerType_NONE;
  static const LayerType ABSVAL = V1LayerParameter_LayerType_ABSVAL;
  static const LayerType ACCURACY = V1LayerParameter_LayerType_ACCURACY;
  static const LayerType ARGMAX = V1LayerParameter_LayerType_ARGMAX;
  static const LayerType BNLL = V1LayerParameter_LayerType_BNLL;
  static const LayerType CONCAT = V1LayerParameter_LayerType_CONCAT;
  static const LayerType CONTRASTIVE_LOSS = V1LayerParameter_LayerType_CONTRASTIVE_LOSS;
  static const LayerType CONVOLUTION = V1LayerParameter_LayerType_CONVOLUTION;
  static const LayerType DATA = V1LayerParameter_LayerType_DATA;
  static const LayerType DECONVOLUTION = V1LayerParameter_LayerType_DECONVOLUTION;
  static const LayerType DROPOUT = V1LayerParameter_LayerType_DROPOUT;
  static const LayerType DUMMY_DATA = V1LayerParameter_LayerType_DUMMY_DATA;
  static const LayerType EUCLIDEAN_LOSS = V1LayerParameter_LayerType_EUCLIDEAN_LOSS;
  static const LayerType ELTWISE = V1LayerParameter_LayerType_ELTWISE;
  static const LayerType EXP = V1LayerParameter_LayerType_EXP;
  static const LayerType FLATTEN = V1LayerParameter_LayerType_FLATTEN;
  static const LayerType HDF5_DATA = V1LayerParameter_LayerType_HDF5_DATA;
  static const LayerType HDF5_OUTPUT = V1LayerParameter_LayerType_HDF5_OUTPUT;
  static const LayerType HINGE_LOSS = V1LayerParameter_LayerType_HINGE_LOSS;
  static const LayerType IM2COL = V1LayerParameter_LayerType_IM2COL;
  static const LayerType IMAGE_DATA = V1LayerParameter_LayerType_IMAGE_DATA;
  static const LayerType INFOGAIN_LOSS = V1LayerParameter_LayerType_INFOGAIN_LOSS;
  static const LayerType INNER_PRODUCT = V1LayerParameter_LayerType_INNER_PRODUCT;
  static const LayerType LRN = V1LayerParameter_LayerType_LRN;
  static const LayerType MEMORY_DATA = V1LayerParameter_LayerType_MEMORY_DATA;
  static const LayerType MULTINOMIAL_LOGISTIC_LOSS = V1LayerParameter_LayerType_MULTINOMIAL_LOGISTIC_LOSS;
  static const LayerType MVN = V1LayerParameter_LayerType_MVN;
  static const LayerType POOLING = V1LayerParameter_LayerType_POOLING;
  static const LayerType POWER = V1LayerParameter_LayerType_POWER;
  static const LayerType RELU = V1LayerParameter_LayerType_RELU;
  static const LayerType SIGMOID = V1LayerParameter_LayerType_SIGMOID;
  static const LayerType SIGMOID_CROSS_ENTROPY_LOSS = V1LayerParameter_LayerType_SIGMOID_CROSS_ENTROPY_LOSS;
  static const LayerType SILENCE = V1LayerParameter_LayerType_SILENCE;
  static const LayerType SOFTMAX = V1LayerParameter_LayerType_SOFTMAX;
  static const LayerType SOFTMAX_LOSS = V1LayerParameter_LayerType_SOFTMAX_LOSS;
  static const LayerType SPLIT = V1LayerParameter_LayerType_SPLIT;
  static const LayerType SLICE = V1LayerParameter_LayerType_SLICE;
  static const LayerType TANH = V1LayerParameter_LayerType_TANH;
  static const LayerType WINDOW_DATA = V1LayerParameter_LayerType_WINDOW_DATA;
  static const LayerType THRESHOLD = V1LayerParameter_LayerType_THRESHOLD;
  static inline bool LayerType_IsValid(int value) {
    return V1LayerParameter_LayerType_IsValid(value);
  }
  static const LayerType LayerType_MIN =
    V1LayerParameter_LayerType_LayerType_MIN;
  static const LayerType LayerType_MAX =
    V1LayerParameter_LayerType_LayerType_MAX;
  static const int LayerType_ARRAYSIZE =
    V1LayerParameter_LayerType_LayerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LayerType_descriptor() {
    return V1LayerParameter_LayerType_descriptor();
  }
  static inline const ::std::string& LayerType_Name(LayerType value) {
    return V1LayerParameter_LayerType_Name(value);
  }
  static inline bool LayerType_Parse(const ::std::string& name,
      LayerType* value) {
    return V1LayerParameter_LayerType_Parse(name, value);
  }

  typedef V1LayerParameter_DimCheckMode DimCheckMode;
  static const DimCheckMode STRICT = V1LayerParameter_DimCheckMode_STRICT;
  static const DimCheckMode PERMISSIVE = V1LayerParameter_DimCheckMode_PERMISSIVE;
  static inline bool DimCheckMode_IsValid(int value) {
    return V1LayerParameter_DimCheckMode_IsValid(value);
  }
  static const DimCheckMode DimCheckMode_MIN =
    V1LayerParameter_DimCheckMode_DimCheckMode_MIN;
  static const DimCheckMode DimCheckMode_MAX =
    V1LayerParameter_DimCheckMode_DimCheckMode_MAX;
  static const int DimCheckMode_ARRAYSIZE =
    V1LayerParameter_DimCheckMode_DimCheckMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DimCheckMode_descriptor() {
    return V1LayerParameter_DimCheckMode_descriptor();
  }
  static inline const ::std::string& DimCheckMode_Name(DimCheckMode value) {
    return V1LayerParameter_DimCheckMode_Name(value);
  }
  static inline bool DimCheckMode_Parse(const ::std::string& name,
      DimCheckMode* value) {
    return V1LayerParameter_DimCheckMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string bottom = 2;
  inline int bottom_size() const;
  inline void clear_bottom();
  static const int kBottomFieldNumber = 2;
  inline const ::std::string& bottom(int index) const;
  inline ::std::string* mutable_bottom(int index);
  inline void set_bottom(int index, const ::std::string& value);
  inline void set_bottom(int index, const char* value);
  inline void set_bottom(int index, const char* value, size_t size);
  inline ::std::string* add_bottom();
  inline void add_bottom(const ::std::string& value);
  inline void add_bottom(const char* value);
  inline void add_bottom(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& bottom() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bottom();

  // repeated string top = 3;
  inline int top_size() const;
  inline void clear_top();
  static const int kTopFieldNumber = 3;
  inline const ::std::string& top(int index) const;
  inline ::std::string* mutable_top(int index);
  inline void set_top(int index, const ::std::string& value);
  inline void set_top(int index, const char* value);
  inline void set_top(int index, const char* value, size_t size);
  inline ::std::string* add_top();
  inline void add_top(const ::std::string& value);
  inline void add_top(const char* value);
  inline void add_top(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& top() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_top();

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .caffe.NetStateRule include = 32;
  inline int include_size() const;
  inline void clear_include();
  static const int kIncludeFieldNumber = 32;
  inline const ::caffe::NetStateRule& include(int index) const;
  inline ::caffe::NetStateRule* mutable_include(int index);
  inline ::caffe::NetStateRule* add_include();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
      include() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
      mutable_include();

  // repeated .caffe.NetStateRule exclude = 33;
  inline int exclude_size() const;
  inline void clear_exclude();
  static const int kExcludeFieldNumber = 33;
  inline const ::caffe::NetStateRule& exclude(int index) const;
  inline ::caffe::NetStateRule* mutable_exclude(int index);
  inline ::caffe::NetStateRule* add_exclude();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
      exclude() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
      mutable_exclude();

  // optional .caffe.V1LayerParameter.LayerType type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::caffe::V1LayerParameter_LayerType type() const;
  inline void set_type(::caffe::V1LayerParameter_LayerType value);

  // repeated .caffe.BlobProto blobs = 6;
  inline int blobs_size() const;
  inline void clear_blobs();
  static const int kBlobsFieldNumber = 6;
  inline const ::caffe::BlobProto& blobs(int index) const;
  inline ::caffe::BlobProto* mutable_blobs(int index);
  inline ::caffe::BlobProto* add_blobs();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
      blobs() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
      mutable_blobs();

  // repeated string param = 1001;
  inline int param_size() const;
  inline void clear_param();
  static const int kParamFieldNumber = 1001;
  inline const ::std::string& param(int index) const;
  inline ::std::string* mutable_param(int index);
  inline void set_param(int index, const ::std::string& value);
  inline void set_param(int index, const char* value);
  inline void set_param(int index, const char* value, size_t size);
  inline ::std::string* add_param();
  inline void add_param(const ::std::string& value);
  inline void add_param(const char* value);
  inline void add_param(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& param() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_param();

  // repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
  inline int blob_share_mode_size() const;
  inline void clear_blob_share_mode();
  static const int kBlobShareModeFieldNumber = 1002;
  inline ::caffe::V1LayerParameter_DimCheckMode blob_share_mode(int index) const;
  inline void set_blob_share_mode(int index, ::caffe::V1LayerParameter_DimCheckMode value);
  inline void add_blob_share_mode(::caffe::V1LayerParameter_DimCheckMode value);
  inline const ::google::protobuf::RepeatedField<int>& blob_share_mode() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_blob_share_mode();

  // repeated float blobs_lr = 7;
  inline int blobs_lr_size() const;
  inline void clear_blobs_lr();
  static const int kBlobsLrFieldNumber = 7;
  inline float blobs_lr(int index) const;
  inline void set_blobs_lr(int index, float value);
  inline void add_blobs_lr(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      blobs_lr() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_blobs_lr();

  // repeated float weight_decay = 8;
  inline int weight_decay_size() const;
  inline void clear_weight_decay();
  static const int kWeightDecayFieldNumber = 8;
  inline float weight_decay(int index) const;
  inline void set_weight_decay(int index, float value);
  inline void add_weight_decay(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      weight_decay() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_weight_decay();

  // repeated float loss_weight = 35;
  inline int loss_weight_size() const;
  inline void clear_loss_weight();
  static const int kLossWeightFieldNumber = 35;
  inline float loss_weight(int index) const;
  inline void set_loss_weight(int index, float value);
  inline void add_loss_weight(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      loss_weight() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_loss_weight();

  // optional .caffe.AccuracyParameter accuracy_param = 27;
  inline bool has_accuracy_param() const;
  inline void clear_accuracy_param();
  static const int kAccuracyParamFieldNumber = 27;
  inline const ::caffe::AccuracyParameter& accuracy_param() const;
  inline ::caffe::AccuracyParameter* mutable_accuracy_param();
  inline ::caffe::AccuracyParameter* release_accuracy_param();
  inline void set_allocated_accuracy_param(::caffe::AccuracyParameter* accuracy_param);

  // optional .caffe.ArgMaxParameter argmax_param = 23;
  inline bool has_argmax_param() const;
  inline void clear_argmax_param();
  static const int kArgmaxParamFieldNumber = 23;
  inline const ::caffe::ArgMaxParameter& argmax_param() const;
  inline ::caffe::ArgMaxParameter* mutable_argmax_param();
  inline ::caffe::ArgMaxParameter* release_argmax_param();
  inline void set_allocated_argmax_param(::caffe::ArgMaxParameter* argmax_param);

  // optional .caffe.ConcatParameter concat_param = 9;
  inline bool has_concat_param() const;
  inline void clear_concat_param();
  static const int kConcatParamFieldNumber = 9;
  inline const ::caffe::ConcatParameter& concat_param() const;
  inline ::caffe::ConcatParameter* mutable_concat_param();
  inline ::caffe::ConcatParameter* release_concat_param();
  inline void set_allocated_concat_param(::caffe::ConcatParameter* concat_param);

  // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
  inline bool has_contrastive_loss_param() const;
  inline void clear_contrastive_loss_param();
  static const int kContrastiveLossParamFieldNumber = 40;
  inline const ::caffe::ContrastiveLossParameter& contrastive_loss_param() const;
  inline ::caffe::ContrastiveLossParameter* mutable_contrastive_loss_param();
  inline ::caffe::ContrastiveLossParameter* release_contrastive_loss_param();
  inline void set_allocated_contrastive_loss_param(::caffe::ContrastiveLossParameter* contrastive_loss_param);

  // optional .caffe.ConvolutionParameter convolution_param = 10;
  inline bool has_convolution_param() const;
  inline void clear_convolution_param();
  static const int kConvolutionParamFieldNumber = 10;
  inline const ::caffe::ConvolutionParameter& convolution_param() const;
  inline ::caffe::ConvolutionParameter* mutable_convolution_param();
  inline ::caffe::ConvolutionParameter* release_convolution_param();
  inline void set_allocated_convolution_param(::caffe::ConvolutionParameter* convolution_param);

  // optional .caffe.DataParameter data_param = 11;
  inline bool has_data_param() const;
  inline void clear_data_param();
  static const int kDataParamFieldNumber = 11;
  inline const ::caffe::DataParameter& data_param() const;
  inline ::caffe::DataParameter* mutable_data_param();
  inline ::caffe::DataParameter* release_data_param();
  inline void set_allocated_data_param(::caffe::DataParameter* data_param);

  // optional .caffe.DropoutParameter dropout_param = 12;
  inline bool has_dropout_param() const;
  inline void clear_dropout_param();
  static const int kDropoutParamFieldNumber = 12;
  inline const ::caffe::DropoutParameter& dropout_param() const;
  inline ::caffe::DropoutParameter* mutable_dropout_param();
  inline ::caffe::DropoutParameter* release_dropout_param();
  inline void set_allocated_dropout_param(::caffe::DropoutParameter* dropout_param);

  // optional .caffe.DummyDataParameter dummy_data_param = 26;
  inline bool has_dummy_data_param() const;
  inline void clear_dummy_data_param();
  static const int kDummyDataParamFieldNumber = 26;
  inline const ::caffe::DummyDataParameter& dummy_data_param() const;
  inline ::caffe::DummyDataParameter* mutable_dummy_data_param();
  inline ::caffe::DummyDataParameter* release_dummy_data_param();
  inline void set_allocated_dummy_data_param(::caffe::DummyDataParameter* dummy_data_param);

  // optional .caffe.EltwiseParameter eltwise_param = 24;
  inline bool has_eltwise_param() const;
  inline void clear_eltwise_param();
  static const int kEltwiseParamFieldNumber = 24;
  inline const ::caffe::EltwiseParameter& eltwise_param() const;
  inline ::caffe::EltwiseParameter* mutable_eltwise_param();
  inline ::caffe::EltwiseParameter* release_eltwise_param();
  inline void set_allocated_eltwise_param(::caffe::EltwiseParameter* eltwise_param);

  // optional .caffe.ExpParameter exp_param = 41;
  inline bool has_exp_param() const;
  inline void clear_exp_param();
  static const int kExpParamFieldNumber = 41;
  inline const ::caffe::ExpParameter& exp_param() const;
  inline ::caffe::ExpParameter* mutable_exp_param();
  inline ::caffe::ExpParameter* release_exp_param();
  inline void set_allocated_exp_param(::caffe::ExpParameter* exp_param);

  // optional .caffe.HDF5DataParameter hdf5_data_param = 13;
  inline bool has_hdf5_data_param() const;
  inline void clear_hdf5_data_param();
  static const int kHdf5DataParamFieldNumber = 13;
  inline const ::caffe::HDF5DataParameter& hdf5_data_param() const;
  inline ::caffe::HDF5DataParameter* mutable_hdf5_data_param();
  inline ::caffe::HDF5DataParameter* release_hdf5_data_param();
  inline void set_allocated_hdf5_data_param(::caffe::HDF5DataParameter* hdf5_data_param);

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
  inline bool has_hdf5_output_param() const;
  inline void clear_hdf5_output_param();
  static const int kHdf5OutputParamFieldNumber = 14;
  inline const ::caffe::HDF5OutputParameter& hdf5_output_param() const;
  inline ::caffe::HDF5OutputParameter* mutable_hdf5_output_param();
  inline ::caffe::HDF5OutputParameter* release_hdf5_output_param();
  inline void set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param);

  // optional .caffe.HingeLossParameter hinge_loss_param = 29;
  inline bool has_hinge_loss_param() const;
  inline void clear_hinge_loss_param();
  static const int kHingeLossParamFieldNumber = 29;
  inline const ::caffe::HingeLossParameter& hinge_loss_param() const;
  inline ::caffe::HingeLossParameter* mutable_hinge_loss_param();
  inline ::caffe::HingeLossParameter* release_hinge_loss_param();
  inline void set_allocated_hinge_loss_param(::caffe::HingeLossParameter* hinge_loss_param);

  // optional .caffe.ImageDataParameter image_data_param = 15;
  inline bool has_image_data_param() const;
  inline void clear_image_data_param();
  static const int kImageDataParamFieldNumber = 15;
  inline const ::caffe::ImageDataParameter& image_data_param() const;
  inline ::caffe::ImageDataParameter* mutable_image_data_param();
  inline ::caffe::ImageDataParameter* release_image_data_param();
  inline void set_allocated_image_data_param(::caffe::ImageDataParameter* image_data_param);

  // optional .caffe.InfogainLossParameter infogain_loss_param = 16;
  inline bool has_infogain_loss_param() const;
  inline void clear_infogain_loss_param();
  static const int kInfogainLossParamFieldNumber = 16;
  inline const ::caffe::InfogainLossParameter& infogain_loss_param() const;
  inline ::caffe::InfogainLossParameter* mutable_infogain_loss_param();
  inline ::caffe::InfogainLossParameter* release_infogain_loss_param();
  inline void set_allocated_infogain_loss_param(::caffe::InfogainLossParameter* infogain_loss_param);

  // optional .caffe.InnerProductParameter inner_product_param = 17;
  inline bool has_inner_product_param() const;
  inline void clear_inner_product_param();
  static const int kInnerProductParamFieldNumber = 17;
  inline const ::caffe::InnerProductParameter& inner_product_param() const;
  inline ::caffe::InnerProductParameter* mutable_inner_product_param();
  inline ::caffe::InnerProductParameter* release_inner_product_param();
  inline void set_allocated_inner_product_param(::caffe::InnerProductParameter* inner_product_param);

  // optional .caffe.LRNParameter lrn_param = 18;
  inline bool has_lrn_param() const;
  inline void clear_lrn_param();
  static const int kLrnParamFieldNumber = 18;
  inline const ::caffe::LRNParameter& lrn_param() const;
  inline ::caffe::LRNParameter* mutable_lrn_param();
  inline ::caffe::LRNParameter* release_lrn_param();
  inline void set_allocated_lrn_param(::caffe::LRNParameter* lrn_param);

  // optional .caffe.MemoryDataParameter memory_data_param = 22;
  inline bool has_memory_data_param() const;
  inline void clear_memory_data_param();
  static const int kMemoryDataParamFieldNumber = 22;
  inline const ::caffe::MemoryDataParameter& memory_data_param() const;
  inline ::caffe::MemoryDataParameter* mutable_memory_data_param();
  inline ::caffe::MemoryDataParameter* release_memory_data_param();
  inline void set_allocated_memory_data_param(::caffe::MemoryDataParameter* memory_data_param);

  // optional .caffe.MVNParameter mvn_param = 34;
  inline bool has_mvn_param() const;
  inline void clear_mvn_param();
  static const int kMvnParamFieldNumber = 34;
  inline const ::caffe::MVNParameter& mvn_param() const;
  inline ::caffe::MVNParameter* mutable_mvn_param();
  inline ::caffe::MVNParameter* release_mvn_param();
  inline void set_allocated_mvn_param(::caffe::MVNParameter* mvn_param);

  // optional .caffe.ParameterParameter parameter_param = 145;
  inline bool has_parameter_param() const;
  inline void clear_parameter_param();
  static const int kParameterParamFieldNumber = 145;
  inline const ::caffe::ParameterParameter& parameter_param() const;
  inline ::caffe::ParameterParameter* mutable_parameter_param();
  inline ::caffe::ParameterParameter* release_parameter_param();
  inline void set_allocated_parameter_param(::caffe::ParameterParameter* parameter_param);

  // optional .caffe.PoolingParameter pooling_param = 19;
  inline bool has_pooling_param() const;
  inline void clear_pooling_param();
  static const int kPoolingParamFieldNumber = 19;
  inline const ::caffe::PoolingParameter& pooling_param() const;
  inline ::caffe::PoolingParameter* mutable_pooling_param();
  inline ::caffe::PoolingParameter* release_pooling_param();
  inline void set_allocated_pooling_param(::caffe::PoolingParameter* pooling_param);

  // optional .caffe.PowerParameter power_param = 21;
  inline bool has_power_param() const;
  inline void clear_power_param();
  static const int kPowerParamFieldNumber = 21;
  inline const ::caffe::PowerParameter& power_param() const;
  inline ::caffe::PowerParameter* mutable_power_param();
  inline ::caffe::PowerParameter* release_power_param();
  inline void set_allocated_power_param(::caffe::PowerParameter* power_param);

  // optional .caffe.ReLUParameter relu_param = 30;
  inline bool has_relu_param() const;
  inline void clear_relu_param();
  static const int kReluParamFieldNumber = 30;
  inline const ::caffe::ReLUParameter& relu_param() const;
  inline ::caffe::ReLUParameter* mutable_relu_param();
  inline ::caffe::ReLUParameter* release_relu_param();
  inline void set_allocated_relu_param(::caffe::ReLUParameter* relu_param);

  // optional .caffe.SigmoidParameter sigmoid_param = 38;
  inline bool has_sigmoid_param() const;
  inline void clear_sigmoid_param();
  static const int kSigmoidParamFieldNumber = 38;
  inline const ::caffe::SigmoidParameter& sigmoid_param() const;
  inline ::caffe::SigmoidParameter* mutable_sigmoid_param();
  inline ::caffe::SigmoidParameter* release_sigmoid_param();
  inline void set_allocated_sigmoid_param(::caffe::SigmoidParameter* sigmoid_param);

  // optional .caffe.SoftmaxParameter softmax_param = 39;
  inline bool has_softmax_param() const;
  inline void clear_softmax_param();
  static const int kSoftmaxParamFieldNumber = 39;
  inline const ::caffe::SoftmaxParameter& softmax_param() const;
  inline ::caffe::SoftmaxParameter* mutable_softmax_param();
  inline ::caffe::SoftmaxParameter* release_softmax_param();
  inline void set_allocated_softmax_param(::caffe::SoftmaxParameter* softmax_param);

  // optional .caffe.SliceParameter slice_param = 31;
  inline bool has_slice_param() const;
  inline void clear_slice_param();
  static const int kSliceParamFieldNumber = 31;
  inline const ::caffe::SliceParameter& slice_param() const;
  inline ::caffe::SliceParameter* mutable_slice_param();
  inline ::caffe::SliceParameter* release_slice_param();
  inline void set_allocated_slice_param(::caffe::SliceParameter* slice_param);

  // optional .caffe.TanHParameter tanh_param = 37;
  inline bool has_tanh_param() const;
  inline void clear_tanh_param();
  static const int kTanhParamFieldNumber = 37;
  inline const ::caffe::TanHParameter& tanh_param() const;
  inline ::caffe::TanHParameter* mutable_tanh_param();
  inline ::caffe::TanHParameter* release_tanh_param();
  inline void set_allocated_tanh_param(::caffe::TanHParameter* tanh_param);

  // optional .caffe.ThresholdParameter threshold_param = 25;
  inline bool has_threshold_param() const;
  inline void clear_threshold_param();
  static const int kThresholdParamFieldNumber = 25;
  inline const ::caffe::ThresholdParameter& threshold_param() const;
  inline ::caffe::ThresholdParameter* mutable_threshold_param();
  inline ::caffe::ThresholdParameter* release_threshold_param();
  inline void set_allocated_threshold_param(::caffe::ThresholdParameter* threshold_param);

  // optional .caffe.WindowDataParameter window_data_param = 20;
  inline bool has_window_data_param() const;
  inline void clear_window_data_param();
  static const int kWindowDataParamFieldNumber = 20;
  inline const ::caffe::WindowDataParameter& window_data_param() const;
  inline ::caffe::WindowDataParameter* mutable_window_data_param();
  inline ::caffe::WindowDataParameter* release_window_data_param();
  inline void set_allocated_window_data_param(::caffe::WindowDataParameter* window_data_param);

  // optional .caffe.TransformationParameter transform_param = 36;
  inline bool has_transform_param() const;
  inline void clear_transform_param();
  static const int kTransformParamFieldNumber = 36;
  inline const ::caffe::TransformationParameter& transform_param() const;
  inline ::caffe::TransformationParameter* mutable_transform_param();
  inline ::caffe::TransformationParameter* release_transform_param();
  inline void set_allocated_transform_param(::caffe::TransformationParameter* transform_param);

  // optional .caffe.LossParameter loss_param = 42;
  inline bool has_loss_param() const;
  inline void clear_loss_param();
  static const int kLossParamFieldNumber = 42;
  inline const ::caffe::LossParameter& loss_param() const;
  inline ::caffe::LossParameter* mutable_loss_param();
  inline ::caffe::LossParameter* release_loss_param();
  inline void set_allocated_loss_param(::caffe::LossParameter* loss_param);

  // optional .caffe.V0LayerParameter layer = 1;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 1;
  inline const ::caffe::V0LayerParameter& layer() const;
  inline ::caffe::V0LayerParameter* mutable_layer();
  inline ::caffe::V0LayerParameter* release_layer();
  inline void set_allocated_layer(::caffe::V0LayerParameter* layer);

  // @@protoc_insertion_point(class_scope:caffe.V1LayerParameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_accuracy_param();
  inline void clear_has_accuracy_param();
  inline void set_has_argmax_param();
  inline void clear_has_argmax_param();
  inline void set_has_concat_param();
  inline void clear_has_concat_param();
  inline void set_has_contrastive_loss_param();
  inline void clear_has_contrastive_loss_param();
  inline void set_has_convolution_param();
  inline void clear_has_convolution_param();
  inline void set_has_data_param();
  inline void clear_has_data_param();
  inline void set_has_dropout_param();
  inline void clear_has_dropout_param();
  inline void set_has_dummy_data_param();
  inline void clear_has_dummy_data_param();
  inline void set_has_eltwise_param();
  inline void clear_has_eltwise_param();
  inline void set_has_exp_param();
  inline void clear_has_exp_param();
  inline void set_has_hdf5_data_param();
  inline void clear_has_hdf5_data_param();
  inline void set_has_hdf5_output_param();
  inline void clear_has_hdf5_output_param();
  inline void set_has_hinge_loss_param();
  inline void clear_has_hinge_loss_param();
  inline void set_has_image_data_param();
  inline void clear_has_image_data_param();
  inline void set_has_infogain_loss_param();
  inline void clear_has_infogain_loss_param();
  inline void set_has_inner_product_param();
  inline void clear_has_inner_product_param();
  inline void set_has_lrn_param();
  inline void clear_has_lrn_param();
  inline void set_has_memory_data_param();
  inline void clear_has_memory_data_param();
  inline void set_has_mvn_param();
  inline void clear_has_mvn_param();
  inline void set_has_parameter_param();
  inline void clear_has_parameter_param();
  inline void set_has_pooling_param();
  inline void clear_has_pooling_param();
  inline void set_has_power_param();
  inline void clear_has_power_param();
  inline void set_has_relu_param();
  inline void clear_has_relu_param();
  inline void set_has_sigmoid_param();
  inline void clear_has_sigmoid_param();
  inline void set_has_softmax_param();
  inline void clear_has_softmax_param();
  inline void set_has_slice_param();
  inline void clear_has_slice_param();
  inline void set_has_tanh_param();
  inline void clear_has_tanh_param();
  inline void set_has_threshold_param();
  inline void clear_has_threshold_param();
  inline void set_has_window_data_param();
  inline void clear_has_window_data_param();
  inline void set_has_transform_param();
  inline void clear_has_transform_param();
  inline void set_has_loss_param();
  inline void clear_has_loss_param();
  inline void set_has_layer();
  inline void clear_has_layer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  ::google::protobuf::RepeatedPtrField< ::std::string> bottom_;
  ::google::protobuf::RepeatedPtrField< ::std::string> top_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule > include_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule > exclude_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto > blobs_;
  ::google::protobuf::RepeatedPtrField< ::std::string> param_;
  ::google::protobuf::RepeatedField<int> blob_share_mode_;
  ::google::protobuf::RepeatedField< float > blobs_lr_;
  ::google::protobuf::RepeatedField< float > weight_decay_;
  ::google::protobuf::RepeatedField< float > loss_weight_;
  ::caffe::AccuracyParameter* accuracy_param_;
  ::caffe::ArgMaxParameter* argmax_param_;
  ::caffe::ConcatParameter* concat_param_;
  ::caffe::ContrastiveLossParameter* contrastive_loss_param_;
  ::caffe::ConvolutionParameter* convolution_param_;
  ::caffe::DataParameter* data_param_;
  ::caffe::DropoutParameter* dropout_param_;
  ::caffe::DummyDataParameter* dummy_data_param_;
  ::caffe::EltwiseParameter* eltwise_param_;
  ::caffe::ExpParameter* exp_param_;
  ::caffe::HDF5DataParameter* hdf5_data_param_;
  ::caffe::HDF5OutputParameter* hdf5_output_param_;
  ::caffe::HingeLossParameter* hinge_loss_param_;
  ::caffe::ImageDataParameter* image_data_param_;
  ::caffe::InfogainLossParameter* infogain_loss_param_;
  ::caffe::InnerProductParameter* inner_product_param_;
  ::caffe::LRNParameter* lrn_param_;
  ::caffe::MemoryDataParameter* memory_data_param_;
  ::caffe::MVNParameter* mvn_param_;
  ::caffe::ParameterParameter* parameter_param_;
  ::caffe::PoolingParameter* pooling_param_;
  ::caffe::PowerParameter* power_param_;
  ::caffe::ReLUParameter* relu_param_;
  ::caffe::SigmoidParameter* sigmoid_param_;
  ::caffe::SoftmaxParameter* softmax_param_;
  ::caffe::SliceParameter* slice_param_;
  ::caffe::TanHParameter* tanh_param_;
  ::caffe::ThresholdParameter* threshold_param_;
  ::caffe::WindowDataParameter* window_data_param_;
  ::caffe::TransformationParameter* transform_param_;
  ::caffe::LossParameter* loss_param_;
  ::caffe::V0LayerParameter* layer_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static V1LayerParameter* default_instance_;
};
// -------------------------------------------------------------------

class V0LayerParameter : public ::google::protobuf::Message {
 public:
  V0LayerParameter();
  virtual ~V0LayerParameter();

  V0LayerParameter(const V0LayerParameter& from);

  inline V0LayerParameter& operator=(const V0LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const V0LayerParameter& default_instance();

  void Swap(V0LayerParameter* other);

  // implements Message ----------------------------------------------

  V0LayerParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const V0LayerParameter& from);
  void MergeFrom(const V0LayerParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef V0LayerParameter_PoolMethod PoolMethod;
  static const PoolMethod MAX = V0LayerParameter_PoolMethod_MAX;
  static const PoolMethod AVE = V0LayerParameter_PoolMethod_AVE;
  static const PoolMethod STOCHASTIC = V0LayerParameter_PoolMethod_STOCHASTIC;
  static inline bool PoolMethod_IsValid(int value) {
    return V0LayerParameter_PoolMethod_IsValid(value);
  }
  static const PoolMethod PoolMethod_MIN =
    V0LayerParameter_PoolMethod_PoolMethod_MIN;
  static const PoolMethod PoolMethod_MAX =
    V0LayerParameter_PoolMethod_PoolMethod_MAX;
  static const int PoolMethod_ARRAYSIZE =
    V0LayerParameter_PoolMethod_PoolMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PoolMethod_descriptor() {
    return V0LayerParameter_PoolMethod_descriptor();
  }
  static inline const ::std::string& PoolMethod_Name(PoolMethod value) {
    return V0LayerParameter_PoolMethod_Name(value);
  }
  static inline bool PoolMethod_Parse(const ::std::string& name,
      PoolMethod* value) {
    return V0LayerParameter_PoolMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional uint32 num_output = 3;
  inline bool has_num_output() const;
  inline void clear_num_output();
  static const int kNumOutputFieldNumber = 3;
  inline ::google::protobuf::uint32 num_output() const;
  inline void set_num_output(::google::protobuf::uint32 value);

  // optional bool biasterm = 4 [default = true];
  inline bool has_biasterm() const;
  inline void clear_biasterm();
  static const int kBiastermFieldNumber = 4;
  inline bool biasterm() const;
  inline void set_biasterm(bool value);

  // optional .caffe.FillerParameter weight_filler = 5;
  inline bool has_weight_filler() const;
  inline void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 5;
  inline const ::caffe::FillerParameter& weight_filler() const;
  inline ::caffe::FillerParameter* mutable_weight_filler();
  inline ::caffe::FillerParameter* release_weight_filler();
  inline void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 6;
  inline bool has_bias_filler() const;
  inline void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 6;
  inline const ::caffe::FillerParameter& bias_filler() const;
  inline ::caffe::FillerParameter* mutable_bias_filler();
  inline ::caffe::FillerParameter* release_bias_filler();
  inline void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional uint32 pad = 7 [default = 0];
  inline bool has_pad() const;
  inline void clear_pad();
  static const int kPadFieldNumber = 7;
  inline ::google::protobuf::uint32 pad() const;
  inline void set_pad(::google::protobuf::uint32 value);

  // optional uint32 kernelsize = 8;
  inline bool has_kernelsize() const;
  inline void clear_kernelsize();
  static const int kKernelsizeFieldNumber = 8;
  inline ::google::protobuf::uint32 kernelsize() const;
  inline void set_kernelsize(::google::protobuf::uint32 value);

  // optional uint32 group = 9 [default = 1];
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 9;
  inline ::google::protobuf::uint32 group() const;
  inline void set_group(::google::protobuf::uint32 value);

  // optional uint32 stride = 10 [default = 1];
  inline bool has_stride() const;
  inline void clear_stride();
  static const int kStrideFieldNumber = 10;
  inline ::google::protobuf::uint32 stride() const;
  inline void set_stride(::google::protobuf::uint32 value);

  // optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
  inline bool has_pool() const;
  inline void clear_pool();
  static const int kPoolFieldNumber = 11;
  inline ::caffe::V0LayerParameter_PoolMethod pool() const;
  inline void set_pool(::caffe::V0LayerParameter_PoolMethod value);

  // optional float dropout_ratio = 12 [default = 0.5];
  inline bool has_dropout_ratio() const;
  inline void clear_dropout_ratio();
  static const int kDropoutRatioFieldNumber = 12;
  inline float dropout_ratio() const;
  inline void set_dropout_ratio(float value);

  // optional uint32 local_size = 13 [default = 5];
  inline bool has_local_size() const;
  inline void clear_local_size();
  static const int kLocalSizeFieldNumber = 13;
  inline ::google::protobuf::uint32 local_size() const;
  inline void set_local_size(::google::protobuf::uint32 value);

  // optional float alpha = 14 [default = 1];
  inline bool has_alpha() const;
  inline void clear_alpha();
  static const int kAlphaFieldNumber = 14;
  inline float alpha() const;
  inline void set_alpha(float value);

  // optional float beta = 15 [default = 0.75];
  inline bool has_beta() const;
  inline void clear_beta();
  static const int kBetaFieldNumber = 15;
  inline float beta() const;
  inline void set_beta(float value);

  // optional float k = 22 [default = 1];
  inline bool has_k() const;
  inline void clear_k();
  static const int kKFieldNumber = 22;
  inline float k() const;
  inline void set_k(float value);

  // optional string source = 16;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 16;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // optional float scale = 17 [default = 1];
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 17;
  inline float scale() const;
  inline void set_scale(float value);

  // optional string meanfile = 18;
  inline bool has_meanfile() const;
  inline void clear_meanfile();
  static const int kMeanfileFieldNumber = 18;
  inline const ::std::string& meanfile() const;
  inline void set_meanfile(const ::std::string& value);
  inline void set_meanfile(const char* value);
  inline void set_meanfile(const char* value, size_t size);
  inline ::std::string* mutable_meanfile();
  inline ::std::string* release_meanfile();
  inline void set_allocated_meanfile(::std::string* meanfile);

  // optional uint32 batchsize = 19;
  inline bool has_batchsize() const;
  inline void clear_batchsize();
  static const int kBatchsizeFieldNumber = 19;
  inline ::google::protobuf::uint32 batchsize() const;
  inline void set_batchsize(::google::protobuf::uint32 value);

  // optional uint32 cropsize = 20 [default = 0];
  inline bool has_cropsize() const;
  inline void clear_cropsize();
  static const int kCropsizeFieldNumber = 20;
  inline ::google::protobuf::uint32 cropsize() const;
  inline void set_cropsize(::google::protobuf::uint32 value);

  // optional bool mirror = 21 [default = false];
  inline bool has_mirror() const;
  inline void clear_mirror();
  static const int kMirrorFieldNumber = 21;
  inline bool mirror() const;
  inline void set_mirror(bool value);

  // repeated .caffe.BlobProto blobs = 50;
  inline int blobs_size() const;
  inline void clear_blobs();
  static const int kBlobsFieldNumber = 50;
  inline const ::caffe::BlobProto& blobs(int index) const;
  inline ::caffe::BlobProto* mutable_blobs(int index);
  inline ::caffe::BlobProto* add_blobs();
  inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
      blobs() const;
  inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
      mutable_blobs();

  // repeated float blobs_lr = 51;
  inline int blobs_lr_size() const;
  inline void clear_blobs_lr();
  static const int kBlobsLrFieldNumber = 51;
  inline float blobs_lr(int index) const;
  inline void set_blobs_lr(int index, float value);
  inline void add_blobs_lr(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      blobs_lr() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_blobs_lr();

  // repeated float weight_decay = 52;
  inline int weight_decay_size() const;
  inline void clear_weight_decay();
  static const int kWeightDecayFieldNumber = 52;
  inline float weight_decay(int index) const;
  inline void set_weight_decay(int index, float value);
  inline void add_weight_decay(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      weight_decay() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_weight_decay();

  // optional uint32 rand_skip = 53 [default = 0];
  inline bool has_rand_skip() const;
  inline void clear_rand_skip();
  static const int kRandSkipFieldNumber = 53;
  inline ::google::protobuf::uint32 rand_skip() const;
  inline void set_rand_skip(::google::protobuf::uint32 value);

  // optional float det_fg_threshold = 54 [default = 0.5];
  inline bool has_det_fg_threshold() const;
  inline void clear_det_fg_threshold();
  static const int kDetFgThresholdFieldNumber = 54;
  inline float det_fg_threshold() const;
  inline void set_det_fg_threshold(float value);

  // optional float det_bg_threshold = 55 [default = 0.5];
  inline bool has_det_bg_threshold() const;
  inline void clear_det_bg_threshold();
  static const int kDetBgThresholdFieldNumber = 55;
  inline float det_bg_threshold() const;
  inline void set_det_bg_threshold(float value);

  // optional float det_fg_fraction = 56 [default = 0.25];
  inline bool has_det_fg_fraction() const;
  inline void clear_det_fg_fraction();
  static const int kDetFgFractionFieldNumber = 56;
  inline float det_fg_fraction() const;
  inline void set_det_fg_fraction(float value);

  // optional uint32 det_context_pad = 58 [default = 0];
  inline bool has_det_context_pad() const;
  inline void clear_det_context_pad();
  static const int kDetContextPadFieldNumber = 58;
  inline ::google::protobuf::uint32 det_context_pad() const;
  inline void set_det_context_pad(::google::protobuf::uint32 value);

  // optional string det_crop_mode = 59 [default = "warp"];
  inline bool has_det_crop_mode() const;
  inline void clear_det_crop_mode();
  static const int kDetCropModeFieldNumber = 59;
  inline const ::std::string& det_crop_mode() const;
  inline void set_det_crop_mode(const ::std::string& value);
  inline void set_det_crop_mode(const char* value);
  inline void set_det_crop_mode(const char* value, size_t size);
  inline ::std::string* mutable_det_crop_mode();
  inline ::std::string* release_det_crop_mode();
  inline void set_allocated_det_crop_mode(::std::string* det_crop_mode);

  // optional int32 new_num = 60 [default = 0];
  inline bool has_new_num() const;
  inline void clear_new_num();
  static const int kNewNumFieldNumber = 60;
  inline ::google::protobuf::int32 new_num() const;
  inline void set_new_num(::google::protobuf::int32 value);

  // optional int32 new_channels = 61 [default = 0];
  inline bool has_new_channels() const;
  inline void clear_new_channels();
  static const int kNewChannelsFieldNumber = 61;
  inline ::google::protobuf::int32 new_channels() const;
  inline void set_new_channels(::google::protobuf::int32 value);

  // optional int32 new_height = 62 [default = 0];
  inline bool has_new_height() const;
  inline void clear_new_height();
  static const int kNewHeightFieldNumber = 62;
  inline ::google::protobuf::int32 new_height() const;
  inline void set_new_height(::google::protobuf::int32 value);

  // optional int32 new_width = 63 [default = 0];
  inline bool has_new_width() const;
  inline void clear_new_width();
  static const int kNewWidthFieldNumber = 63;
  inline ::google::protobuf::int32 new_width() const;
  inline void set_new_width(::google::protobuf::int32 value);

  // optional bool shuffle_images = 64 [default = false];
  inline bool has_shuffle_images() const;
  inline void clear_shuffle_images();
  static const int kShuffleImagesFieldNumber = 64;
  inline bool shuffle_images() const;
  inline void set_shuffle_images(bool value);

  // optional uint32 concat_dim = 65 [default = 1];
  inline bool has_concat_dim() const;
  inline void clear_concat_dim();
  static const int kConcatDimFieldNumber = 65;
  inline ::google::protobuf::uint32 concat_dim() const;
  inline void set_concat_dim(::google::protobuf::uint32 value);

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
  inline bool has_hdf5_output_param() const;
  inline void clear_hdf5_output_param();
  static const int kHdf5OutputParamFieldNumber = 1001;
  inline const ::caffe::HDF5OutputParameter& hdf5_output_param() const;
  inline ::caffe::HDF5OutputParameter* mutable_hdf5_output_param();
  inline ::caffe::HDF5OutputParameter* release_hdf5_output_param();
  inline void set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param);

  // @@protoc_insertion_point(class_scope:caffe.V0LayerParameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_biasterm();
  inline void clear_has_biasterm();
  inline void set_has_weight_filler();
  inline void clear_has_weight_filler();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();
  inline void set_has_pad();
  inline void clear_has_pad();
  inline void set_has_kernelsize();
  inline void clear_has_kernelsize();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_stride();
  inline void clear_has_stride();
  inline void set_has_pool();
  inline void clear_has_pool();
  inline void set_has_dropout_ratio();
  inline void clear_has_dropout_ratio();
  inline void set_has_local_size();
  inline void clear_has_local_size();
  inline void set_has_alpha();
  inline void clear_has_alpha();
  inline void set_has_beta();
  inline void clear_has_beta();
  inline void set_has_k();
  inline void clear_has_k();
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_meanfile();
  inline void clear_has_meanfile();
  inline void set_has_batchsize();
  inline void clear_has_batchsize();
  inline void set_has_cropsize();
  inline void clear_has_cropsize();
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_rand_skip();
  inline void clear_has_rand_skip();
  inline void set_has_det_fg_threshold();
  inline void clear_has_det_fg_threshold();
  inline void set_has_det_bg_threshold();
  inline void clear_has_det_bg_threshold();
  inline void set_has_det_fg_fraction();
  inline void clear_has_det_fg_fraction();
  inline void set_has_det_context_pad();
  inline void clear_has_det_context_pad();
  inline void set_has_det_crop_mode();
  inline void clear_has_det_crop_mode();
  inline void set_has_new_num();
  inline void clear_has_new_num();
  inline void set_has_new_channels();
  inline void clear_has_new_channels();
  inline void set_has_new_height();
  inline void clear_has_new_height();
  inline void set_has_new_width();
  inline void clear_has_new_width();
  inline void set_has_shuffle_images();
  inline void clear_has_shuffle_images();
  inline void set_has_concat_dim();
  inline void clear_has_concat_dim();
  inline void set_has_hdf5_output_param();
  inline void clear_has_hdf5_output_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  ::std::string* name_;
  ::std::string* type_;
  ::caffe::FillerParameter* weight_filler_;
  ::google::protobuf::uint32 num_output_;
  ::google::protobuf::uint32 pad_;
  ::caffe::FillerParameter* bias_filler_;
  ::google::protobuf::uint32 kernelsize_;
  ::google::protobuf::uint32 group_;
  ::google::protobuf::uint32 stride_;
  int pool_;
  float dropout_ratio_;
  ::google::protobuf::uint32 local_size_;
  float alpha_;
  float beta_;
  ::std::string* source_;
  float k_;
  float scale_;
  ::std::string* meanfile_;
  ::google::protobuf::uint32 batchsize_;
  bool biasterm_;
  bool mirror_;
  bool shuffle_images_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto > blobs_;
  ::google::protobuf::uint32 cropsize_;
  ::google::protobuf::uint32 rand_skip_;
  ::google::protobuf::RepeatedField< float > blobs_lr_;
  ::google::protobuf::RepeatedField< float > weight_decay_;
  float det_fg_threshold_;
  float det_bg_threshold_;
  float det_fg_fraction_;
  ::google::protobuf::uint32 det_context_pad_;
  static ::std::string* _default_det_crop_mode_;
  ::std::string* det_crop_mode_;
  ::google::protobuf::int32 new_num_;
  ::google::protobuf::int32 new_channels_;
  ::google::protobuf::int32 new_height_;
  ::google::protobuf::int32 new_width_;
  ::caffe::HDF5OutputParameter* hdf5_output_param_;
  ::google::protobuf::uint32 concat_dim_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static V0LayerParameter* default_instance_;
};
// -------------------------------------------------------------------

class PReLUParameter : public ::google::protobuf::Message {
 public:
  PReLUParameter();
  virtual ~PReLUParameter();

  PReLUParameter(const PReLUParameter& from);

  inline PReLUParameter& operator=(const PReLUParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PReLUParameter& default_instance();

  void Swap(PReLUParameter* other);

  // implements Message ----------------------------------------------

  PReLUParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PReLUParameter& from);
  void MergeFrom(const PReLUParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.FillerParameter filler = 1;
  inline bool has_filler() const;
  inline void clear_filler();
  static const int kFillerFieldNumber = 1;
  inline const ::caffe::FillerParameter& filler() const;
  inline ::caffe::FillerParameter* mutable_filler();
  inline ::caffe::FillerParameter* release_filler();
  inline void set_allocated_filler(::caffe::FillerParameter* filler);

  // optional bool channel_shared = 2 [default = false];
  inline bool has_channel_shared() const;
  inline void clear_channel_shared();
  static const int kChannelSharedFieldNumber = 2;
  inline bool channel_shared() const;
  inline void set_channel_shared(bool value);

  // @@protoc_insertion_point(class_scope:caffe.PReLUParameter)
 private:
  inline void set_has_filler();
  inline void clear_has_filler();
  inline void set_has_channel_shared();
  inline void clear_has_channel_shared();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::caffe::FillerParameter* filler_;
  bool channel_shared_;
  friend void  protobuf_AddDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_AssignDesc_src_2fcaffe_2fproto_2fcaffe_2eproto();
  friend void protobuf_ShutdownFile_src_2fcaffe_2fproto_2fcaffe_2eproto();

  void InitAsDefaultInstance();
  static PReLUParameter* default_instance_;
};
// ===================================================================


// ===================================================================

// BlobShape

// repeated int64 dim = 1 [packed = true];
inline int BlobShape::dim_size() const {
  return dim_.size();
}
inline void BlobShape::clear_dim() {
  dim_.Clear();
}
inline ::google::protobuf::int64 BlobShape::dim(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobShape.dim)
  return dim_.Get(index);
}
inline void BlobShape::set_dim(int index, ::google::protobuf::int64 value) {
  dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobShape.dim)
}
inline void BlobShape::add_dim(::google::protobuf::int64 value) {
  dim_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobShape.dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BlobShape::dim() const {
  // @@protoc_insertion_point(field_list:caffe.BlobShape.dim)
  return dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BlobShape::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobShape.dim)
  return &dim_;
}

// -------------------------------------------------------------------

// BlobProto

// optional .caffe.BlobShape shape = 7;
inline bool BlobProto::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobProto::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobProto::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobProto::clear_shape() {
  if (shape_ != NULL) shape_->::caffe::BlobShape::Clear();
  clear_has_shape();
}
inline const ::caffe::BlobShape& BlobProto::shape() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.shape)
  return shape_ != NULL ? *shape_ : *default_instance_->shape_;
}
inline ::caffe::BlobShape* BlobProto::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) shape_ = new ::caffe::BlobShape;
  // @@protoc_insertion_point(field_mutable:caffe.BlobProto.shape)
  return shape_;
}
inline ::caffe::BlobShape* BlobProto::release_shape() {
  clear_has_shape();
  ::caffe::BlobShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline void BlobProto::set_allocated_shape(::caffe::BlobShape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.BlobProto.shape)
}

// repeated float data = 5 [packed = true];
inline int BlobProto::data_size() const {
  return data_.size();
}
inline void BlobProto::clear_data() {
  data_.Clear();
}
inline float BlobProto::data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.data)
  return data_.Get(index);
}
inline void BlobProto::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.data)
}
inline void BlobProto::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.data)
}
inline const ::google::protobuf::RepeatedField< float >&
BlobProto::data() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< float >*
BlobProto::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.data)
  return &data_;
}

// repeated float diff = 6 [packed = true];
inline int BlobProto::diff_size() const {
  return diff_.size();
}
inline void BlobProto::clear_diff() {
  diff_.Clear();
}
inline float BlobProto::diff(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.diff)
  return diff_.Get(index);
}
inline void BlobProto::set_diff(int index, float value) {
  diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.diff)
}
inline void BlobProto::add_diff(float value) {
  diff_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.diff)
}
inline const ::google::protobuf::RepeatedField< float >&
BlobProto::diff() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.diff)
  return diff_;
}
inline ::google::protobuf::RepeatedField< float >*
BlobProto::mutable_diff() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.diff)
  return &diff_;
}

// repeated double double_data = 8 [packed = true];
inline int BlobProto::double_data_size() const {
  return double_data_.size();
}
inline void BlobProto::clear_double_data() {
  double_data_.Clear();
}
inline double BlobProto::double_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.double_data)
  return double_data_.Get(index);
}
inline void BlobProto::set_double_data(int index, double value) {
  double_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.double_data)
}
inline void BlobProto::add_double_data(double value) {
  double_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.double_data)
}
inline const ::google::protobuf::RepeatedField< double >&
BlobProto::double_data() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.double_data)
  return double_data_;
}
inline ::google::protobuf::RepeatedField< double >*
BlobProto::mutable_double_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.double_data)
  return &double_data_;
}

// repeated double double_diff = 9 [packed = true];
inline int BlobProto::double_diff_size() const {
  return double_diff_.size();
}
inline void BlobProto::clear_double_diff() {
  double_diff_.Clear();
}
inline double BlobProto::double_diff(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.double_diff)
  return double_diff_.Get(index);
}
inline void BlobProto::set_double_diff(int index, double value) {
  double_diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.double_diff)
}
inline void BlobProto::add_double_diff(double value) {
  double_diff_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.double_diff)
}
inline const ::google::protobuf::RepeatedField< double >&
BlobProto::double_diff() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.double_diff)
  return double_diff_;
}
inline ::google::protobuf::RepeatedField< double >*
BlobProto::mutable_double_diff() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.double_diff)
  return &double_diff_;
}

// optional .caffe.Type raw_data_type = 10;
inline bool BlobProto::has_raw_data_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlobProto::set_has_raw_data_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BlobProto::clear_has_raw_data_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BlobProto::clear_raw_data_type() {
  raw_data_type_ = 0;
  clear_has_raw_data_type();
}
inline ::caffe::Type BlobProto::raw_data_type() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.raw_data_type)
  return static_cast< ::caffe::Type >(raw_data_type_);
}
inline void BlobProto::set_raw_data_type(::caffe::Type value) {
  assert(::caffe::Type_IsValid(value));
  set_has_raw_data_type();
  raw_data_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.raw_data_type)
}

// optional .caffe.Type raw_diff_type = 11;
inline bool BlobProto::has_raw_diff_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BlobProto::set_has_raw_diff_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BlobProto::clear_has_raw_diff_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BlobProto::clear_raw_diff_type() {
  raw_diff_type_ = 0;
  clear_has_raw_diff_type();
}
inline ::caffe::Type BlobProto::raw_diff_type() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.raw_diff_type)
  return static_cast< ::caffe::Type >(raw_diff_type_);
}
inline void BlobProto::set_raw_diff_type(::caffe::Type value) {
  assert(::caffe::Type_IsValid(value));
  set_has_raw_diff_type();
  raw_diff_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.raw_diff_type)
}

// optional bytes raw_data = 12 [packed = false];
inline bool BlobProto::has_raw_data() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BlobProto::set_has_raw_data() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BlobProto::clear_has_raw_data() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BlobProto::clear_raw_data() {
  if (raw_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    raw_data_->clear();
  }
  clear_has_raw_data();
}
inline const ::std::string& BlobProto::raw_data() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.raw_data)
  return *raw_data_;
}
inline void BlobProto::set_raw_data(const ::std::string& value) {
  set_has_raw_data();
  if (raw_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    raw_data_ = new ::std::string;
  }
  raw_data_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.raw_data)
}
inline void BlobProto::set_raw_data(const char* value) {
  set_has_raw_data();
  if (raw_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    raw_data_ = new ::std::string;
  }
  raw_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.BlobProto.raw_data)
}
inline void BlobProto::set_raw_data(const void* value, size_t size) {
  set_has_raw_data();
  if (raw_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    raw_data_ = new ::std::string;
  }
  raw_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.BlobProto.raw_data)
}
inline ::std::string* BlobProto::mutable_raw_data() {
  set_has_raw_data();
  if (raw_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    raw_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe.BlobProto.raw_data)
  return raw_data_;
}
inline ::std::string* BlobProto::release_raw_data() {
  clear_has_raw_data();
  if (raw_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = raw_data_;
    raw_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BlobProto::set_allocated_raw_data(::std::string* raw_data) {
  if (raw_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete raw_data_;
  }
  if (raw_data) {
    set_has_raw_data();
    raw_data_ = raw_data;
  } else {
    clear_has_raw_data();
    raw_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.BlobProto.raw_data)
}

// optional bytes raw_diff = 13 [packed = false];
inline bool BlobProto::has_raw_diff() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BlobProto::set_has_raw_diff() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BlobProto::clear_has_raw_diff() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BlobProto::clear_raw_diff() {
  if (raw_diff_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    raw_diff_->clear();
  }
  clear_has_raw_diff();
}
inline const ::std::string& BlobProto::raw_diff() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.raw_diff)
  return *raw_diff_;
}
inline void BlobProto::set_raw_diff(const ::std::string& value) {
  set_has_raw_diff();
  if (raw_diff_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    raw_diff_ = new ::std::string;
  }
  raw_diff_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.raw_diff)
}
inline void BlobProto::set_raw_diff(const char* value) {
  set_has_raw_diff();
  if (raw_diff_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    raw_diff_ = new ::std::string;
  }
  raw_diff_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.BlobProto.raw_diff)
}
inline void BlobProto::set_raw_diff(const void* value, size_t size) {
  set_has_raw_diff();
  if (raw_diff_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    raw_diff_ = new ::std::string;
  }
  raw_diff_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.BlobProto.raw_diff)
}
inline ::std::string* BlobProto::mutable_raw_diff() {
  set_has_raw_diff();
  if (raw_diff_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    raw_diff_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe.BlobProto.raw_diff)
  return raw_diff_;
}
inline ::std::string* BlobProto::release_raw_diff() {
  clear_has_raw_diff();
  if (raw_diff_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = raw_diff_;
    raw_diff_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BlobProto::set_allocated_raw_diff(::std::string* raw_diff) {
  if (raw_diff_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete raw_diff_;
  }
  if (raw_diff) {
    set_has_raw_diff();
    raw_diff_ = raw_diff;
  } else {
    clear_has_raw_diff();
    raw_diff_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.BlobProto.raw_diff)
}

// optional int32 num = 1 [default = 0];
inline bool BlobProto::has_num() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BlobProto::set_has_num() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BlobProto::clear_has_num() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BlobProto::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 BlobProto::num() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.num)
  return num_;
}
inline void BlobProto::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.num)
}

// optional int32 channels = 2 [default = 0];
inline bool BlobProto::has_channels() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BlobProto::set_has_channels() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BlobProto::clear_has_channels() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BlobProto::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
inline ::google::protobuf::int32 BlobProto::channels() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.channels)
  return channels_;
}
inline void BlobProto::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.channels)
}

// optional int32 height = 3 [default = 0];
inline bool BlobProto::has_height() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BlobProto::set_has_height() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BlobProto::clear_has_height() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BlobProto::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 BlobProto::height() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.height)
  return height_;
}
inline void BlobProto::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.height)
}

// optional int32 width = 4 [default = 0];
inline bool BlobProto::has_width() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BlobProto::set_has_width() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BlobProto::clear_has_width() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BlobProto::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 BlobProto::width() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.width)
  return width_;
}
inline void BlobProto::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.width)
}

// -------------------------------------------------------------------

// BlobProtoVector

// repeated .caffe.BlobProto blobs = 1;
inline int BlobProtoVector::blobs_size() const {
  return blobs_.size();
}
inline void BlobProtoVector::clear_blobs() {
  blobs_.Clear();
}
inline const ::caffe::BlobProto& BlobProtoVector::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProtoVector.blobs)
  return blobs_.Get(index);
}
inline ::caffe::BlobProto* BlobProtoVector::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.BlobProtoVector.blobs)
  return blobs_.Mutable(index);
}
inline ::caffe::BlobProto* BlobProtoVector::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.BlobProtoVector.blobs)
  return blobs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
BlobProtoVector::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProtoVector.blobs)
  return blobs_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
BlobProtoVector::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProtoVector.blobs)
  return &blobs_;
}

// -------------------------------------------------------------------

// Datum

// optional int32 channels = 1;
inline bool Datum::has_channels() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Datum::set_has_channels() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Datum::clear_has_channels() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Datum::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
inline ::google::protobuf::int32 Datum::channels() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.channels)
  return channels_;
}
inline void Datum::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.channels)
}

// optional int32 height = 2;
inline bool Datum::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Datum::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Datum::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Datum::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 Datum::height() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.height)
  return height_;
}
inline void Datum::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.height)
}

// optional int32 width = 3;
inline bool Datum::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Datum::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Datum::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Datum::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 Datum::width() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.width)
  return width_;
}
inline void Datum::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.width)
}

// optional bytes data = 4;
inline bool Datum::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Datum::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Datum::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Datum::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Datum::data() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.data)
  return *data_;
}
inline void Datum::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.Datum.data)
}
inline void Datum::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.Datum.data)
}
inline void Datum::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.Datum.data)
}
inline ::std::string* Datum::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe.Datum.data)
  return data_;
}
inline ::std::string* Datum::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Datum::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.Datum.data)
}

// optional int32 label = 5;
inline bool Datum::has_label() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Datum::set_has_label() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Datum::clear_has_label() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Datum::clear_label() {
  label_ = 0;
  clear_has_label();
}
inline ::google::protobuf::int32 Datum::label() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.label)
  return label_;
}
inline void Datum::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.label)
}

// repeated float float_data = 6;
inline int Datum::float_data_size() const {
  return float_data_.size();
}
inline void Datum::clear_float_data() {
  float_data_.Clear();
}
inline float Datum::float_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.Datum.float_data)
  return float_data_.Get(index);
}
inline void Datum::set_float_data(int index, float value) {
  float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.Datum.float_data)
}
inline void Datum::add_float_data(float value) {
  float_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.Datum.float_data)
}
inline const ::google::protobuf::RepeatedField< float >&
Datum::float_data() const {
  // @@protoc_insertion_point(field_list:caffe.Datum.float_data)
  return float_data_;
}
inline ::google::protobuf::RepeatedField< float >*
Datum::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.Datum.float_data)
  return &float_data_;
}

// optional bool encoded = 7 [default = false];
inline bool Datum::has_encoded() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Datum::set_has_encoded() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Datum::clear_has_encoded() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Datum::clear_encoded() {
  encoded_ = false;
  clear_has_encoded();
}
inline bool Datum::encoded() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.encoded)
  return encoded_;
}
inline void Datum::set_encoded(bool value) {
  set_has_encoded();
  encoded_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.encoded)
}

// optional uint32 record_id = 8 [default = 0];
inline bool Datum::has_record_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Datum::set_has_record_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Datum::clear_has_record_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Datum::clear_record_id() {
  record_id_ = 0u;
  clear_has_record_id();
}
inline ::google::protobuf::uint32 Datum::record_id() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.record_id)
  return record_id_;
}
inline void Datum::set_record_id(::google::protobuf::uint32 value) {
  set_has_record_id();
  record_id_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.record_id)
}

// -------------------------------------------------------------------

// LabelMapItem

// optional string name = 1;
inline bool LabelMapItem::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LabelMapItem::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LabelMapItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LabelMapItem::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LabelMapItem::name() const {
  // @@protoc_insertion_point(field_get:caffe.LabelMapItem.name)
  return *name_;
}
inline void LabelMapItem::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.LabelMapItem.name)
}
inline void LabelMapItem::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.LabelMapItem.name)
}
inline void LabelMapItem::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.LabelMapItem.name)
}
inline ::std::string* LabelMapItem::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LabelMapItem.name)
  return name_;
}
inline ::std::string* LabelMapItem::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LabelMapItem::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LabelMapItem.name)
}

// optional int32 label = 2;
inline bool LabelMapItem::has_label() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LabelMapItem::set_has_label() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LabelMapItem::clear_has_label() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LabelMapItem::clear_label() {
  label_ = 0;
  clear_has_label();
}
inline ::google::protobuf::int32 LabelMapItem::label() const {
  // @@protoc_insertion_point(field_get:caffe.LabelMapItem.label)
  return label_;
}
inline void LabelMapItem::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelMapItem.label)
}

// optional string display_name = 3;
inline bool LabelMapItem::has_display_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LabelMapItem::set_has_display_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LabelMapItem::clear_has_display_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LabelMapItem::clear_display_name() {
  if (display_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    display_name_->clear();
  }
  clear_has_display_name();
}
inline const ::std::string& LabelMapItem::display_name() const {
  // @@protoc_insertion_point(field_get:caffe.LabelMapItem.display_name)
  return *display_name_;
}
inline void LabelMapItem::set_display_name(const ::std::string& value) {
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    display_name_ = new ::std::string;
  }
  display_name_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.LabelMapItem.display_name)
}
inline void LabelMapItem::set_display_name(const char* value) {
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    display_name_ = new ::std::string;
  }
  display_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.LabelMapItem.display_name)
}
inline void LabelMapItem::set_display_name(const char* value, size_t size) {
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    display_name_ = new ::std::string;
  }
  display_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.LabelMapItem.display_name)
}
inline ::std::string* LabelMapItem::mutable_display_name() {
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    display_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LabelMapItem.display_name)
  return display_name_;
}
inline ::std::string* LabelMapItem::release_display_name() {
  clear_has_display_name();
  if (display_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = display_name_;
    display_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LabelMapItem::set_allocated_display_name(::std::string* display_name) {
  if (display_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete display_name_;
  }
  if (display_name) {
    set_has_display_name();
    display_name_ = display_name;
  } else {
    clear_has_display_name();
    display_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LabelMapItem.display_name)
}

// -------------------------------------------------------------------

// LabelMap

// repeated .caffe.LabelMapItem item = 1;
inline int LabelMap::item_size() const {
  return item_.size();
}
inline void LabelMap::clear_item() {
  item_.Clear();
}
inline const ::caffe::LabelMapItem& LabelMap::item(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LabelMap.item)
  return item_.Get(index);
}
inline ::caffe::LabelMapItem* LabelMap::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LabelMap.item)
  return item_.Mutable(index);
}
inline ::caffe::LabelMapItem* LabelMap::add_item() {
  // @@protoc_insertion_point(field_add:caffe.LabelMap.item)
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::LabelMapItem >&
LabelMap::item() const {
  // @@protoc_insertion_point(field_list:caffe.LabelMap.item)
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::LabelMapItem >*
LabelMap::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LabelMap.item)
  return &item_;
}

// -------------------------------------------------------------------

// Sampler

// optional float min_scale = 1 [default = 1];
inline bool Sampler::has_min_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Sampler::set_has_min_scale() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Sampler::clear_has_min_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Sampler::clear_min_scale() {
  min_scale_ = 1;
  clear_has_min_scale();
}
inline float Sampler::min_scale() const {
  // @@protoc_insertion_point(field_get:caffe.Sampler.min_scale)
  return min_scale_;
}
inline void Sampler::set_min_scale(float value) {
  set_has_min_scale();
  min_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.Sampler.min_scale)
}

// optional float max_scale = 2 [default = 1];
inline bool Sampler::has_max_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Sampler::set_has_max_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Sampler::clear_has_max_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Sampler::clear_max_scale() {
  max_scale_ = 1;
  clear_has_max_scale();
}
inline float Sampler::max_scale() const {
  // @@protoc_insertion_point(field_get:caffe.Sampler.max_scale)
  return max_scale_;
}
inline void Sampler::set_max_scale(float value) {
  set_has_max_scale();
  max_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.Sampler.max_scale)
}

// optional float min_aspect_ratio = 3 [default = 1];
inline bool Sampler::has_min_aspect_ratio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Sampler::set_has_min_aspect_ratio() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Sampler::clear_has_min_aspect_ratio() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Sampler::clear_min_aspect_ratio() {
  min_aspect_ratio_ = 1;
  clear_has_min_aspect_ratio();
}
inline float Sampler::min_aspect_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.Sampler.min_aspect_ratio)
  return min_aspect_ratio_;
}
inline void Sampler::set_min_aspect_ratio(float value) {
  set_has_min_aspect_ratio();
  min_aspect_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.Sampler.min_aspect_ratio)
}

// optional float max_aspect_ratio = 4 [default = 1];
inline bool Sampler::has_max_aspect_ratio() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Sampler::set_has_max_aspect_ratio() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Sampler::clear_has_max_aspect_ratio() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Sampler::clear_max_aspect_ratio() {
  max_aspect_ratio_ = 1;
  clear_has_max_aspect_ratio();
}
inline float Sampler::max_aspect_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.Sampler.max_aspect_ratio)
  return max_aspect_ratio_;
}
inline void Sampler::set_max_aspect_ratio(float value) {
  set_has_max_aspect_ratio();
  max_aspect_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.Sampler.max_aspect_ratio)
}

// -------------------------------------------------------------------

// SampleConstraint

// optional float min_jaccard_overlap = 1;
inline bool SampleConstraint::has_min_jaccard_overlap() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SampleConstraint::set_has_min_jaccard_overlap() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SampleConstraint::clear_has_min_jaccard_overlap() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SampleConstraint::clear_min_jaccard_overlap() {
  min_jaccard_overlap_ = 0;
  clear_has_min_jaccard_overlap();
}
inline float SampleConstraint::min_jaccard_overlap() const {
  // @@protoc_insertion_point(field_get:caffe.SampleConstraint.min_jaccard_overlap)
  return min_jaccard_overlap_;
}
inline void SampleConstraint::set_min_jaccard_overlap(float value) {
  set_has_min_jaccard_overlap();
  min_jaccard_overlap_ = value;
  // @@protoc_insertion_point(field_set:caffe.SampleConstraint.min_jaccard_overlap)
}

// optional float max_jaccard_overlap = 2;
inline bool SampleConstraint::has_max_jaccard_overlap() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SampleConstraint::set_has_max_jaccard_overlap() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SampleConstraint::clear_has_max_jaccard_overlap() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SampleConstraint::clear_max_jaccard_overlap() {
  max_jaccard_overlap_ = 0;
  clear_has_max_jaccard_overlap();
}
inline float SampleConstraint::max_jaccard_overlap() const {
  // @@protoc_insertion_point(field_get:caffe.SampleConstraint.max_jaccard_overlap)
  return max_jaccard_overlap_;
}
inline void SampleConstraint::set_max_jaccard_overlap(float value) {
  set_has_max_jaccard_overlap();
  max_jaccard_overlap_ = value;
  // @@protoc_insertion_point(field_set:caffe.SampleConstraint.max_jaccard_overlap)
}

// optional float min_sample_coverage = 3;
inline bool SampleConstraint::has_min_sample_coverage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SampleConstraint::set_has_min_sample_coverage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SampleConstraint::clear_has_min_sample_coverage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SampleConstraint::clear_min_sample_coverage() {
  min_sample_coverage_ = 0;
  clear_has_min_sample_coverage();
}
inline float SampleConstraint::min_sample_coverage() const {
  // @@protoc_insertion_point(field_get:caffe.SampleConstraint.min_sample_coverage)
  return min_sample_coverage_;
}
inline void SampleConstraint::set_min_sample_coverage(float value) {
  set_has_min_sample_coverage();
  min_sample_coverage_ = value;
  // @@protoc_insertion_point(field_set:caffe.SampleConstraint.min_sample_coverage)
}

// optional float max_sample_coverage = 4;
inline bool SampleConstraint::has_max_sample_coverage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SampleConstraint::set_has_max_sample_coverage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SampleConstraint::clear_has_max_sample_coverage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SampleConstraint::clear_max_sample_coverage() {
  max_sample_coverage_ = 0;
  clear_has_max_sample_coverage();
}
inline float SampleConstraint::max_sample_coverage() const {
  // @@protoc_insertion_point(field_get:caffe.SampleConstraint.max_sample_coverage)
  return max_sample_coverage_;
}
inline void SampleConstraint::set_max_sample_coverage(float value) {
  set_has_max_sample_coverage();
  max_sample_coverage_ = value;
  // @@protoc_insertion_point(field_set:caffe.SampleConstraint.max_sample_coverage)
}

// optional float min_object_coverage = 5;
inline bool SampleConstraint::has_min_object_coverage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SampleConstraint::set_has_min_object_coverage() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SampleConstraint::clear_has_min_object_coverage() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SampleConstraint::clear_min_object_coverage() {
  min_object_coverage_ = 0;
  clear_has_min_object_coverage();
}
inline float SampleConstraint::min_object_coverage() const {
  // @@protoc_insertion_point(field_get:caffe.SampleConstraint.min_object_coverage)
  return min_object_coverage_;
}
inline void SampleConstraint::set_min_object_coverage(float value) {
  set_has_min_object_coverage();
  min_object_coverage_ = value;
  // @@protoc_insertion_point(field_set:caffe.SampleConstraint.min_object_coverage)
}

// optional float max_object_coverage = 6;
inline bool SampleConstraint::has_max_object_coverage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SampleConstraint::set_has_max_object_coverage() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SampleConstraint::clear_has_max_object_coverage() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SampleConstraint::clear_max_object_coverage() {
  max_object_coverage_ = 0;
  clear_has_max_object_coverage();
}
inline float SampleConstraint::max_object_coverage() const {
  // @@protoc_insertion_point(field_get:caffe.SampleConstraint.max_object_coverage)
  return max_object_coverage_;
}
inline void SampleConstraint::set_max_object_coverage(float value) {
  set_has_max_object_coverage();
  max_object_coverage_ = value;
  // @@protoc_insertion_point(field_set:caffe.SampleConstraint.max_object_coverage)
}

// -------------------------------------------------------------------

// BatchSampler

// optional bool use_original_image = 1 [default = true];
inline bool BatchSampler::has_use_original_image() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BatchSampler::set_has_use_original_image() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BatchSampler::clear_has_use_original_image() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BatchSampler::clear_use_original_image() {
  use_original_image_ = true;
  clear_has_use_original_image();
}
inline bool BatchSampler::use_original_image() const {
  // @@protoc_insertion_point(field_get:caffe.BatchSampler.use_original_image)
  return use_original_image_;
}
inline void BatchSampler::set_use_original_image(bool value) {
  set_has_use_original_image();
  use_original_image_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchSampler.use_original_image)
}

// optional .caffe.Sampler sampler = 2;
inline bool BatchSampler::has_sampler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BatchSampler::set_has_sampler() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BatchSampler::clear_has_sampler() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BatchSampler::clear_sampler() {
  if (sampler_ != NULL) sampler_->::caffe::Sampler::Clear();
  clear_has_sampler();
}
inline const ::caffe::Sampler& BatchSampler::sampler() const {
  // @@protoc_insertion_point(field_get:caffe.BatchSampler.sampler)
  return sampler_ != NULL ? *sampler_ : *default_instance_->sampler_;
}
inline ::caffe::Sampler* BatchSampler::mutable_sampler() {
  set_has_sampler();
  if (sampler_ == NULL) sampler_ = new ::caffe::Sampler;
  // @@protoc_insertion_point(field_mutable:caffe.BatchSampler.sampler)
  return sampler_;
}
inline ::caffe::Sampler* BatchSampler::release_sampler() {
  clear_has_sampler();
  ::caffe::Sampler* temp = sampler_;
  sampler_ = NULL;
  return temp;
}
inline void BatchSampler::set_allocated_sampler(::caffe::Sampler* sampler) {
  delete sampler_;
  sampler_ = sampler;
  if (sampler) {
    set_has_sampler();
  } else {
    clear_has_sampler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.BatchSampler.sampler)
}

// optional .caffe.SampleConstraint sample_constraint = 3;
inline bool BatchSampler::has_sample_constraint() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BatchSampler::set_has_sample_constraint() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BatchSampler::clear_has_sample_constraint() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BatchSampler::clear_sample_constraint() {
  if (sample_constraint_ != NULL) sample_constraint_->::caffe::SampleConstraint::Clear();
  clear_has_sample_constraint();
}
inline const ::caffe::SampleConstraint& BatchSampler::sample_constraint() const {
  // @@protoc_insertion_point(field_get:caffe.BatchSampler.sample_constraint)
  return sample_constraint_ != NULL ? *sample_constraint_ : *default_instance_->sample_constraint_;
}
inline ::caffe::SampleConstraint* BatchSampler::mutable_sample_constraint() {
  set_has_sample_constraint();
  if (sample_constraint_ == NULL) sample_constraint_ = new ::caffe::SampleConstraint;
  // @@protoc_insertion_point(field_mutable:caffe.BatchSampler.sample_constraint)
  return sample_constraint_;
}
inline ::caffe::SampleConstraint* BatchSampler::release_sample_constraint() {
  clear_has_sample_constraint();
  ::caffe::SampleConstraint* temp = sample_constraint_;
  sample_constraint_ = NULL;
  return temp;
}
inline void BatchSampler::set_allocated_sample_constraint(::caffe::SampleConstraint* sample_constraint) {
  delete sample_constraint_;
  sample_constraint_ = sample_constraint;
  if (sample_constraint) {
    set_has_sample_constraint();
  } else {
    clear_has_sample_constraint();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.BatchSampler.sample_constraint)
}

// optional uint32 max_sample = 4;
inline bool BatchSampler::has_max_sample() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BatchSampler::set_has_max_sample() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BatchSampler::clear_has_max_sample() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BatchSampler::clear_max_sample() {
  max_sample_ = 0u;
  clear_has_max_sample();
}
inline ::google::protobuf::uint32 BatchSampler::max_sample() const {
  // @@protoc_insertion_point(field_get:caffe.BatchSampler.max_sample)
  return max_sample_;
}
inline void BatchSampler::set_max_sample(::google::protobuf::uint32 value) {
  set_has_max_sample();
  max_sample_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchSampler.max_sample)
}

// optional uint32 max_trials = 5 [default = 100];
inline bool BatchSampler::has_max_trials() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BatchSampler::set_has_max_trials() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BatchSampler::clear_has_max_trials() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BatchSampler::clear_max_trials() {
  max_trials_ = 100u;
  clear_has_max_trials();
}
inline ::google::protobuf::uint32 BatchSampler::max_trials() const {
  // @@protoc_insertion_point(field_get:caffe.BatchSampler.max_trials)
  return max_trials_;
}
inline void BatchSampler::set_max_trials(::google::protobuf::uint32 value) {
  set_has_max_trials();
  max_trials_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchSampler.max_trials)
}

// -------------------------------------------------------------------

// EmitConstraint

// optional .caffe.EmitConstraint.EmitType emit_type = 1 [default = CENTER];
inline bool EmitConstraint::has_emit_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmitConstraint::set_has_emit_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmitConstraint::clear_has_emit_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmitConstraint::clear_emit_type() {
  emit_type_ = 0;
  clear_has_emit_type();
}
inline ::caffe::EmitConstraint_EmitType EmitConstraint::emit_type() const {
  // @@protoc_insertion_point(field_get:caffe.EmitConstraint.emit_type)
  return static_cast< ::caffe::EmitConstraint_EmitType >(emit_type_);
}
inline void EmitConstraint::set_emit_type(::caffe::EmitConstraint_EmitType value) {
  assert(::caffe::EmitConstraint_EmitType_IsValid(value));
  set_has_emit_type();
  emit_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.EmitConstraint.emit_type)
}

// optional float emit_overlap = 2;
inline bool EmitConstraint::has_emit_overlap() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EmitConstraint::set_has_emit_overlap() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EmitConstraint::clear_has_emit_overlap() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EmitConstraint::clear_emit_overlap() {
  emit_overlap_ = 0;
  clear_has_emit_overlap();
}
inline float EmitConstraint::emit_overlap() const {
  // @@protoc_insertion_point(field_get:caffe.EmitConstraint.emit_overlap)
  return emit_overlap_;
}
inline void EmitConstraint::set_emit_overlap(float value) {
  set_has_emit_overlap();
  emit_overlap_ = value;
  // @@protoc_insertion_point(field_set:caffe.EmitConstraint.emit_overlap)
}

// -------------------------------------------------------------------

// NormalizedBBox

// optional float xmin = 1;
inline bool NormalizedBBox::has_xmin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NormalizedBBox::set_has_xmin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NormalizedBBox::clear_has_xmin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NormalizedBBox::clear_xmin() {
  xmin_ = 0;
  clear_has_xmin();
}
inline float NormalizedBBox::xmin() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizedBBox.xmin)
  return xmin_;
}
inline void NormalizedBBox::set_xmin(float value) {
  set_has_xmin();
  xmin_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizedBBox.xmin)
}

// optional float ymin = 2;
inline bool NormalizedBBox::has_ymin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NormalizedBBox::set_has_ymin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NormalizedBBox::clear_has_ymin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NormalizedBBox::clear_ymin() {
  ymin_ = 0;
  clear_has_ymin();
}
inline float NormalizedBBox::ymin() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizedBBox.ymin)
  return ymin_;
}
inline void NormalizedBBox::set_ymin(float value) {
  set_has_ymin();
  ymin_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizedBBox.ymin)
}

// optional float xmax = 3;
inline bool NormalizedBBox::has_xmax() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NormalizedBBox::set_has_xmax() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NormalizedBBox::clear_has_xmax() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NormalizedBBox::clear_xmax() {
  xmax_ = 0;
  clear_has_xmax();
}
inline float NormalizedBBox::xmax() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizedBBox.xmax)
  return xmax_;
}
inline void NormalizedBBox::set_xmax(float value) {
  set_has_xmax();
  xmax_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizedBBox.xmax)
}

// optional float ymax = 4;
inline bool NormalizedBBox::has_ymax() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NormalizedBBox::set_has_ymax() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NormalizedBBox::clear_has_ymax() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NormalizedBBox::clear_ymax() {
  ymax_ = 0;
  clear_has_ymax();
}
inline float NormalizedBBox::ymax() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizedBBox.ymax)
  return ymax_;
}
inline void NormalizedBBox::set_ymax(float value) {
  set_has_ymax();
  ymax_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizedBBox.ymax)
}

// optional int32 label = 5;
inline bool NormalizedBBox::has_label() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NormalizedBBox::set_has_label() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NormalizedBBox::clear_has_label() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NormalizedBBox::clear_label() {
  label_ = 0;
  clear_has_label();
}
inline ::google::protobuf::int32 NormalizedBBox::label() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizedBBox.label)
  return label_;
}
inline void NormalizedBBox::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizedBBox.label)
}

// optional bool difficult = 6;
inline bool NormalizedBBox::has_difficult() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NormalizedBBox::set_has_difficult() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NormalizedBBox::clear_has_difficult() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NormalizedBBox::clear_difficult() {
  difficult_ = false;
  clear_has_difficult();
}
inline bool NormalizedBBox::difficult() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizedBBox.difficult)
  return difficult_;
}
inline void NormalizedBBox::set_difficult(bool value) {
  set_has_difficult();
  difficult_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizedBBox.difficult)
}

// optional float score = 7;
inline bool NormalizedBBox::has_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NormalizedBBox::set_has_score() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NormalizedBBox::clear_has_score() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NormalizedBBox::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline float NormalizedBBox::score() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizedBBox.score)
  return score_;
}
inline void NormalizedBBox::set_score(float value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizedBBox.score)
}

// optional float size = 8;
inline bool NormalizedBBox::has_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NormalizedBBox::set_has_size() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NormalizedBBox::clear_has_size() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NormalizedBBox::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline float NormalizedBBox::size() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizedBBox.size)
  return size_;
}
inline void NormalizedBBox::set_size(float value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizedBBox.size)
}

// -------------------------------------------------------------------

// Annotation

// optional int32 instance_id = 1 [default = 0];
inline bool Annotation::has_instance_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Annotation::set_has_instance_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Annotation::clear_has_instance_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Annotation::clear_instance_id() {
  instance_id_ = 0;
  clear_has_instance_id();
}
inline ::google::protobuf::int32 Annotation::instance_id() const {
  // @@protoc_insertion_point(field_get:caffe.Annotation.instance_id)
  return instance_id_;
}
inline void Annotation::set_instance_id(::google::protobuf::int32 value) {
  set_has_instance_id();
  instance_id_ = value;
  // @@protoc_insertion_point(field_set:caffe.Annotation.instance_id)
}

// optional .caffe.NormalizedBBox bbox = 2;
inline bool Annotation::has_bbox() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Annotation::set_has_bbox() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Annotation::clear_has_bbox() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Annotation::clear_bbox() {
  if (bbox_ != NULL) bbox_->::caffe::NormalizedBBox::Clear();
  clear_has_bbox();
}
inline const ::caffe::NormalizedBBox& Annotation::bbox() const {
  // @@protoc_insertion_point(field_get:caffe.Annotation.bbox)
  return bbox_ != NULL ? *bbox_ : *default_instance_->bbox_;
}
inline ::caffe::NormalizedBBox* Annotation::mutable_bbox() {
  set_has_bbox();
  if (bbox_ == NULL) bbox_ = new ::caffe::NormalizedBBox;
  // @@protoc_insertion_point(field_mutable:caffe.Annotation.bbox)
  return bbox_;
}
inline ::caffe::NormalizedBBox* Annotation::release_bbox() {
  clear_has_bbox();
  ::caffe::NormalizedBBox* temp = bbox_;
  bbox_ = NULL;
  return temp;
}
inline void Annotation::set_allocated_bbox(::caffe::NormalizedBBox* bbox) {
  delete bbox_;
  bbox_ = bbox;
  if (bbox) {
    set_has_bbox();
  } else {
    clear_has_bbox();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.Annotation.bbox)
}

// -------------------------------------------------------------------

// AnnotationGroup

// optional int32 group_label = 1;
inline bool AnnotationGroup::has_group_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnnotationGroup::set_has_group_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AnnotationGroup::clear_has_group_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AnnotationGroup::clear_group_label() {
  group_label_ = 0;
  clear_has_group_label();
}
inline ::google::protobuf::int32 AnnotationGroup::group_label() const {
  // @@protoc_insertion_point(field_get:caffe.AnnotationGroup.group_label)
  return group_label_;
}
inline void AnnotationGroup::set_group_label(::google::protobuf::int32 value) {
  set_has_group_label();
  group_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.AnnotationGroup.group_label)
}

// repeated .caffe.Annotation annotation = 2;
inline int AnnotationGroup::annotation_size() const {
  return annotation_.size();
}
inline void AnnotationGroup::clear_annotation() {
  annotation_.Clear();
}
inline const ::caffe::Annotation& AnnotationGroup::annotation(int index) const {
  // @@protoc_insertion_point(field_get:caffe.AnnotationGroup.annotation)
  return annotation_.Get(index);
}
inline ::caffe::Annotation* AnnotationGroup::mutable_annotation(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.AnnotationGroup.annotation)
  return annotation_.Mutable(index);
}
inline ::caffe::Annotation* AnnotationGroup::add_annotation() {
  // @@protoc_insertion_point(field_add:caffe.AnnotationGroup.annotation)
  return annotation_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::Annotation >&
AnnotationGroup::annotation() const {
  // @@protoc_insertion_point(field_list:caffe.AnnotationGroup.annotation)
  return annotation_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::Annotation >*
AnnotationGroup::mutable_annotation() {
  // @@protoc_insertion_point(field_mutable_list:caffe.AnnotationGroup.annotation)
  return &annotation_;
}

// -------------------------------------------------------------------

// AnnotatedDatum

// optional .caffe.Datum datum = 1;
inline bool AnnotatedDatum::has_datum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnnotatedDatum::set_has_datum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AnnotatedDatum::clear_has_datum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AnnotatedDatum::clear_datum() {
  if (datum_ != NULL) datum_->::caffe::Datum::Clear();
  clear_has_datum();
}
inline const ::caffe::Datum& AnnotatedDatum::datum() const {
  // @@protoc_insertion_point(field_get:caffe.AnnotatedDatum.datum)
  return datum_ != NULL ? *datum_ : *default_instance_->datum_;
}
inline ::caffe::Datum* AnnotatedDatum::mutable_datum() {
  set_has_datum();
  if (datum_ == NULL) datum_ = new ::caffe::Datum;
  // @@protoc_insertion_point(field_mutable:caffe.AnnotatedDatum.datum)
  return datum_;
}
inline ::caffe::Datum* AnnotatedDatum::release_datum() {
  clear_has_datum();
  ::caffe::Datum* temp = datum_;
  datum_ = NULL;
  return temp;
}
inline void AnnotatedDatum::set_allocated_datum(::caffe::Datum* datum) {
  delete datum_;
  datum_ = datum;
  if (datum) {
    set_has_datum();
  } else {
    clear_has_datum();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.AnnotatedDatum.datum)
}

// optional .caffe.AnnotatedDatum.AnnotationType type = 2;
inline bool AnnotatedDatum::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AnnotatedDatum::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AnnotatedDatum::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AnnotatedDatum::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::caffe::AnnotatedDatum_AnnotationType AnnotatedDatum::type() const {
  // @@protoc_insertion_point(field_get:caffe.AnnotatedDatum.type)
  return static_cast< ::caffe::AnnotatedDatum_AnnotationType >(type_);
}
inline void AnnotatedDatum::set_type(::caffe::AnnotatedDatum_AnnotationType value) {
  assert(::caffe::AnnotatedDatum_AnnotationType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:caffe.AnnotatedDatum.type)
}

// repeated .caffe.AnnotationGroup annotation_group = 3;
inline int AnnotatedDatum::annotation_group_size() const {
  return annotation_group_.size();
}
inline void AnnotatedDatum::clear_annotation_group() {
  annotation_group_.Clear();
}
inline const ::caffe::AnnotationGroup& AnnotatedDatum::annotation_group(int index) const {
  // @@protoc_insertion_point(field_get:caffe.AnnotatedDatum.annotation_group)
  return annotation_group_.Get(index);
}
inline ::caffe::AnnotationGroup* AnnotatedDatum::mutable_annotation_group(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.AnnotatedDatum.annotation_group)
  return annotation_group_.Mutable(index);
}
inline ::caffe::AnnotationGroup* AnnotatedDatum::add_annotation_group() {
  // @@protoc_insertion_point(field_add:caffe.AnnotatedDatum.annotation_group)
  return annotation_group_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::AnnotationGroup >&
AnnotatedDatum::annotation_group() const {
  // @@protoc_insertion_point(field_list:caffe.AnnotatedDatum.annotation_group)
  return annotation_group_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::AnnotationGroup >*
AnnotatedDatum::mutable_annotation_group() {
  // @@protoc_insertion_point(field_mutable_list:caffe.AnnotatedDatum.annotation_group)
  return &annotation_group_;
}

// optional bool encoded = 4 [default = false];
inline bool AnnotatedDatum::has_encoded() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AnnotatedDatum::set_has_encoded() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AnnotatedDatum::clear_has_encoded() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AnnotatedDatum::clear_encoded() {
  encoded_ = false;
  clear_has_encoded();
}
inline bool AnnotatedDatum::encoded() const {
  // @@protoc_insertion_point(field_get:caffe.AnnotatedDatum.encoded)
  return encoded_;
}
inline void AnnotatedDatum::set_encoded(bool value) {
  set_has_encoded();
  encoded_ = value;
  // @@protoc_insertion_point(field_set:caffe.AnnotatedDatum.encoded)
}

// optional uint32 record_id = 5 [default = 0];
inline bool AnnotatedDatum::has_record_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AnnotatedDatum::set_has_record_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AnnotatedDatum::clear_has_record_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AnnotatedDatum::clear_record_id() {
  record_id_ = 0u;
  clear_has_record_id();
}
inline ::google::protobuf::uint32 AnnotatedDatum::record_id() const {
  // @@protoc_insertion_point(field_get:caffe.AnnotatedDatum.record_id)
  return record_id_;
}
inline void AnnotatedDatum::set_record_id(::google::protobuf::uint32 value) {
  set_has_record_id();
  record_id_ = value;
  // @@protoc_insertion_point(field_set:caffe.AnnotatedDatum.record_id)
}

// optional int32 label = 6;
inline bool AnnotatedDatum::has_label() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AnnotatedDatum::set_has_label() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AnnotatedDatum::clear_has_label() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AnnotatedDatum::clear_label() {
  label_ = 0;
  clear_has_label();
}
inline ::google::protobuf::int32 AnnotatedDatum::label() const {
  // @@protoc_insertion_point(field_get:caffe.AnnotatedDatum.label)
  return label_;
}
inline void AnnotatedDatum::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
  // @@protoc_insertion_point(field_set:caffe.AnnotatedDatum.label)
}

// -------------------------------------------------------------------

// FillerParameter

// optional string type = 1 [default = "constant"];
inline bool FillerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FillerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FillerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FillerParameter::clear_type() {
  if (type_ != _default_type_) {
    type_->assign(*_default_type_);
  }
  clear_has_type();
}
inline const ::std::string& FillerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.type)
  return *type_;
}
inline void FillerParameter::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.type)
}
inline void FillerParameter::set_type(const char* value) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.FillerParameter.type)
}
inline void FillerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.FillerParameter.type)
}
inline ::std::string* FillerParameter::mutable_type() {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string(*_default_type_);
  }
  // @@protoc_insertion_point(field_mutable:caffe.FillerParameter.type)
  return type_;
}
inline ::std::string* FillerParameter::release_type() {
  clear_has_type();
  if (type_ == _default_type_) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(_default_type_);
    return temp;
  }
}
inline void FillerParameter::set_allocated_type(::std::string* type) {
  if (type_ != _default_type_) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(_default_type_);
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.FillerParameter.type)
}

// optional float value = 2 [default = 0];
inline bool FillerParameter::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FillerParameter::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FillerParameter::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FillerParameter::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float FillerParameter::value() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.value)
  return value_;
}
inline void FillerParameter::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.value)
}

// optional float min = 3 [default = 0];
inline bool FillerParameter::has_min() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FillerParameter::set_has_min() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FillerParameter::clear_has_min() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FillerParameter::clear_min() {
  min_ = 0;
  clear_has_min();
}
inline float FillerParameter::min() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.min)
  return min_;
}
inline void FillerParameter::set_min(float value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.min)
}

// optional float max = 4 [default = 1];
inline bool FillerParameter::has_max() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FillerParameter::set_has_max() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FillerParameter::clear_has_max() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FillerParameter::clear_max() {
  max_ = 1;
  clear_has_max();
}
inline float FillerParameter::max() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.max)
  return max_;
}
inline void FillerParameter::set_max(float value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.max)
}

// optional float mean = 5 [default = 0];
inline bool FillerParameter::has_mean() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FillerParameter::set_has_mean() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FillerParameter::clear_has_mean() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FillerParameter::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
inline float FillerParameter::mean() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.mean)
  return mean_;
}
inline void FillerParameter::set_mean(float value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.mean)
}

// optional float std = 6 [default = 1];
inline bool FillerParameter::has_std() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FillerParameter::set_has_std() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FillerParameter::clear_has_std() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FillerParameter::clear_std() {
  std_ = 1;
  clear_has_std();
}
inline float FillerParameter::std() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.std)
  return std_;
}
inline void FillerParameter::set_std(float value) {
  set_has_std();
  std_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.std)
}

// optional int32 sparse = 7 [default = -1];
inline bool FillerParameter::has_sparse() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FillerParameter::set_has_sparse() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FillerParameter::clear_has_sparse() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FillerParameter::clear_sparse() {
  sparse_ = -1;
  clear_has_sparse();
}
inline ::google::protobuf::int32 FillerParameter::sparse() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.sparse)
  return sparse_;
}
inline void FillerParameter::set_sparse(::google::protobuf::int32 value) {
  set_has_sparse();
  sparse_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.sparse)
}

// optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
inline bool FillerParameter::has_variance_norm() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FillerParameter::set_has_variance_norm() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FillerParameter::clear_has_variance_norm() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FillerParameter::clear_variance_norm() {
  variance_norm_ = 0;
  clear_has_variance_norm();
}
inline ::caffe::FillerParameter_VarianceNorm FillerParameter::variance_norm() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.variance_norm)
  return static_cast< ::caffe::FillerParameter_VarianceNorm >(variance_norm_);
}
inline void FillerParameter::set_variance_norm(::caffe::FillerParameter_VarianceNorm value) {
  assert(::caffe::FillerParameter_VarianceNorm_IsValid(value));
  set_has_variance_norm();
  variance_norm_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.variance_norm)
}

// -------------------------------------------------------------------

// NetParameter

// optional string name = 1;
inline bool NetParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetParameter::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NetParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.name)
  return *name_;
}
inline void NetParameter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.NetParameter.name)
}
inline void NetParameter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetParameter.name)
}
inline void NetParameter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetParameter.name)
}
inline ::std::string* NetParameter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.name)
  return name_;
}
inline ::std::string* NetParameter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NetParameter::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.NetParameter.name)
}

// repeated string input = 3;
inline int NetParameter::input_size() const {
  return input_.size();
}
inline void NetParameter::clear_input() {
  input_.Clear();
}
inline const ::std::string& NetParameter::input(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.input)
  return input_.Get(index);
}
inline ::std::string* NetParameter::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.input)
  return input_.Mutable(index);
}
inline void NetParameter::set_input(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetParameter.input)
  input_.Mutable(index)->assign(value);
}
inline void NetParameter::set_input(int index, const char* value) {
  input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetParameter.input)
}
inline void NetParameter::set_input(int index, const char* value, size_t size) {
  input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetParameter.input)
}
inline ::std::string* NetParameter::add_input() {
  return input_.Add();
}
inline void NetParameter::add_input(const ::std::string& value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetParameter.input)
}
inline void NetParameter::add_input(const char* value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetParameter.input)
}
inline void NetParameter::add_input(const char* value, size_t size) {
  input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetParameter.input)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetParameter::input() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.input)
  return input_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetParameter::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.input)
  return &input_;
}

// repeated .caffe.BlobShape input_shape = 8;
inline int NetParameter::input_shape_size() const {
  return input_shape_.size();
}
inline void NetParameter::clear_input_shape() {
  input_shape_.Clear();
}
inline const ::caffe::BlobShape& NetParameter::input_shape(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.input_shape)
  return input_shape_.Get(index);
}
inline ::caffe::BlobShape* NetParameter::mutable_input_shape(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.input_shape)
  return input_shape_.Mutable(index);
}
inline ::caffe::BlobShape* NetParameter::add_input_shape() {
  // @@protoc_insertion_point(field_add:caffe.NetParameter.input_shape)
  return input_shape_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
NetParameter::input_shape() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.input_shape)
  return input_shape_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
NetParameter::mutable_input_shape() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.input_shape)
  return &input_shape_;
}

// repeated int32 input_dim = 4;
inline int NetParameter::input_dim_size() const {
  return input_dim_.size();
}
inline void NetParameter::clear_input_dim() {
  input_dim_.Clear();
}
inline ::google::protobuf::int32 NetParameter::input_dim(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.input_dim)
  return input_dim_.Get(index);
}
inline void NetParameter::set_input_dim(int index, ::google::protobuf::int32 value) {
  input_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.NetParameter.input_dim)
}
inline void NetParameter::add_input_dim(::google::protobuf::int32 value) {
  input_dim_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.NetParameter.input_dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetParameter::input_dim() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.input_dim)
  return input_dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetParameter::mutable_input_dim() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.input_dim)
  return &input_dim_;
}

// optional bool force_backward = 5 [default = false];
inline bool NetParameter::has_force_backward() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetParameter::set_has_force_backward() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetParameter::clear_has_force_backward() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetParameter::clear_force_backward() {
  force_backward_ = false;
  clear_has_force_backward();
}
inline bool NetParameter::force_backward() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.force_backward)
  return force_backward_;
}
inline void NetParameter::set_force_backward(bool value) {
  set_has_force_backward();
  force_backward_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetParameter.force_backward)
}

// optional .caffe.NetState state = 6;
inline bool NetParameter::has_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetParameter::set_has_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetParameter::clear_has_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetParameter::clear_state() {
  if (state_ != NULL) state_->::caffe::NetState::Clear();
  clear_has_state();
}
inline const ::caffe::NetState& NetParameter::state() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.state)
  return state_ != NULL ? *state_ : *default_instance_->state_;
}
inline ::caffe::NetState* NetParameter::mutable_state() {
  set_has_state();
  if (state_ == NULL) state_ = new ::caffe::NetState;
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.state)
  return state_;
}
inline ::caffe::NetState* NetParameter::release_state() {
  clear_has_state();
  ::caffe::NetState* temp = state_;
  state_ = NULL;
  return temp;
}
inline void NetParameter::set_allocated_state(::caffe::NetState* state) {
  delete state_;
  state_ = state;
  if (state) {
    set_has_state();
  } else {
    clear_has_state();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.NetParameter.state)
}

// optional bool debug_info = 7 [default = false];
inline bool NetParameter::has_debug_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NetParameter::set_has_debug_info() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NetParameter::clear_has_debug_info() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NetParameter::clear_debug_info() {
  debug_info_ = false;
  clear_has_debug_info();
}
inline bool NetParameter::debug_info() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.debug_info)
  return debug_info_;
}
inline void NetParameter::set_debug_info(bool value) {
  set_has_debug_info();
  debug_info_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetParameter.debug_info)
}

// repeated .caffe.LayerParameter layer = 100;
inline int NetParameter::layer_size() const {
  return layer_.size();
}
inline void NetParameter::clear_layer() {
  layer_.Clear();
}
inline const ::caffe::LayerParameter& NetParameter::layer(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.layer)
  return layer_.Get(index);
}
inline ::caffe::LayerParameter* NetParameter::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.layer)
  return layer_.Mutable(index);
}
inline ::caffe::LayerParameter* NetParameter::add_layer() {
  // @@protoc_insertion_point(field_add:caffe.NetParameter.layer)
  return layer_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >&
NetParameter::layer() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.layer)
  return layer_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >*
NetParameter::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.layer)
  return &layer_;
}

// repeated .caffe.V1LayerParameter layers = 2;
inline int NetParameter::layers_size() const {
  return layers_.size();
}
inline void NetParameter::clear_layers() {
  layers_.Clear();
}
inline const ::caffe::V1LayerParameter& NetParameter::layers(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.layers)
  return layers_.Get(index);
}
inline ::caffe::V1LayerParameter* NetParameter::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.layers)
  return layers_.Mutable(index);
}
inline ::caffe::V1LayerParameter* NetParameter::add_layers() {
  // @@protoc_insertion_point(field_add:caffe.NetParameter.layers)
  return layers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::V1LayerParameter >&
NetParameter::layers() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.layers)
  return layers_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::V1LayerParameter >*
NetParameter::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.layers)
  return &layers_;
}

// optional .caffe.Type default_forward_type = 11 [default = FLOAT];
inline bool NetParameter::has_default_forward_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NetParameter::set_has_default_forward_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void NetParameter::clear_has_default_forward_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void NetParameter::clear_default_forward_type() {
  default_forward_type_ = 1;
  clear_has_default_forward_type();
}
inline ::caffe::Type NetParameter::default_forward_type() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.default_forward_type)
  return static_cast< ::caffe::Type >(default_forward_type_);
}
inline void NetParameter::set_default_forward_type(::caffe::Type value) {
  assert(::caffe::Type_IsValid(value));
  set_has_default_forward_type();
  default_forward_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetParameter.default_forward_type)
}

// optional .caffe.Type default_backward_type = 12 [default = FLOAT];
inline bool NetParameter::has_default_backward_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void NetParameter::set_has_default_backward_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void NetParameter::clear_has_default_backward_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void NetParameter::clear_default_backward_type() {
  default_backward_type_ = 1;
  clear_has_default_backward_type();
}
inline ::caffe::Type NetParameter::default_backward_type() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.default_backward_type)
  return static_cast< ::caffe::Type >(default_backward_type_);
}
inline void NetParameter::set_default_backward_type(::caffe::Type value) {
  assert(::caffe::Type_IsValid(value));
  set_has_default_backward_type();
  default_backward_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetParameter.default_backward_type)
}

// optional .caffe.Type default_forward_math = 13 [default = FLOAT];
inline bool NetParameter::has_default_forward_math() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void NetParameter::set_has_default_forward_math() {
  _has_bits_[0] |= 0x00000800u;
}
inline void NetParameter::clear_has_default_forward_math() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void NetParameter::clear_default_forward_math() {
  default_forward_math_ = 1;
  clear_has_default_forward_math();
}
inline ::caffe::Type NetParameter::default_forward_math() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.default_forward_math)
  return static_cast< ::caffe::Type >(default_forward_math_);
}
inline void NetParameter::set_default_forward_math(::caffe::Type value) {
  assert(::caffe::Type_IsValid(value));
  set_has_default_forward_math();
  default_forward_math_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetParameter.default_forward_math)
}

// optional .caffe.Type default_backward_math = 14 [default = FLOAT];
inline bool NetParameter::has_default_backward_math() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void NetParameter::set_has_default_backward_math() {
  _has_bits_[0] |= 0x00001000u;
}
inline void NetParameter::clear_has_default_backward_math() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void NetParameter::clear_default_backward_math() {
  default_backward_math_ = 1;
  clear_has_default_backward_math();
}
inline ::caffe::Type NetParameter::default_backward_math() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.default_backward_math)
  return static_cast< ::caffe::Type >(default_backward_math_);
}
inline void NetParameter::set_default_backward_math(::caffe::Type value) {
  assert(::caffe::Type_IsValid(value));
  set_has_default_backward_math();
  default_backward_math_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetParameter.default_backward_math)
}

// optional string default_conv_algos_override = 17 [default = "-1,-1,-1"];
inline bool NetParameter::has_default_conv_algos_override() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void NetParameter::set_has_default_conv_algos_override() {
  _has_bits_[0] |= 0x00002000u;
}
inline void NetParameter::clear_has_default_conv_algos_override() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void NetParameter::clear_default_conv_algos_override() {
  if (default_conv_algos_override_ != _default_default_conv_algos_override_) {
    default_conv_algos_override_->assign(*_default_default_conv_algos_override_);
  }
  clear_has_default_conv_algos_override();
}
inline const ::std::string& NetParameter::default_conv_algos_override() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.default_conv_algos_override)
  return *default_conv_algos_override_;
}
inline void NetParameter::set_default_conv_algos_override(const ::std::string& value) {
  set_has_default_conv_algos_override();
  if (default_conv_algos_override_ == _default_default_conv_algos_override_) {
    default_conv_algos_override_ = new ::std::string;
  }
  default_conv_algos_override_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.NetParameter.default_conv_algos_override)
}
inline void NetParameter::set_default_conv_algos_override(const char* value) {
  set_has_default_conv_algos_override();
  if (default_conv_algos_override_ == _default_default_conv_algos_override_) {
    default_conv_algos_override_ = new ::std::string;
  }
  default_conv_algos_override_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetParameter.default_conv_algos_override)
}
inline void NetParameter::set_default_conv_algos_override(const char* value, size_t size) {
  set_has_default_conv_algos_override();
  if (default_conv_algos_override_ == _default_default_conv_algos_override_) {
    default_conv_algos_override_ = new ::std::string;
  }
  default_conv_algos_override_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetParameter.default_conv_algos_override)
}
inline ::std::string* NetParameter::mutable_default_conv_algos_override() {
  set_has_default_conv_algos_override();
  if (default_conv_algos_override_ == _default_default_conv_algos_override_) {
    default_conv_algos_override_ = new ::std::string(*_default_default_conv_algos_override_);
  }
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.default_conv_algos_override)
  return default_conv_algos_override_;
}
inline ::std::string* NetParameter::release_default_conv_algos_override() {
  clear_has_default_conv_algos_override();
  if (default_conv_algos_override_ == _default_default_conv_algos_override_) {
    return NULL;
  } else {
    ::std::string* temp = default_conv_algos_override_;
    default_conv_algos_override_ = const_cast< ::std::string*>(_default_default_conv_algos_override_);
    return temp;
  }
}
inline void NetParameter::set_allocated_default_conv_algos_override(::std::string* default_conv_algos_override) {
  if (default_conv_algos_override_ != _default_default_conv_algos_override_) {
    delete default_conv_algos_override_;
  }
  if (default_conv_algos_override) {
    set_has_default_conv_algos_override();
    default_conv_algos_override_ = default_conv_algos_override;
  } else {
    clear_has_default_conv_algos_override();
    default_conv_algos_override_ = const_cast< ::std::string*>(_default_default_conv_algos_override_);
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.NetParameter.default_conv_algos_override)
}

// optional int32 reduce_buckets = 18 [default = 6];
inline bool NetParameter::has_reduce_buckets() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void NetParameter::set_has_reduce_buckets() {
  _has_bits_[0] |= 0x00004000u;
}
inline void NetParameter::clear_has_reduce_buckets() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void NetParameter::clear_reduce_buckets() {
  reduce_buckets_ = 6;
  clear_has_reduce_buckets();
}
inline ::google::protobuf::int32 NetParameter::reduce_buckets() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.reduce_buckets)
  return reduce_buckets_;
}
inline void NetParameter::set_reduce_buckets(::google::protobuf::int32 value) {
  set_has_reduce_buckets();
  reduce_buckets_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetParameter.reduce_buckets)
}

// -------------------------------------------------------------------

// SolverParameter

// optional string net = 24;
inline bool SolverParameter::has_net() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SolverParameter::set_has_net() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SolverParameter::clear_has_net() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SolverParameter::clear_net() {
  if (net_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    net_->clear();
  }
  clear_has_net();
}
inline const ::std::string& SolverParameter::net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.net)
  return *net_;
}
inline void SolverParameter::set_net(const ::std::string& value) {
  set_has_net();
  if (net_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    net_ = new ::std::string;
  }
  net_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.net)
}
inline void SolverParameter::set_net(const char* value) {
  set_has_net();
  if (net_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    net_ = new ::std::string;
  }
  net_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.net)
}
inline void SolverParameter::set_net(const char* value, size_t size) {
  set_has_net();
  if (net_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    net_ = new ::std::string;
  }
  net_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.net)
}
inline ::std::string* SolverParameter::mutable_net() {
  set_has_net();
  if (net_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    net_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.net)
  return net_;
}
inline ::std::string* SolverParameter::release_net() {
  clear_has_net();
  if (net_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = net_;
    net_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SolverParameter::set_allocated_net(::std::string* net) {
  if (net_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete net_;
  }
  if (net) {
    set_has_net();
    net_ = net;
  } else {
    clear_has_net();
    net_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.net)
}

// optional .caffe.NetParameter net_param = 25;
inline bool SolverParameter::has_net_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SolverParameter::set_has_net_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SolverParameter::clear_has_net_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SolverParameter::clear_net_param() {
  if (net_param_ != NULL) net_param_->::caffe::NetParameter::Clear();
  clear_has_net_param();
}
inline const ::caffe::NetParameter& SolverParameter::net_param() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.net_param)
  return net_param_ != NULL ? *net_param_ : *default_instance_->net_param_;
}
inline ::caffe::NetParameter* SolverParameter::mutable_net_param() {
  set_has_net_param();
  if (net_param_ == NULL) net_param_ = new ::caffe::NetParameter;
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.net_param)
  return net_param_;
}
inline ::caffe::NetParameter* SolverParameter::release_net_param() {
  clear_has_net_param();
  ::caffe::NetParameter* temp = net_param_;
  net_param_ = NULL;
  return temp;
}
inline void SolverParameter::set_allocated_net_param(::caffe::NetParameter* net_param) {
  delete net_param_;
  net_param_ = net_param;
  if (net_param) {
    set_has_net_param();
  } else {
    clear_has_net_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.net_param)
}

// optional string train_net = 1;
inline bool SolverParameter::has_train_net() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SolverParameter::set_has_train_net() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SolverParameter::clear_has_train_net() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SolverParameter::clear_train_net() {
  if (train_net_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    train_net_->clear();
  }
  clear_has_train_net();
}
inline const ::std::string& SolverParameter::train_net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.train_net)
  return *train_net_;
}
inline void SolverParameter::set_train_net(const ::std::string& value) {
  set_has_train_net();
  if (train_net_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    train_net_ = new ::std::string;
  }
  train_net_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.train_net)
}
inline void SolverParameter::set_train_net(const char* value) {
  set_has_train_net();
  if (train_net_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    train_net_ = new ::std::string;
  }
  train_net_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.train_net)
}
inline void SolverParameter::set_train_net(const char* value, size_t size) {
  set_has_train_net();
  if (train_net_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    train_net_ = new ::std::string;
  }
  train_net_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.train_net)
}
inline ::std::string* SolverParameter::mutable_train_net() {
  set_has_train_net();
  if (train_net_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    train_net_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.train_net)
  return train_net_;
}
inline ::std::string* SolverParameter::release_train_net() {
  clear_has_train_net();
  if (train_net_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = train_net_;
    train_net_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SolverParameter::set_allocated_train_net(::std::string* train_net) {
  if (train_net_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete train_net_;
  }
  if (train_net) {
    set_has_train_net();
    train_net_ = train_net;
  } else {
    clear_has_train_net();
    train_net_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.train_net)
}

// repeated string test_net = 2;
inline int SolverParameter::test_net_size() const {
  return test_net_.size();
}
inline void SolverParameter::clear_test_net() {
  test_net_.Clear();
}
inline const ::std::string& SolverParameter::test_net(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_net)
  return test_net_.Get(index);
}
inline ::std::string* SolverParameter::mutable_test_net(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.test_net)
  return test_net_.Mutable(index);
}
inline void SolverParameter::set_test_net(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_net)
  test_net_.Mutable(index)->assign(value);
}
inline void SolverParameter::set_test_net(int index, const char* value) {
  test_net_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.test_net)
}
inline void SolverParameter::set_test_net(int index, const char* value, size_t size) {
  test_net_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.test_net)
}
inline ::std::string* SolverParameter::add_test_net() {
  return test_net_.Add();
}
inline void SolverParameter::add_test_net(const ::std::string& value) {
  test_net_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_net)
}
inline void SolverParameter::add_test_net(const char* value) {
  test_net_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.SolverParameter.test_net)
}
inline void SolverParameter::add_test_net(const char* value, size_t size) {
  test_net_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.SolverParameter.test_net)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SolverParameter::test_net() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.test_net)
  return test_net_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SolverParameter::mutable_test_net() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.test_net)
  return &test_net_;
}

// optional .caffe.NetParameter train_net_param = 21;
inline bool SolverParameter::has_train_net_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SolverParameter::set_has_train_net_param() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SolverParameter::clear_has_train_net_param() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SolverParameter::clear_train_net_param() {
  if (train_net_param_ != NULL) train_net_param_->::caffe::NetParameter::Clear();
  clear_has_train_net_param();
}
inline const ::caffe::NetParameter& SolverParameter::train_net_param() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.train_net_param)
  return train_net_param_ != NULL ? *train_net_param_ : *default_instance_->train_net_param_;
}
inline ::caffe::NetParameter* SolverParameter::mutable_train_net_param() {
  set_has_train_net_param();
  if (train_net_param_ == NULL) train_net_param_ = new ::caffe::NetParameter;
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.train_net_param)
  return train_net_param_;
}
inline ::caffe::NetParameter* SolverParameter::release_train_net_param() {
  clear_has_train_net_param();
  ::caffe::NetParameter* temp = train_net_param_;
  train_net_param_ = NULL;
  return temp;
}
inline void SolverParameter::set_allocated_train_net_param(::caffe::NetParameter* train_net_param) {
  delete train_net_param_;
  train_net_param_ = train_net_param;
  if (train_net_param) {
    set_has_train_net_param();
  } else {
    clear_has_train_net_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.train_net_param)
}

// repeated .caffe.NetParameter test_net_param = 22;
inline int SolverParameter::test_net_param_size() const {
  return test_net_param_.size();
}
inline void SolverParameter::clear_test_net_param() {
  test_net_param_.Clear();
}
inline const ::caffe::NetParameter& SolverParameter::test_net_param(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_net_param)
  return test_net_param_.Get(index);
}
inline ::caffe::NetParameter* SolverParameter::mutable_test_net_param(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.test_net_param)
  return test_net_param_.Mutable(index);
}
inline ::caffe::NetParameter* SolverParameter::add_test_net_param() {
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_net_param)
  return test_net_param_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter >&
SolverParameter::test_net_param() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.test_net_param)
  return test_net_param_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter >*
SolverParameter::mutable_test_net_param() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.test_net_param)
  return &test_net_param_;
}

// optional .caffe.NetState train_state = 26;
inline bool SolverParameter::has_train_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SolverParameter::set_has_train_state() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SolverParameter::clear_has_train_state() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SolverParameter::clear_train_state() {
  if (train_state_ != NULL) train_state_->::caffe::NetState::Clear();
  clear_has_train_state();
}
inline const ::caffe::NetState& SolverParameter::train_state() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.train_state)
  return train_state_ != NULL ? *train_state_ : *default_instance_->train_state_;
}
inline ::caffe::NetState* SolverParameter::mutable_train_state() {
  set_has_train_state();
  if (train_state_ == NULL) train_state_ = new ::caffe::NetState;
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.train_state)
  return train_state_;
}
inline ::caffe::NetState* SolverParameter::release_train_state() {
  clear_has_train_state();
  ::caffe::NetState* temp = train_state_;
  train_state_ = NULL;
  return temp;
}
inline void SolverParameter::set_allocated_train_state(::caffe::NetState* train_state) {
  delete train_state_;
  train_state_ = train_state;
  if (train_state) {
    set_has_train_state();
  } else {
    clear_has_train_state();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.train_state)
}

// repeated .caffe.NetState test_state = 27;
inline int SolverParameter::test_state_size() const {
  return test_state_.size();
}
inline void SolverParameter::clear_test_state() {
  test_state_.Clear();
}
inline const ::caffe::NetState& SolverParameter::test_state(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_state)
  return test_state_.Get(index);
}
inline ::caffe::NetState* SolverParameter::mutable_test_state(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.test_state)
  return test_state_.Mutable(index);
}
inline ::caffe::NetState* SolverParameter::add_test_state() {
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_state)
  return test_state_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetState >&
SolverParameter::test_state() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.test_state)
  return test_state_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NetState >*
SolverParameter::mutable_test_state() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.test_state)
  return &test_state_;
}

// repeated int32 test_iter = 3;
inline int SolverParameter::test_iter_size() const {
  return test_iter_.size();
}
inline void SolverParameter::clear_test_iter() {
  test_iter_.Clear();
}
inline ::google::protobuf::int32 SolverParameter::test_iter(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_iter)
  return test_iter_.Get(index);
}
inline void SolverParameter::set_test_iter(int index, ::google::protobuf::int32 value) {
  test_iter_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_iter)
}
inline void SolverParameter::add_test_iter(::google::protobuf::int32 value) {
  test_iter_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_iter)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SolverParameter::test_iter() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.test_iter)
  return test_iter_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SolverParameter::mutable_test_iter() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.test_iter)
  return &test_iter_;
}

// optional int32 test_interval = 4 [default = 0];
inline bool SolverParameter::has_test_interval() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SolverParameter::set_has_test_interval() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SolverParameter::clear_has_test_interval() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SolverParameter::clear_test_interval() {
  test_interval_ = 0;
  clear_has_test_interval();
}
inline ::google::protobuf::int32 SolverParameter::test_interval() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_interval)
  return test_interval_;
}
inline void SolverParameter::set_test_interval(::google::protobuf::int32 value) {
  set_has_test_interval();
  test_interval_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_interval)
}

// optional bool test_compute_loss = 19 [default = false];
inline bool SolverParameter::has_test_compute_loss() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SolverParameter::set_has_test_compute_loss() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SolverParameter::clear_has_test_compute_loss() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SolverParameter::clear_test_compute_loss() {
  test_compute_loss_ = false;
  clear_has_test_compute_loss();
}
inline bool SolverParameter::test_compute_loss() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_compute_loss)
  return test_compute_loss_;
}
inline void SolverParameter::set_test_compute_loss(bool value) {
  set_has_test_compute_loss();
  test_compute_loss_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_compute_loss)
}

// optional bool test_initialization = 32 [default = true];
inline bool SolverParameter::has_test_initialization() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SolverParameter::set_has_test_initialization() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SolverParameter::clear_has_test_initialization() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SolverParameter::clear_test_initialization() {
  test_initialization_ = true;
  clear_has_test_initialization();
}
inline bool SolverParameter::test_initialization() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_initialization)
  return test_initialization_;
}
inline void SolverParameter::set_test_initialization(bool value) {
  set_has_test_initialization();
  test_initialization_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_initialization)
}

// optional int32 rampup_interval = 41 [default = 0];
inline bool SolverParameter::has_rampup_interval() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SolverParameter::set_has_rampup_interval() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SolverParameter::clear_has_rampup_interval() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SolverParameter::clear_rampup_interval() {
  rampup_interval_ = 0;
  clear_has_rampup_interval();
}
inline ::google::protobuf::int32 SolverParameter::rampup_interval() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.rampup_interval)
  return rampup_interval_;
}
inline void SolverParameter::set_rampup_interval(::google::protobuf::int32 value) {
  set_has_rampup_interval();
  rampup_interval_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.rampup_interval)
}

// optional float rampup_lr = 42 [default = 0];
inline bool SolverParameter::has_rampup_lr() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SolverParameter::set_has_rampup_lr() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SolverParameter::clear_has_rampup_lr() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SolverParameter::clear_rampup_lr() {
  rampup_lr_ = 0;
  clear_has_rampup_lr();
}
inline float SolverParameter::rampup_lr() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.rampup_lr)
  return rampup_lr_;
}
inline void SolverParameter::set_rampup_lr(float value) {
  set_has_rampup_lr();
  rampup_lr_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.rampup_lr)
}

// optional float min_lr = 43 [default = 0];
inline bool SolverParameter::has_min_lr() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SolverParameter::set_has_min_lr() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SolverParameter::clear_has_min_lr() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SolverParameter::clear_min_lr() {
  min_lr_ = 0;
  clear_has_min_lr();
}
inline float SolverParameter::min_lr() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.min_lr)
  return min_lr_;
}
inline void SolverParameter::set_min_lr(float value) {
  set_has_min_lr();
  min_lr_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.min_lr)
}

// optional float base_lr = 5;
inline bool SolverParameter::has_base_lr() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SolverParameter::set_has_base_lr() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SolverParameter::clear_has_base_lr() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SolverParameter::clear_base_lr() {
  base_lr_ = 0;
  clear_has_base_lr();
}
inline float SolverParameter::base_lr() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.base_lr)
  return base_lr_;
}
inline void SolverParameter::set_base_lr(float value) {
  set_has_base_lr();
  base_lr_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.base_lr)
}

// optional int32 display = 6;
inline bool SolverParameter::has_display() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SolverParameter::set_has_display() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SolverParameter::clear_has_display() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SolverParameter::clear_display() {
  display_ = 0;
  clear_has_display();
}
inline ::google::protobuf::int32 SolverParameter::display() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.display)
  return display_;
}
inline void SolverParameter::set_display(::google::protobuf::int32 value) {
  set_has_display();
  display_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.display)
}

// optional int32 average_loss = 33 [default = 1];
inline bool SolverParameter::has_average_loss() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SolverParameter::set_has_average_loss() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SolverParameter::clear_has_average_loss() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SolverParameter::clear_average_loss() {
  average_loss_ = 1;
  clear_has_average_loss();
}
inline ::google::protobuf::int32 SolverParameter::average_loss() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.average_loss)
  return average_loss_;
}
inline void SolverParameter::set_average_loss(::google::protobuf::int32 value) {
  set_has_average_loss();
  average_loss_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.average_loss)
}

// optional int32 max_iter = 7;
inline bool SolverParameter::has_max_iter() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SolverParameter::set_has_max_iter() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SolverParameter::clear_has_max_iter() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SolverParameter::clear_max_iter() {
  max_iter_ = 0;
  clear_has_max_iter();
}
inline ::google::protobuf::int32 SolverParameter::max_iter() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.max_iter)
  return max_iter_;
}
inline void SolverParameter::set_max_iter(::google::protobuf::int32 value) {
  set_has_max_iter();
  max_iter_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.max_iter)
}

// optional int32 iter_size = 36 [default = 1];
inline bool SolverParameter::has_iter_size() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SolverParameter::set_has_iter_size() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SolverParameter::clear_has_iter_size() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SolverParameter::clear_iter_size() {
  iter_size_ = 1;
  clear_has_iter_size();
}
inline ::google::protobuf::int32 SolverParameter::iter_size() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.iter_size)
  return iter_size_;
}
inline void SolverParameter::set_iter_size(::google::protobuf::int32 value) {
  set_has_iter_size();
  iter_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.iter_size)
}

// optional string lr_policy = 8;
inline bool SolverParameter::has_lr_policy() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SolverParameter::set_has_lr_policy() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SolverParameter::clear_has_lr_policy() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SolverParameter::clear_lr_policy() {
  if (lr_policy_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lr_policy_->clear();
  }
  clear_has_lr_policy();
}
inline const ::std::string& SolverParameter::lr_policy() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.lr_policy)
  return *lr_policy_;
}
inline void SolverParameter::set_lr_policy(const ::std::string& value) {
  set_has_lr_policy();
  if (lr_policy_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lr_policy_ = new ::std::string;
  }
  lr_policy_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.lr_policy)
}
inline void SolverParameter::set_lr_policy(const char* value) {
  set_has_lr_policy();
  if (lr_policy_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lr_policy_ = new ::std::string;
  }
  lr_policy_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.lr_policy)
}
inline void SolverParameter::set_lr_policy(const char* value, size_t size) {
  set_has_lr_policy();
  if (lr_policy_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lr_policy_ = new ::std::string;
  }
  lr_policy_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.lr_policy)
}
inline ::std::string* SolverParameter::mutable_lr_policy() {
  set_has_lr_policy();
  if (lr_policy_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lr_policy_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.lr_policy)
  return lr_policy_;
}
inline ::std::string* SolverParameter::release_lr_policy() {
  clear_has_lr_policy();
  if (lr_policy_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = lr_policy_;
    lr_policy_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SolverParameter::set_allocated_lr_policy(::std::string* lr_policy) {
  if (lr_policy_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lr_policy_;
  }
  if (lr_policy) {
    set_has_lr_policy();
    lr_policy_ = lr_policy;
  } else {
    clear_has_lr_policy();
    lr_policy_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.lr_policy)
}

// optional float gamma = 9;
inline bool SolverParameter::has_gamma() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SolverParameter::set_has_gamma() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SolverParameter::clear_has_gamma() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SolverParameter::clear_gamma() {
  gamma_ = 0;
  clear_has_gamma();
}
inline float SolverParameter::gamma() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.gamma)
  return gamma_;
}
inline void SolverParameter::set_gamma(float value) {
  set_has_gamma();
  gamma_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.gamma)
}

// optional float power = 10;
inline bool SolverParameter::has_power() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SolverParameter::set_has_power() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SolverParameter::clear_has_power() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SolverParameter::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline float SolverParameter::power() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.power)
  return power_;
}
inline void SolverParameter::set_power(float value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.power)
}

// optional float momentum = 11;
inline bool SolverParameter::has_momentum() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SolverParameter::set_has_momentum() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SolverParameter::clear_has_momentum() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SolverParameter::clear_momentum() {
  momentum_ = 0;
  clear_has_momentum();
}
inline float SolverParameter::momentum() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.momentum)
  return momentum_;
}
inline void SolverParameter::set_momentum(float value) {
  set_has_momentum();
  momentum_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.momentum)
}

// optional string momentum_policy = 46 [default = "fixed"];
inline bool SolverParameter::has_momentum_policy() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SolverParameter::set_has_momentum_policy() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SolverParameter::clear_has_momentum_policy() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SolverParameter::clear_momentum_policy() {
  if (momentum_policy_ != _default_momentum_policy_) {
    momentum_policy_->assign(*_default_momentum_policy_);
  }
  clear_has_momentum_policy();
}
inline const ::std::string& SolverParameter::momentum_policy() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.momentum_policy)
  return *momentum_policy_;
}
inline void SolverParameter::set_momentum_policy(const ::std::string& value) {
  set_has_momentum_policy();
  if (momentum_policy_ == _default_momentum_policy_) {
    momentum_policy_ = new ::std::string;
  }
  momentum_policy_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.momentum_policy)
}
inline void SolverParameter::set_momentum_policy(const char* value) {
  set_has_momentum_policy();
  if (momentum_policy_ == _default_momentum_policy_) {
    momentum_policy_ = new ::std::string;
  }
  momentum_policy_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.momentum_policy)
}
inline void SolverParameter::set_momentum_policy(const char* value, size_t size) {
  set_has_momentum_policy();
  if (momentum_policy_ == _default_momentum_policy_) {
    momentum_policy_ = new ::std::string;
  }
  momentum_policy_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.momentum_policy)
}
inline ::std::string* SolverParameter::mutable_momentum_policy() {
  set_has_momentum_policy();
  if (momentum_policy_ == _default_momentum_policy_) {
    momentum_policy_ = new ::std::string(*_default_momentum_policy_);
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.momentum_policy)
  return momentum_policy_;
}
inline ::std::string* SolverParameter::release_momentum_policy() {
  clear_has_momentum_policy();
  if (momentum_policy_ == _default_momentum_policy_) {
    return NULL;
  } else {
    ::std::string* temp = momentum_policy_;
    momentum_policy_ = const_cast< ::std::string*>(_default_momentum_policy_);
    return temp;
  }
}
inline void SolverParameter::set_allocated_momentum_policy(::std::string* momentum_policy) {
  if (momentum_policy_ != _default_momentum_policy_) {
    delete momentum_policy_;
  }
  if (momentum_policy) {
    set_has_momentum_policy();
    momentum_policy_ = momentum_policy;
  } else {
    clear_has_momentum_policy();
    momentum_policy_ = const_cast< ::std::string*>(_default_momentum_policy_);
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.momentum_policy)
}

// optional float max_momentum = 47 [default = 0.99];
inline bool SolverParameter::has_max_momentum() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SolverParameter::set_has_max_momentum() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SolverParameter::clear_has_max_momentum() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SolverParameter::clear_max_momentum() {
  max_momentum_ = 0.99f;
  clear_has_max_momentum();
}
inline float SolverParameter::max_momentum() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.max_momentum)
  return max_momentum_;
}
inline void SolverParameter::set_max_momentum(float value) {
  set_has_max_momentum();
  max_momentum_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.max_momentum)
}

// optional float momentum_power = 48 [default = 1];
inline bool SolverParameter::has_momentum_power() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SolverParameter::set_has_momentum_power() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SolverParameter::clear_has_momentum_power() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SolverParameter::clear_momentum_power() {
  momentum_power_ = 1;
  clear_has_momentum_power();
}
inline float SolverParameter::momentum_power() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.momentum_power)
  return momentum_power_;
}
inline void SolverParameter::set_momentum_power(float value) {
  set_has_momentum_power();
  momentum_power_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.momentum_power)
}

// optional float weight_decay = 12;
inline bool SolverParameter::has_weight_decay() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SolverParameter::set_has_weight_decay() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SolverParameter::clear_has_weight_decay() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SolverParameter::clear_weight_decay() {
  weight_decay_ = 0;
  clear_has_weight_decay();
}
inline float SolverParameter::weight_decay() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.weight_decay)
  return weight_decay_;
}
inline void SolverParameter::set_weight_decay(float value) {
  set_has_weight_decay();
  weight_decay_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.weight_decay)
}

// optional string regularization_type = 29 [default = "L2"];
inline bool SolverParameter::has_regularization_type() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SolverParameter::set_has_regularization_type() {
  _has_bits_[0] |= 0x10000000u;
}
inline void SolverParameter::clear_has_regularization_type() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void SolverParameter::clear_regularization_type() {
  if (regularization_type_ != _default_regularization_type_) {
    regularization_type_->assign(*_default_regularization_type_);
  }
  clear_has_regularization_type();
}
inline const ::std::string& SolverParameter::regularization_type() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.regularization_type)
  return *regularization_type_;
}
inline void SolverParameter::set_regularization_type(const ::std::string& value) {
  set_has_regularization_type();
  if (regularization_type_ == _default_regularization_type_) {
    regularization_type_ = new ::std::string;
  }
  regularization_type_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.regularization_type)
}
inline void SolverParameter::set_regularization_type(const char* value) {
  set_has_regularization_type();
  if (regularization_type_ == _default_regularization_type_) {
    regularization_type_ = new ::std::string;
  }
  regularization_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.regularization_type)
}
inline void SolverParameter::set_regularization_type(const char* value, size_t size) {
  set_has_regularization_type();
  if (regularization_type_ == _default_regularization_type_) {
    regularization_type_ = new ::std::string;
  }
  regularization_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.regularization_type)
}
inline ::std::string* SolverParameter::mutable_regularization_type() {
  set_has_regularization_type();
  if (regularization_type_ == _default_regularization_type_) {
    regularization_type_ = new ::std::string(*_default_regularization_type_);
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.regularization_type)
  return regularization_type_;
}
inline ::std::string* SolverParameter::release_regularization_type() {
  clear_has_regularization_type();
  if (regularization_type_ == _default_regularization_type_) {
    return NULL;
  } else {
    ::std::string* temp = regularization_type_;
    regularization_type_ = const_cast< ::std::string*>(_default_regularization_type_);
    return temp;
  }
}
inline void SolverParameter::set_allocated_regularization_type(::std::string* regularization_type) {
  if (regularization_type_ != _default_regularization_type_) {
    delete regularization_type_;
  }
  if (regularization_type) {
    set_has_regularization_type();
    regularization_type_ = regularization_type;
  } else {
    clear_has_regularization_type();
    regularization_type_ = const_cast< ::std::string*>(_default_regularization_type_);
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.regularization_type)
}

// optional int32 stepsize = 13;
inline bool SolverParameter::has_stepsize() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void SolverParameter::set_has_stepsize() {
  _has_bits_[0] |= 0x20000000u;
}
inline void SolverParameter::clear_has_stepsize() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void SolverParameter::clear_stepsize() {
  stepsize_ = 0;
  clear_has_stepsize();
}
inline ::google::protobuf::int32 SolverParameter::stepsize() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.stepsize)
  return stepsize_;
}
inline void SolverParameter::set_stepsize(::google::protobuf::int32 value) {
  set_has_stepsize();
  stepsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.stepsize)
}

// repeated int32 stepvalue = 34;
inline int SolverParameter::stepvalue_size() const {
  return stepvalue_.size();
}
inline void SolverParameter::clear_stepvalue() {
  stepvalue_.Clear();
}
inline ::google::protobuf::int32 SolverParameter::stepvalue(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.stepvalue)
  return stepvalue_.Get(index);
}
inline void SolverParameter::set_stepvalue(int index, ::google::protobuf::int32 value) {
  stepvalue_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.stepvalue)
}
inline void SolverParameter::add_stepvalue(::google::protobuf::int32 value) {
  stepvalue_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.stepvalue)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SolverParameter::stepvalue() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.stepvalue)
  return stepvalue_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SolverParameter::mutable_stepvalue() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.stepvalue)
  return &stepvalue_;
}

// optional float clip_gradients = 35 [default = -1];
inline bool SolverParameter::has_clip_gradients() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void SolverParameter::set_has_clip_gradients() {
  _has_bits_[0] |= 0x80000000u;
}
inline void SolverParameter::clear_has_clip_gradients() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void SolverParameter::clear_clip_gradients() {
  clip_gradients_ = -1;
  clear_has_clip_gradients();
}
inline float SolverParameter::clip_gradients() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.clip_gradients)
  return clip_gradients_;
}
inline void SolverParameter::set_clip_gradients(float value) {
  set_has_clip_gradients();
  clip_gradients_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.clip_gradients)
}

// optional int32 snapshot = 14 [default = 0];
inline bool SolverParameter::has_snapshot() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void SolverParameter::set_has_snapshot() {
  _has_bits_[1] |= 0x00000001u;
}
inline void SolverParameter::clear_has_snapshot() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void SolverParameter::clear_snapshot() {
  snapshot_ = 0;
  clear_has_snapshot();
}
inline ::google::protobuf::int32 SolverParameter::snapshot() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot)
  return snapshot_;
}
inline void SolverParameter::set_snapshot(::google::protobuf::int32 value) {
  set_has_snapshot();
  snapshot_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot)
}

// optional string snapshot_prefix = 15;
inline bool SolverParameter::has_snapshot_prefix() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void SolverParameter::set_has_snapshot_prefix() {
  _has_bits_[1] |= 0x00000002u;
}
inline void SolverParameter::clear_has_snapshot_prefix() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void SolverParameter::clear_snapshot_prefix() {
  if (snapshot_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    snapshot_prefix_->clear();
  }
  clear_has_snapshot_prefix();
}
inline const ::std::string& SolverParameter::snapshot_prefix() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_prefix)
  return *snapshot_prefix_;
}
inline void SolverParameter::set_snapshot_prefix(const ::std::string& value) {
  set_has_snapshot_prefix();
  if (snapshot_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    snapshot_prefix_ = new ::std::string;
  }
  snapshot_prefix_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_prefix)
}
inline void SolverParameter::set_snapshot_prefix(const char* value) {
  set_has_snapshot_prefix();
  if (snapshot_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    snapshot_prefix_ = new ::std::string;
  }
  snapshot_prefix_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.snapshot_prefix)
}
inline void SolverParameter::set_snapshot_prefix(const char* value, size_t size) {
  set_has_snapshot_prefix();
  if (snapshot_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    snapshot_prefix_ = new ::std::string;
  }
  snapshot_prefix_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.snapshot_prefix)
}
inline ::std::string* SolverParameter::mutable_snapshot_prefix() {
  set_has_snapshot_prefix();
  if (snapshot_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    snapshot_prefix_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.snapshot_prefix)
  return snapshot_prefix_;
}
inline ::std::string* SolverParameter::release_snapshot_prefix() {
  clear_has_snapshot_prefix();
  if (snapshot_prefix_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = snapshot_prefix_;
    snapshot_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SolverParameter::set_allocated_snapshot_prefix(::std::string* snapshot_prefix) {
  if (snapshot_prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete snapshot_prefix_;
  }
  if (snapshot_prefix) {
    set_has_snapshot_prefix();
    snapshot_prefix_ = snapshot_prefix;
  } else {
    clear_has_snapshot_prefix();
    snapshot_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.snapshot_prefix)
}

// optional bool snapshot_diff = 16 [default = false];
inline bool SolverParameter::has_snapshot_diff() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void SolverParameter::set_has_snapshot_diff() {
  _has_bits_[1] |= 0x00000004u;
}
inline void SolverParameter::clear_has_snapshot_diff() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void SolverParameter::clear_snapshot_diff() {
  snapshot_diff_ = false;
  clear_has_snapshot_diff();
}
inline bool SolverParameter::snapshot_diff() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_diff)
  return snapshot_diff_;
}
inline void SolverParameter::set_snapshot_diff(bool value) {
  set_has_snapshot_diff();
  snapshot_diff_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_diff)
}

// optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
inline bool SolverParameter::has_snapshot_format() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void SolverParameter::set_has_snapshot_format() {
  _has_bits_[1] |= 0x00000008u;
}
inline void SolverParameter::clear_has_snapshot_format() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void SolverParameter::clear_snapshot_format() {
  snapshot_format_ = 1;
  clear_has_snapshot_format();
}
inline ::caffe::SolverParameter_SnapshotFormat SolverParameter::snapshot_format() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_format)
  return static_cast< ::caffe::SolverParameter_SnapshotFormat >(snapshot_format_);
}
inline void SolverParameter::set_snapshot_format(::caffe::SolverParameter_SnapshotFormat value) {
  assert(::caffe::SolverParameter_SnapshotFormat_IsValid(value));
  set_has_snapshot_format();
  snapshot_format_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_format)
}

// optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
inline bool SolverParameter::has_solver_mode() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void SolverParameter::set_has_solver_mode() {
  _has_bits_[1] |= 0x00000010u;
}
inline void SolverParameter::clear_has_solver_mode() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void SolverParameter::clear_solver_mode() {
  solver_mode_ = 1;
  clear_has_solver_mode();
}
inline ::caffe::SolverParameter_SolverMode SolverParameter::solver_mode() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.solver_mode)
  return static_cast< ::caffe::SolverParameter_SolverMode >(solver_mode_);
}
inline void SolverParameter::set_solver_mode(::caffe::SolverParameter_SolverMode value) {
  assert(::caffe::SolverParameter_SolverMode_IsValid(value));
  set_has_solver_mode();
  solver_mode_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.solver_mode)
}

// optional int32 device_id = 18 [default = 0];
inline bool SolverParameter::has_device_id() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void SolverParameter::set_has_device_id() {
  _has_bits_[1] |= 0x00000020u;
}
inline void SolverParameter::clear_has_device_id() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void SolverParameter::clear_device_id() {
  device_id_ = 0;
  clear_has_device_id();
}
inline ::google::protobuf::int32 SolverParameter::device_id() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.device_id)
  return device_id_;
}
inline void SolverParameter::set_device_id(::google::protobuf::int32 value) {
  set_has_device_id();
  device_id_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.device_id)
}

// optional int64 random_seed = 20 [default = -1];
inline bool SolverParameter::has_random_seed() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void SolverParameter::set_has_random_seed() {
  _has_bits_[1] |= 0x00000040u;
}
inline void SolverParameter::clear_has_random_seed() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void SolverParameter::clear_random_seed() {
  random_seed_ = GOOGLE_LONGLONG(-1);
  clear_has_random_seed();
}
inline ::google::protobuf::int64 SolverParameter::random_seed() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.random_seed)
  return random_seed_;
}
inline void SolverParameter::set_random_seed(::google::protobuf::int64 value) {
  set_has_random_seed();
  random_seed_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.random_seed)
}

// optional string type = 40 [default = "SGD"];
inline bool SolverParameter::has_type() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void SolverParameter::set_has_type() {
  _has_bits_[1] |= 0x00000080u;
}
inline void SolverParameter::clear_has_type() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void SolverParameter::clear_type() {
  if (type_ != _default_type_) {
    type_->assign(*_default_type_);
  }
  clear_has_type();
}
inline const ::std::string& SolverParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.type)
  return *type_;
}
inline void SolverParameter::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.type)
}
inline void SolverParameter::set_type(const char* value) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.type)
}
inline void SolverParameter::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.type)
}
inline ::std::string* SolverParameter::mutable_type() {
  set_has_type();
  if (type_ == _default_type_) {
    type_ = new ::std::string(*_default_type_);
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.type)
  return type_;
}
inline ::std::string* SolverParameter::release_type() {
  clear_has_type();
  if (type_ == _default_type_) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(_default_type_);
    return temp;
  }
}
inline void SolverParameter::set_allocated_type(::std::string* type) {
  if (type_ != _default_type_) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(_default_type_);
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.type)
}

// optional float delta = 31 [default = 1e-08];
inline bool SolverParameter::has_delta() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void SolverParameter::set_has_delta() {
  _has_bits_[1] |= 0x00000100u;
}
inline void SolverParameter::clear_has_delta() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void SolverParameter::clear_delta() {
  delta_ = 1e-08f;
  clear_has_delta();
}
inline float SolverParameter::delta() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.delta)
  return delta_;
}
inline void SolverParameter::set_delta(float value) {
  set_has_delta();
  delta_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.delta)
}

// optional float momentum2 = 39 [default = 0.999];
inline bool SolverParameter::has_momentum2() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void SolverParameter::set_has_momentum2() {
  _has_bits_[1] |= 0x00000200u;
}
inline void SolverParameter::clear_has_momentum2() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void SolverParameter::clear_momentum2() {
  momentum2_ = 0.999f;
  clear_has_momentum2();
}
inline float SolverParameter::momentum2() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.momentum2)
  return momentum2_;
}
inline void SolverParameter::set_momentum2(float value) {
  set_has_momentum2();
  momentum2_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.momentum2)
}

// optional float rms_decay = 38;
inline bool SolverParameter::has_rms_decay() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void SolverParameter::set_has_rms_decay() {
  _has_bits_[1] |= 0x00000400u;
}
inline void SolverParameter::clear_has_rms_decay() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void SolverParameter::clear_rms_decay() {
  rms_decay_ = 0;
  clear_has_rms_decay();
}
inline float SolverParameter::rms_decay() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.rms_decay)
  return rms_decay_;
}
inline void SolverParameter::set_rms_decay(float value) {
  set_has_rms_decay();
  rms_decay_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.rms_decay)
}

// optional bool debug_info = 23 [default = false];
inline bool SolverParameter::has_debug_info() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void SolverParameter::set_has_debug_info() {
  _has_bits_[1] |= 0x00000800u;
}
inline void SolverParameter::clear_has_debug_info() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void SolverParameter::clear_debug_info() {
  debug_info_ = false;
  clear_has_debug_info();
}
inline bool SolverParameter::debug_info() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.debug_info)
  return debug_info_;
}
inline void SolverParameter::set_debug_info(bool value) {
  set_has_debug_info();
  debug_info_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.debug_info)
}

// optional bool snapshot_after_train = 28 [default = true];
inline bool SolverParameter::has_snapshot_after_train() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void SolverParameter::set_has_snapshot_after_train() {
  _has_bits_[1] |= 0x00001000u;
}
inline void SolverParameter::clear_has_snapshot_after_train() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void SolverParameter::clear_snapshot_after_train() {
  snapshot_after_train_ = true;
  clear_has_snapshot_after_train();
}
inline bool SolverParameter::snapshot_after_train() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_after_train)
  return snapshot_after_train_;
}
inline void SolverParameter::set_snapshot_after_train(bool value) {
  set_has_snapshot_after_train();
  snapshot_after_train_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_after_train)
}

// optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
inline bool SolverParameter::has_solver_type() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void SolverParameter::set_has_solver_type() {
  _has_bits_[1] |= 0x00002000u;
}
inline void SolverParameter::clear_has_solver_type() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void SolverParameter::clear_solver_type() {
  solver_type_ = 0;
  clear_has_solver_type();
}
inline ::caffe::SolverParameter_SolverType SolverParameter::solver_type() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.solver_type)
  return static_cast< ::caffe::SolverParameter_SolverType >(solver_type_);
}
inline void SolverParameter::set_solver_type(::caffe::SolverParameter_SolverType value) {
  assert(::caffe::SolverParameter_SolverType_IsValid(value));
  set_has_solver_type();
  solver_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.solver_type)
}

// optional .caffe.Type solver_data_type = 44 [default = FLOAT];
inline bool SolverParameter::has_solver_data_type() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void SolverParameter::set_has_solver_data_type() {
  _has_bits_[1] |= 0x00004000u;
}
inline void SolverParameter::clear_has_solver_data_type() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void SolverParameter::clear_solver_data_type() {
  solver_data_type_ = 1;
  clear_has_solver_data_type();
}
inline ::caffe::Type SolverParameter::solver_data_type() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.solver_data_type)
  return static_cast< ::caffe::Type >(solver_data_type_);
}
inline void SolverParameter::set_solver_data_type(::caffe::Type value) {
  assert(::caffe::Type_IsValid(value));
  set_has_solver_data_type();
  solver_data_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.solver_data_type)
}

// -------------------------------------------------------------------

// SolverState

// optional int32 iter = 1;
inline bool SolverState::has_iter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SolverState::set_has_iter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SolverState::clear_has_iter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SolverState::clear_iter() {
  iter_ = 0;
  clear_has_iter();
}
inline ::google::protobuf::int32 SolverState::iter() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.iter)
  return iter_;
}
inline void SolverState::set_iter(::google::protobuf::int32 value) {
  set_has_iter();
  iter_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverState.iter)
}

// optional string learned_net = 2;
inline bool SolverState::has_learned_net() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SolverState::set_has_learned_net() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SolverState::clear_has_learned_net() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SolverState::clear_learned_net() {
  if (learned_net_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    learned_net_->clear();
  }
  clear_has_learned_net();
}
inline const ::std::string& SolverState::learned_net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.learned_net)
  return *learned_net_;
}
inline void SolverState::set_learned_net(const ::std::string& value) {
  set_has_learned_net();
  if (learned_net_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    learned_net_ = new ::std::string;
  }
  learned_net_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.SolverState.learned_net)
}
inline void SolverState::set_learned_net(const char* value) {
  set_has_learned_net();
  if (learned_net_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    learned_net_ = new ::std::string;
  }
  learned_net_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.SolverState.learned_net)
}
inline void SolverState::set_learned_net(const char* value, size_t size) {
  set_has_learned_net();
  if (learned_net_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    learned_net_ = new ::std::string;
  }
  learned_net_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverState.learned_net)
}
inline ::std::string* SolverState::mutable_learned_net() {
  set_has_learned_net();
  if (learned_net_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    learned_net_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverState.learned_net)
  return learned_net_;
}
inline ::std::string* SolverState::release_learned_net() {
  clear_has_learned_net();
  if (learned_net_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = learned_net_;
    learned_net_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SolverState::set_allocated_learned_net(::std::string* learned_net) {
  if (learned_net_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete learned_net_;
  }
  if (learned_net) {
    set_has_learned_net();
    learned_net_ = learned_net;
  } else {
    clear_has_learned_net();
    learned_net_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverState.learned_net)
}

// repeated .caffe.BlobProto history = 3;
inline int SolverState::history_size() const {
  return history_.size();
}
inline void SolverState::clear_history() {
  history_.Clear();
}
inline const ::caffe::BlobProto& SolverState::history(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.history)
  return history_.Get(index);
}
inline ::caffe::BlobProto* SolverState::mutable_history(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverState.history)
  return history_.Mutable(index);
}
inline ::caffe::BlobProto* SolverState::add_history() {
  // @@protoc_insertion_point(field_add:caffe.SolverState.history)
  return history_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
SolverState::history() const {
  // @@protoc_insertion_point(field_list:caffe.SolverState.history)
  return history_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
SolverState::mutable_history() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverState.history)
  return &history_;
}

// optional int32 current_step = 4 [default = 0];
inline bool SolverState::has_current_step() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SolverState::set_has_current_step() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SolverState::clear_has_current_step() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SolverState::clear_current_step() {
  current_step_ = 0;
  clear_has_current_step();
}
inline ::google::protobuf::int32 SolverState::current_step() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.current_step)
  return current_step_;
}
inline void SolverState::set_current_step(::google::protobuf::int32 value) {
  set_has_current_step();
  current_step_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverState.current_step)
}

// -------------------------------------------------------------------

// NetState

// optional .caffe.Phase phase = 1 [default = TEST];
inline bool NetState::has_phase() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetState::set_has_phase() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetState::clear_has_phase() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetState::clear_phase() {
  phase_ = 1;
  clear_has_phase();
}
inline ::caffe::Phase NetState::phase() const {
  // @@protoc_insertion_point(field_get:caffe.NetState.phase)
  return static_cast< ::caffe::Phase >(phase_);
}
inline void NetState::set_phase(::caffe::Phase value) {
  assert(::caffe::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetState.phase)
}

// optional int32 level = 2 [default = 0];
inline bool NetState::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetState::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetState::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetState::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 NetState::level() const {
  // @@protoc_insertion_point(field_get:caffe.NetState.level)
  return level_;
}
inline void NetState::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetState.level)
}

// repeated string stage = 3;
inline int NetState::stage_size() const {
  return stage_.size();
}
inline void NetState::clear_stage() {
  stage_.Clear();
}
inline const ::std::string& NetState::stage(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetState.stage)
  return stage_.Get(index);
}
inline ::std::string* NetState::mutable_stage(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetState.stage)
  return stage_.Mutable(index);
}
inline void NetState::set_stage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetState.stage)
  stage_.Mutable(index)->assign(value);
}
inline void NetState::set_stage(int index, const char* value) {
  stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetState.stage)
}
inline void NetState::set_stage(int index, const char* value, size_t size) {
  stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetState.stage)
}
inline ::std::string* NetState::add_stage() {
  return stage_.Add();
}
inline void NetState::add_stage(const ::std::string& value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetState.stage)
}
inline void NetState::add_stage(const char* value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetState.stage)
}
inline void NetState::add_stage(const char* value, size_t size) {
  stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetState.stage)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetState::stage() const {
  // @@protoc_insertion_point(field_list:caffe.NetState.stage)
  return stage_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetState::mutable_stage() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetState.stage)
  return &stage_;
}

// -------------------------------------------------------------------

// NetStateRule

// optional .caffe.Phase phase = 1;
inline bool NetStateRule::has_phase() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetStateRule::set_has_phase() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetStateRule::clear_has_phase() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetStateRule::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
inline ::caffe::Phase NetStateRule::phase() const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.phase)
  return static_cast< ::caffe::Phase >(phase_);
}
inline void NetStateRule::set_phase(::caffe::Phase value) {
  assert(::caffe::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.phase)
}

// optional int32 min_level = 2;
inline bool NetStateRule::has_min_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetStateRule::set_has_min_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetStateRule::clear_has_min_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetStateRule::clear_min_level() {
  min_level_ = 0;
  clear_has_min_level();
}
inline ::google::protobuf::int32 NetStateRule::min_level() const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.min_level)
  return min_level_;
}
inline void NetStateRule::set_min_level(::google::protobuf::int32 value) {
  set_has_min_level();
  min_level_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.min_level)
}

// optional int32 max_level = 3;
inline bool NetStateRule::has_max_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetStateRule::set_has_max_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetStateRule::clear_has_max_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetStateRule::clear_max_level() {
  max_level_ = 0;
  clear_has_max_level();
}
inline ::google::protobuf::int32 NetStateRule::max_level() const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.max_level)
  return max_level_;
}
inline void NetStateRule::set_max_level(::google::protobuf::int32 value) {
  set_has_max_level();
  max_level_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.max_level)
}

// repeated string stage = 4;
inline int NetStateRule::stage_size() const {
  return stage_.size();
}
inline void NetStateRule::clear_stage() {
  stage_.Clear();
}
inline const ::std::string& NetStateRule::stage(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.stage)
  return stage_.Get(index);
}
inline ::std::string* NetStateRule::mutable_stage(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetStateRule.stage)
  return stage_.Mutable(index);
}
inline void NetStateRule::set_stage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.stage)
  stage_.Mutable(index)->assign(value);
}
inline void NetStateRule::set_stage(int index, const char* value) {
  stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetStateRule.stage)
}
inline void NetStateRule::set_stage(int index, const char* value, size_t size) {
  stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetStateRule.stage)
}
inline ::std::string* NetStateRule::add_stage() {
  return stage_.Add();
}
inline void NetStateRule::add_stage(const ::std::string& value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetStateRule.stage)
}
inline void NetStateRule::add_stage(const char* value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetStateRule.stage)
}
inline void NetStateRule::add_stage(const char* value, size_t size) {
  stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetStateRule.stage)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetStateRule::stage() const {
  // @@protoc_insertion_point(field_list:caffe.NetStateRule.stage)
  return stage_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetStateRule::mutable_stage() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetStateRule.stage)
  return &stage_;
}

// repeated string not_stage = 5;
inline int NetStateRule::not_stage_size() const {
  return not_stage_.size();
}
inline void NetStateRule::clear_not_stage() {
  not_stage_.Clear();
}
inline const ::std::string& NetStateRule::not_stage(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.not_stage)
  return not_stage_.Get(index);
}
inline ::std::string* NetStateRule::mutable_not_stage(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetStateRule.not_stage)
  return not_stage_.Mutable(index);
}
inline void NetStateRule::set_not_stage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.not_stage)
  not_stage_.Mutable(index)->assign(value);
}
inline void NetStateRule::set_not_stage(int index, const char* value) {
  not_stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetStateRule.not_stage)
}
inline void NetStateRule::set_not_stage(int index, const char* value, size_t size) {
  not_stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetStateRule.not_stage)
}
inline ::std::string* NetStateRule::add_not_stage() {
  return not_stage_.Add();
}
inline void NetStateRule::add_not_stage(const ::std::string& value) {
  not_stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetStateRule.not_stage)
}
inline void NetStateRule::add_not_stage(const char* value) {
  not_stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetStateRule.not_stage)
}
inline void NetStateRule::add_not_stage(const char* value, size_t size) {
  not_stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetStateRule.not_stage)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetStateRule::not_stage() const {
  // @@protoc_insertion_point(field_list:caffe.NetStateRule.not_stage)
  return not_stage_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetStateRule::mutable_not_stage() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetStateRule.not_stage)
  return &not_stage_;
}

// -------------------------------------------------------------------

// ParamSpec

// optional string name = 1;
inline bool ParamSpec::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParamSpec::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParamSpec::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParamSpec::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ParamSpec::name() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.name)
  return *name_;
}
inline void ParamSpec::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.name)
}
inline void ParamSpec::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.ParamSpec.name)
}
inline void ParamSpec::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.ParamSpec.name)
}
inline ::std::string* ParamSpec::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ParamSpec.name)
  return name_;
}
inline ::std::string* ParamSpec::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ParamSpec::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ParamSpec.name)
}

// optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
inline bool ParamSpec::has_share_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParamSpec::set_has_share_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParamSpec::clear_has_share_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParamSpec::clear_share_mode() {
  share_mode_ = 0;
  clear_has_share_mode();
}
inline ::caffe::ParamSpec_DimCheckMode ParamSpec::share_mode() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.share_mode)
  return static_cast< ::caffe::ParamSpec_DimCheckMode >(share_mode_);
}
inline void ParamSpec::set_share_mode(::caffe::ParamSpec_DimCheckMode value) {
  assert(::caffe::ParamSpec_DimCheckMode_IsValid(value));
  set_has_share_mode();
  share_mode_ = value;
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.share_mode)
}

// optional float lr_mult = 3 [default = 1];
inline bool ParamSpec::has_lr_mult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ParamSpec::set_has_lr_mult() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ParamSpec::clear_has_lr_mult() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ParamSpec::clear_lr_mult() {
  lr_mult_ = 1;
  clear_has_lr_mult();
}
inline float ParamSpec::lr_mult() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.lr_mult)
  return lr_mult_;
}
inline void ParamSpec::set_lr_mult(float value) {
  set_has_lr_mult();
  lr_mult_ = value;
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.lr_mult)
}

// optional float decay_mult = 4 [default = 1];
inline bool ParamSpec::has_decay_mult() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ParamSpec::set_has_decay_mult() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ParamSpec::clear_has_decay_mult() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ParamSpec::clear_decay_mult() {
  decay_mult_ = 1;
  clear_has_decay_mult();
}
inline float ParamSpec::decay_mult() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.decay_mult)
  return decay_mult_;
}
inline void ParamSpec::set_decay_mult(float value) {
  set_has_decay_mult();
  decay_mult_ = value;
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.decay_mult)
}

// -------------------------------------------------------------------

// LayerParameter

// optional string name = 1;
inline bool LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LayerParameter::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.name)
  return *name_;
}
inline void LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.name)
}
inline void LayerParameter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.name)
}
inline void LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.name)
}
inline ::std::string* LayerParameter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.name)
  return name_;
}
inline ::std::string* LayerParameter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LayerParameter::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.name)
}

// optional string type = 2;
inline bool LayerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LayerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LayerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LayerParameter::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.type)
  return *type_;
}
inline void LayerParameter::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.type)
}
inline void LayerParameter::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.type)
}
inline void LayerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.type)
}
inline ::std::string* LayerParameter::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.type)
  return type_;
}
inline ::std::string* LayerParameter::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LayerParameter::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.type)
}

// repeated string bottom = 3;
inline int LayerParameter::bottom_size() const {
  return bottom_.size();
}
inline void LayerParameter::clear_bottom() {
  bottom_.Clear();
}
inline const ::std::string& LayerParameter::bottom(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bottom)
  return bottom_.Get(index);
}
inline ::std::string* LayerParameter::mutable_bottom(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.bottom)
  return bottom_.Mutable(index);
}
inline void LayerParameter::set_bottom(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.bottom)
  bottom_.Mutable(index)->assign(value);
}
inline void LayerParameter::set_bottom(int index, const char* value) {
  bottom_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.bottom)
}
inline void LayerParameter::set_bottom(int index, const char* value, size_t size) {
  bottom_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.bottom)
}
inline ::std::string* LayerParameter::add_bottom() {
  return bottom_.Add();
}
inline void LayerParameter::add_bottom(const ::std::string& value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.bottom)
}
inline void LayerParameter::add_bottom(const char* value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.LayerParameter.bottom)
}
inline void LayerParameter::add_bottom(const char* value, size_t size) {
  bottom_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.LayerParameter.bottom)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerParameter::bottom() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.bottom)
  return bottom_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerParameter::mutable_bottom() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.bottom)
  return &bottom_;
}

// repeated string top = 4;
inline int LayerParameter::top_size() const {
  return top_.size();
}
inline void LayerParameter::clear_top() {
  top_.Clear();
}
inline const ::std::string& LayerParameter::top(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.top)
  return top_.Get(index);
}
inline ::std::string* LayerParameter::mutable_top(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.top)
  return top_.Mutable(index);
}
inline void LayerParameter::set_top(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.top)
  top_.Mutable(index)->assign(value);
}
inline void LayerParameter::set_top(int index, const char* value) {
  top_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.top)
}
inline void LayerParameter::set_top(int index, const char* value, size_t size) {
  top_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.top)
}
inline ::std::string* LayerParameter::add_top() {
  return top_.Add();
}
inline void LayerParameter::add_top(const ::std::string& value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.top)
}
inline void LayerParameter::add_top(const char* value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.LayerParameter.top)
}
inline void LayerParameter::add_top(const char* value, size_t size) {
  top_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.LayerParameter.top)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerParameter::top() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.top)
  return top_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerParameter::mutable_top() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.top)
  return &top_;
}

// optional .caffe.Type forward_type = 145 [default = FLOAT];
inline bool LayerParameter::has_forward_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LayerParameter::set_has_forward_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LayerParameter::clear_has_forward_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LayerParameter::clear_forward_type() {
  forward_type_ = 1;
  clear_has_forward_type();
}
inline ::caffe::Type LayerParameter::forward_type() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.forward_type)
  return static_cast< ::caffe::Type >(forward_type_);
}
inline void LayerParameter::set_forward_type(::caffe::Type value) {
  assert(::caffe::Type_IsValid(value));
  set_has_forward_type();
  forward_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.forward_type)
}

// optional .caffe.Type backward_type = 146 [default = FLOAT];
inline bool LayerParameter::has_backward_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LayerParameter::set_has_backward_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LayerParameter::clear_has_backward_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LayerParameter::clear_backward_type() {
  backward_type_ = 1;
  clear_has_backward_type();
}
inline ::caffe::Type LayerParameter::backward_type() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.backward_type)
  return static_cast< ::caffe::Type >(backward_type_);
}
inline void LayerParameter::set_backward_type(::caffe::Type value) {
  assert(::caffe::Type_IsValid(value));
  set_has_backward_type();
  backward_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.backward_type)
}

// optional .caffe.Type forward_math = 147 [default = FLOAT];
inline bool LayerParameter::has_forward_math() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LayerParameter::set_has_forward_math() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LayerParameter::clear_has_forward_math() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LayerParameter::clear_forward_math() {
  forward_math_ = 1;
  clear_has_forward_math();
}
inline ::caffe::Type LayerParameter::forward_math() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.forward_math)
  return static_cast< ::caffe::Type >(forward_math_);
}
inline void LayerParameter::set_forward_math(::caffe::Type value) {
  assert(::caffe::Type_IsValid(value));
  set_has_forward_math();
  forward_math_ = value;
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.forward_math)
}

// optional .caffe.Type backward_math = 148 [default = FLOAT];
inline bool LayerParameter::has_backward_math() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LayerParameter::set_has_backward_math() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LayerParameter::clear_has_backward_math() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LayerParameter::clear_backward_math() {
  backward_math_ = 1;
  clear_has_backward_math();
}
inline ::caffe::Type LayerParameter::backward_math() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.backward_math)
  return static_cast< ::caffe::Type >(backward_math_);
}
inline void LayerParameter::set_backward_math(::caffe::Type value) {
  assert(::caffe::Type_IsValid(value));
  set_has_backward_math();
  backward_math_ = value;
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.backward_math)
}

// optional bool debug = 149 [default = false];
inline bool LayerParameter::has_debug() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LayerParameter::set_has_debug() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LayerParameter::clear_has_debug() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LayerParameter::clear_debug() {
  debug_ = false;
  clear_has_debug();
}
inline bool LayerParameter::debug() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.debug)
  return debug_;
}
inline void LayerParameter::set_debug(bool value) {
  set_has_debug();
  debug_ = value;
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.debug)
}

// optional .caffe.Phase phase = 10;
inline bool LayerParameter::has_phase() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LayerParameter::set_has_phase() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LayerParameter::clear_has_phase() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LayerParameter::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
inline ::caffe::Phase LayerParameter::phase() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.phase)
  return static_cast< ::caffe::Phase >(phase_);
}
inline void LayerParameter::set_phase(::caffe::Phase value) {
  assert(::caffe::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.phase)
}

// repeated float loss_weight = 5;
inline int LayerParameter::loss_weight_size() const {
  return loss_weight_.size();
}
inline void LayerParameter::clear_loss_weight() {
  loss_weight_.Clear();
}
inline float LayerParameter::loss_weight(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.loss_weight)
  return loss_weight_.Get(index);
}
inline void LayerParameter::set_loss_weight(int index, float value) {
  loss_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.loss_weight)
}
inline void LayerParameter::add_loss_weight(float value) {
  loss_weight_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.loss_weight)
}
inline const ::google::protobuf::RepeatedField< float >&
LayerParameter::loss_weight() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.loss_weight)
  return loss_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
LayerParameter::mutable_loss_weight() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.loss_weight)
  return &loss_weight_;
}

// repeated .caffe.ParamSpec param = 6;
inline int LayerParameter::param_size() const {
  return param_.size();
}
inline void LayerParameter::clear_param() {
  param_.Clear();
}
inline const ::caffe::ParamSpec& LayerParameter::param(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.param)
  return param_.Get(index);
}
inline ::caffe::ParamSpec* LayerParameter::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.param)
  return param_.Mutable(index);
}
inline ::caffe::ParamSpec* LayerParameter::add_param() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.param)
  return param_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >&
LayerParameter::param() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.param)
  return param_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >*
LayerParameter::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.param)
  return &param_;
}

// repeated .caffe.BlobProto blobs = 7;
inline int LayerParameter::blobs_size() const {
  return blobs_.size();
}
inline void LayerParameter::clear_blobs() {
  blobs_.Clear();
}
inline const ::caffe::BlobProto& LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.blobs)
  return blobs_.Get(index);
}
inline ::caffe::BlobProto* LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.blobs)
  return blobs_.Mutable(index);
}
inline ::caffe::BlobProto* LayerParameter::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.blobs)
  return blobs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.blobs)
  return blobs_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.blobs)
  return &blobs_;
}

// repeated bool propagate_down = 11;
inline int LayerParameter::propagate_down_size() const {
  return propagate_down_.size();
}
inline void LayerParameter::clear_propagate_down() {
  propagate_down_.Clear();
}
inline bool LayerParameter::propagate_down(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.propagate_down)
  return propagate_down_.Get(index);
}
inline void LayerParameter::set_propagate_down(int index, bool value) {
  propagate_down_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.propagate_down)
}
inline void LayerParameter::add_propagate_down(bool value) {
  propagate_down_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.propagate_down)
}
inline const ::google::protobuf::RepeatedField< bool >&
LayerParameter::propagate_down() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.propagate_down)
  return propagate_down_;
}
inline ::google::protobuf::RepeatedField< bool >*
LayerParameter::mutable_propagate_down() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.propagate_down)
  return &propagate_down_;
}

// repeated .caffe.NetStateRule include = 8;
inline int LayerParameter::include_size() const {
  return include_.size();
}
inline void LayerParameter::clear_include() {
  include_.Clear();
}
inline const ::caffe::NetStateRule& LayerParameter::include(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.include)
  return include_.Get(index);
}
inline ::caffe::NetStateRule* LayerParameter::mutable_include(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.include)
  return include_.Mutable(index);
}
inline ::caffe::NetStateRule* LayerParameter::add_include() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.include)
  return include_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
LayerParameter::include() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.include)
  return include_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
LayerParameter::mutable_include() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.include)
  return &include_;
}

// repeated .caffe.NetStateRule exclude = 9;
inline int LayerParameter::exclude_size() const {
  return exclude_.size();
}
inline void LayerParameter::clear_exclude() {
  exclude_.Clear();
}
inline const ::caffe::NetStateRule& LayerParameter::exclude(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.exclude)
  return exclude_.Get(index);
}
inline ::caffe::NetStateRule* LayerParameter::mutable_exclude(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.exclude)
  return exclude_.Mutable(index);
}
inline ::caffe::NetStateRule* LayerParameter::add_exclude() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.exclude)
  return exclude_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
LayerParameter::exclude() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.exclude)
  return exclude_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
LayerParameter::mutable_exclude() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.exclude)
  return &exclude_;
}

// optional .caffe.TransformationParameter transform_param = 100;
inline bool LayerParameter::has_transform_param() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void LayerParameter::set_has_transform_param() {
  _has_bits_[0] |= 0x00010000u;
}
inline void LayerParameter::clear_has_transform_param() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void LayerParameter::clear_transform_param() {
  if (transform_param_ != NULL) transform_param_->::caffe::TransformationParameter::Clear();
  clear_has_transform_param();
}
inline const ::caffe::TransformationParameter& LayerParameter::transform_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.transform_param)
  return transform_param_ != NULL ? *transform_param_ : *default_instance_->transform_param_;
}
inline ::caffe::TransformationParameter* LayerParameter::mutable_transform_param() {
  set_has_transform_param();
  if (transform_param_ == NULL) transform_param_ = new ::caffe::TransformationParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.transform_param)
  return transform_param_;
}
inline ::caffe::TransformationParameter* LayerParameter::release_transform_param() {
  clear_has_transform_param();
  ::caffe::TransformationParameter* temp = transform_param_;
  transform_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_transform_param(::caffe::TransformationParameter* transform_param) {
  delete transform_param_;
  transform_param_ = transform_param;
  if (transform_param) {
    set_has_transform_param();
  } else {
    clear_has_transform_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.transform_param)
}

// optional .caffe.LossParameter loss_param = 101;
inline bool LayerParameter::has_loss_param() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void LayerParameter::set_has_loss_param() {
  _has_bits_[0] |= 0x00020000u;
}
inline void LayerParameter::clear_has_loss_param() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void LayerParameter::clear_loss_param() {
  if (loss_param_ != NULL) loss_param_->::caffe::LossParameter::Clear();
  clear_has_loss_param();
}
inline const ::caffe::LossParameter& LayerParameter::loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.loss_param)
  return loss_param_ != NULL ? *loss_param_ : *default_instance_->loss_param_;
}
inline ::caffe::LossParameter* LayerParameter::mutable_loss_param() {
  set_has_loss_param();
  if (loss_param_ == NULL) loss_param_ = new ::caffe::LossParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.loss_param)
  return loss_param_;
}
inline ::caffe::LossParameter* LayerParameter::release_loss_param() {
  clear_has_loss_param();
  ::caffe::LossParameter* temp = loss_param_;
  loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_loss_param(::caffe::LossParameter* loss_param) {
  delete loss_param_;
  loss_param_ = loss_param;
  if (loss_param) {
    set_has_loss_param();
  } else {
    clear_has_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.loss_param)
}

// optional .caffe.AccuracyParameter accuracy_param = 102;
inline bool LayerParameter::has_accuracy_param() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void LayerParameter::set_has_accuracy_param() {
  _has_bits_[0] |= 0x00040000u;
}
inline void LayerParameter::clear_has_accuracy_param() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void LayerParameter::clear_accuracy_param() {
  if (accuracy_param_ != NULL) accuracy_param_->::caffe::AccuracyParameter::Clear();
  clear_has_accuracy_param();
}
inline const ::caffe::AccuracyParameter& LayerParameter::accuracy_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.accuracy_param)
  return accuracy_param_ != NULL ? *accuracy_param_ : *default_instance_->accuracy_param_;
}
inline ::caffe::AccuracyParameter* LayerParameter::mutable_accuracy_param() {
  set_has_accuracy_param();
  if (accuracy_param_ == NULL) accuracy_param_ = new ::caffe::AccuracyParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.accuracy_param)
  return accuracy_param_;
}
inline ::caffe::AccuracyParameter* LayerParameter::release_accuracy_param() {
  clear_has_accuracy_param();
  ::caffe::AccuracyParameter* temp = accuracy_param_;
  accuracy_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_accuracy_param(::caffe::AccuracyParameter* accuracy_param) {
  delete accuracy_param_;
  accuracy_param_ = accuracy_param;
  if (accuracy_param) {
    set_has_accuracy_param();
  } else {
    clear_has_accuracy_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.accuracy_param)
}

// optional .caffe.ArgMaxParameter argmax_param = 103;
inline bool LayerParameter::has_argmax_param() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void LayerParameter::set_has_argmax_param() {
  _has_bits_[0] |= 0x00080000u;
}
inline void LayerParameter::clear_has_argmax_param() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void LayerParameter::clear_argmax_param() {
  if (argmax_param_ != NULL) argmax_param_->::caffe::ArgMaxParameter::Clear();
  clear_has_argmax_param();
}
inline const ::caffe::ArgMaxParameter& LayerParameter::argmax_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.argmax_param)
  return argmax_param_ != NULL ? *argmax_param_ : *default_instance_->argmax_param_;
}
inline ::caffe::ArgMaxParameter* LayerParameter::mutable_argmax_param() {
  set_has_argmax_param();
  if (argmax_param_ == NULL) argmax_param_ = new ::caffe::ArgMaxParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.argmax_param)
  return argmax_param_;
}
inline ::caffe::ArgMaxParameter* LayerParameter::release_argmax_param() {
  clear_has_argmax_param();
  ::caffe::ArgMaxParameter* temp = argmax_param_;
  argmax_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_argmax_param(::caffe::ArgMaxParameter* argmax_param) {
  delete argmax_param_;
  argmax_param_ = argmax_param;
  if (argmax_param) {
    set_has_argmax_param();
  } else {
    clear_has_argmax_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.argmax_param)
}

// optional .caffe.AnnotatedDataParameter annotated_data_param = 200;
inline bool LayerParameter::has_annotated_data_param() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void LayerParameter::set_has_annotated_data_param() {
  _has_bits_[0] |= 0x00100000u;
}
inline void LayerParameter::clear_has_annotated_data_param() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void LayerParameter::clear_annotated_data_param() {
  if (annotated_data_param_ != NULL) annotated_data_param_->::caffe::AnnotatedDataParameter::Clear();
  clear_has_annotated_data_param();
}
inline const ::caffe::AnnotatedDataParameter& LayerParameter::annotated_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.annotated_data_param)
  return annotated_data_param_ != NULL ? *annotated_data_param_ : *default_instance_->annotated_data_param_;
}
inline ::caffe::AnnotatedDataParameter* LayerParameter::mutable_annotated_data_param() {
  set_has_annotated_data_param();
  if (annotated_data_param_ == NULL) annotated_data_param_ = new ::caffe::AnnotatedDataParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.annotated_data_param)
  return annotated_data_param_;
}
inline ::caffe::AnnotatedDataParameter* LayerParameter::release_annotated_data_param() {
  clear_has_annotated_data_param();
  ::caffe::AnnotatedDataParameter* temp = annotated_data_param_;
  annotated_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_annotated_data_param(::caffe::AnnotatedDataParameter* annotated_data_param) {
  delete annotated_data_param_;
  annotated_data_param_ = annotated_data_param;
  if (annotated_data_param) {
    set_has_annotated_data_param();
  } else {
    clear_has_annotated_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.annotated_data_param)
}

// optional .caffe.BatchNormParameter batch_norm_param = 139;
inline bool LayerParameter::has_batch_norm_param() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void LayerParameter::set_has_batch_norm_param() {
  _has_bits_[0] |= 0x00200000u;
}
inline void LayerParameter::clear_has_batch_norm_param() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void LayerParameter::clear_batch_norm_param() {
  if (batch_norm_param_ != NULL) batch_norm_param_->::caffe::BatchNormParameter::Clear();
  clear_has_batch_norm_param();
}
inline const ::caffe::BatchNormParameter& LayerParameter::batch_norm_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.batch_norm_param)
  return batch_norm_param_ != NULL ? *batch_norm_param_ : *default_instance_->batch_norm_param_;
}
inline ::caffe::BatchNormParameter* LayerParameter::mutable_batch_norm_param() {
  set_has_batch_norm_param();
  if (batch_norm_param_ == NULL) batch_norm_param_ = new ::caffe::BatchNormParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.batch_norm_param)
  return batch_norm_param_;
}
inline ::caffe::BatchNormParameter* LayerParameter::release_batch_norm_param() {
  clear_has_batch_norm_param();
  ::caffe::BatchNormParameter* temp = batch_norm_param_;
  batch_norm_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_batch_norm_param(::caffe::BatchNormParameter* batch_norm_param) {
  delete batch_norm_param_;
  batch_norm_param_ = batch_norm_param;
  if (batch_norm_param) {
    set_has_batch_norm_param();
  } else {
    clear_has_batch_norm_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.batch_norm_param)
}

// optional .caffe.BiasParameter bias_param = 141;
inline bool LayerParameter::has_bias_param() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void LayerParameter::set_has_bias_param() {
  _has_bits_[0] |= 0x00400000u;
}
inline void LayerParameter::clear_has_bias_param() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void LayerParameter::clear_bias_param() {
  if (bias_param_ != NULL) bias_param_->::caffe::BiasParameter::Clear();
  clear_has_bias_param();
}
inline const ::caffe::BiasParameter& LayerParameter::bias_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bias_param)
  return bias_param_ != NULL ? *bias_param_ : *default_instance_->bias_param_;
}
inline ::caffe::BiasParameter* LayerParameter::mutable_bias_param() {
  set_has_bias_param();
  if (bias_param_ == NULL) bias_param_ = new ::caffe::BiasParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.bias_param)
  return bias_param_;
}
inline ::caffe::BiasParameter* LayerParameter::release_bias_param() {
  clear_has_bias_param();
  ::caffe::BiasParameter* temp = bias_param_;
  bias_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_bias_param(::caffe::BiasParameter* bias_param) {
  delete bias_param_;
  bias_param_ = bias_param;
  if (bias_param) {
    set_has_bias_param();
  } else {
    clear_has_bias_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.bias_param)
}

// optional .caffe.ConcatParameter concat_param = 104;
inline bool LayerParameter::has_concat_param() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void LayerParameter::set_has_concat_param() {
  _has_bits_[0] |= 0x00800000u;
}
inline void LayerParameter::clear_has_concat_param() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void LayerParameter::clear_concat_param() {
  if (concat_param_ != NULL) concat_param_->::caffe::ConcatParameter::Clear();
  clear_has_concat_param();
}
inline const ::caffe::ConcatParameter& LayerParameter::concat_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.concat_param)
  return concat_param_ != NULL ? *concat_param_ : *default_instance_->concat_param_;
}
inline ::caffe::ConcatParameter* LayerParameter::mutable_concat_param() {
  set_has_concat_param();
  if (concat_param_ == NULL) concat_param_ = new ::caffe::ConcatParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.concat_param)
  return concat_param_;
}
inline ::caffe::ConcatParameter* LayerParameter::release_concat_param() {
  clear_has_concat_param();
  ::caffe::ConcatParameter* temp = concat_param_;
  concat_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_concat_param(::caffe::ConcatParameter* concat_param) {
  delete concat_param_;
  concat_param_ = concat_param;
  if (concat_param) {
    set_has_concat_param();
  } else {
    clear_has_concat_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.concat_param)
}

// optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
inline bool LayerParameter::has_contrastive_loss_param() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void LayerParameter::set_has_contrastive_loss_param() {
  _has_bits_[0] |= 0x01000000u;
}
inline void LayerParameter::clear_has_contrastive_loss_param() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void LayerParameter::clear_contrastive_loss_param() {
  if (contrastive_loss_param_ != NULL) contrastive_loss_param_->::caffe::ContrastiveLossParameter::Clear();
  clear_has_contrastive_loss_param();
}
inline const ::caffe::ContrastiveLossParameter& LayerParameter::contrastive_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.contrastive_loss_param)
  return contrastive_loss_param_ != NULL ? *contrastive_loss_param_ : *default_instance_->contrastive_loss_param_;
}
inline ::caffe::ContrastiveLossParameter* LayerParameter::mutable_contrastive_loss_param() {
  set_has_contrastive_loss_param();
  if (contrastive_loss_param_ == NULL) contrastive_loss_param_ = new ::caffe::ContrastiveLossParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.contrastive_loss_param)
  return contrastive_loss_param_;
}
inline ::caffe::ContrastiveLossParameter* LayerParameter::release_contrastive_loss_param() {
  clear_has_contrastive_loss_param();
  ::caffe::ContrastiveLossParameter* temp = contrastive_loss_param_;
  contrastive_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_contrastive_loss_param(::caffe::ContrastiveLossParameter* contrastive_loss_param) {
  delete contrastive_loss_param_;
  contrastive_loss_param_ = contrastive_loss_param;
  if (contrastive_loss_param) {
    set_has_contrastive_loss_param();
  } else {
    clear_has_contrastive_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.contrastive_loss_param)
}

// optional .caffe.ConvolutionParameter convolution_param = 106;
inline bool LayerParameter::has_convolution_param() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void LayerParameter::set_has_convolution_param() {
  _has_bits_[0] |= 0x02000000u;
}
inline void LayerParameter::clear_has_convolution_param() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void LayerParameter::clear_convolution_param() {
  if (convolution_param_ != NULL) convolution_param_->::caffe::ConvolutionParameter::Clear();
  clear_has_convolution_param();
}
inline const ::caffe::ConvolutionParameter& LayerParameter::convolution_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.convolution_param)
  return convolution_param_ != NULL ? *convolution_param_ : *default_instance_->convolution_param_;
}
inline ::caffe::ConvolutionParameter* LayerParameter::mutable_convolution_param() {
  set_has_convolution_param();
  if (convolution_param_ == NULL) convolution_param_ = new ::caffe::ConvolutionParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.convolution_param)
  return convolution_param_;
}
inline ::caffe::ConvolutionParameter* LayerParameter::release_convolution_param() {
  clear_has_convolution_param();
  ::caffe::ConvolutionParameter* temp = convolution_param_;
  convolution_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_convolution_param(::caffe::ConvolutionParameter* convolution_param) {
  delete convolution_param_;
  convolution_param_ = convolution_param;
  if (convolution_param) {
    set_has_convolution_param();
  } else {
    clear_has_convolution_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.convolution_param)
}

// optional .caffe.CropParameter crop_param = 144;
inline bool LayerParameter::has_crop_param() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void LayerParameter::set_has_crop_param() {
  _has_bits_[0] |= 0x04000000u;
}
inline void LayerParameter::clear_has_crop_param() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void LayerParameter::clear_crop_param() {
  if (crop_param_ != NULL) crop_param_->::caffe::CropParameter::Clear();
  clear_has_crop_param();
}
inline const ::caffe::CropParameter& LayerParameter::crop_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.crop_param)
  return crop_param_ != NULL ? *crop_param_ : *default_instance_->crop_param_;
}
inline ::caffe::CropParameter* LayerParameter::mutable_crop_param() {
  set_has_crop_param();
  if (crop_param_ == NULL) crop_param_ = new ::caffe::CropParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.crop_param)
  return crop_param_;
}
inline ::caffe::CropParameter* LayerParameter::release_crop_param() {
  clear_has_crop_param();
  ::caffe::CropParameter* temp = crop_param_;
  crop_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_crop_param(::caffe::CropParameter* crop_param) {
  delete crop_param_;
  crop_param_ = crop_param;
  if (crop_param) {
    set_has_crop_param();
  } else {
    clear_has_crop_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.crop_param)
}

// optional .caffe.DataParameter data_param = 107;
inline bool LayerParameter::has_data_param() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void LayerParameter::set_has_data_param() {
  _has_bits_[0] |= 0x08000000u;
}
inline void LayerParameter::clear_has_data_param() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void LayerParameter::clear_data_param() {
  if (data_param_ != NULL) data_param_->::caffe::DataParameter::Clear();
  clear_has_data_param();
}
inline const ::caffe::DataParameter& LayerParameter::data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.data_param)
  return data_param_ != NULL ? *data_param_ : *default_instance_->data_param_;
}
inline ::caffe::DataParameter* LayerParameter::mutable_data_param() {
  set_has_data_param();
  if (data_param_ == NULL) data_param_ = new ::caffe::DataParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.data_param)
  return data_param_;
}
inline ::caffe::DataParameter* LayerParameter::release_data_param() {
  clear_has_data_param();
  ::caffe::DataParameter* temp = data_param_;
  data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_data_param(::caffe::DataParameter* data_param) {
  delete data_param_;
  data_param_ = data_param;
  if (data_param) {
    set_has_data_param();
  } else {
    clear_has_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.data_param)
}

// optional .caffe.DropoutParameter dropout_param = 108;
inline bool LayerParameter::has_dropout_param() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void LayerParameter::set_has_dropout_param() {
  _has_bits_[0] |= 0x10000000u;
}
inline void LayerParameter::clear_has_dropout_param() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void LayerParameter::clear_dropout_param() {
  if (dropout_param_ != NULL) dropout_param_->::caffe::DropoutParameter::Clear();
  clear_has_dropout_param();
}
inline const ::caffe::DropoutParameter& LayerParameter::dropout_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.dropout_param)
  return dropout_param_ != NULL ? *dropout_param_ : *default_instance_->dropout_param_;
}
inline ::caffe::DropoutParameter* LayerParameter::mutable_dropout_param() {
  set_has_dropout_param();
  if (dropout_param_ == NULL) dropout_param_ = new ::caffe::DropoutParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.dropout_param)
  return dropout_param_;
}
inline ::caffe::DropoutParameter* LayerParameter::release_dropout_param() {
  clear_has_dropout_param();
  ::caffe::DropoutParameter* temp = dropout_param_;
  dropout_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_dropout_param(::caffe::DropoutParameter* dropout_param) {
  delete dropout_param_;
  dropout_param_ = dropout_param;
  if (dropout_param) {
    set_has_dropout_param();
  } else {
    clear_has_dropout_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.dropout_param)
}

// optional .caffe.DummyDataParameter dummy_data_param = 109;
inline bool LayerParameter::has_dummy_data_param() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void LayerParameter::set_has_dummy_data_param() {
  _has_bits_[0] |= 0x20000000u;
}
inline void LayerParameter::clear_has_dummy_data_param() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void LayerParameter::clear_dummy_data_param() {
  if (dummy_data_param_ != NULL) dummy_data_param_->::caffe::DummyDataParameter::Clear();
  clear_has_dummy_data_param();
}
inline const ::caffe::DummyDataParameter& LayerParameter::dummy_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.dummy_data_param)
  return dummy_data_param_ != NULL ? *dummy_data_param_ : *default_instance_->dummy_data_param_;
}
inline ::caffe::DummyDataParameter* LayerParameter::mutable_dummy_data_param() {
  set_has_dummy_data_param();
  if (dummy_data_param_ == NULL) dummy_data_param_ = new ::caffe::DummyDataParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.dummy_data_param)
  return dummy_data_param_;
}
inline ::caffe::DummyDataParameter* LayerParameter::release_dummy_data_param() {
  clear_has_dummy_data_param();
  ::caffe::DummyDataParameter* temp = dummy_data_param_;
  dummy_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_dummy_data_param(::caffe::DummyDataParameter* dummy_data_param) {
  delete dummy_data_param_;
  dummy_data_param_ = dummy_data_param;
  if (dummy_data_param) {
    set_has_dummy_data_param();
  } else {
    clear_has_dummy_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.dummy_data_param)
}

// optional .caffe.EltwiseParameter eltwise_param = 110;
inline bool LayerParameter::has_eltwise_param() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void LayerParameter::set_has_eltwise_param() {
  _has_bits_[0] |= 0x40000000u;
}
inline void LayerParameter::clear_has_eltwise_param() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void LayerParameter::clear_eltwise_param() {
  if (eltwise_param_ != NULL) eltwise_param_->::caffe::EltwiseParameter::Clear();
  clear_has_eltwise_param();
}
inline const ::caffe::EltwiseParameter& LayerParameter::eltwise_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.eltwise_param)
  return eltwise_param_ != NULL ? *eltwise_param_ : *default_instance_->eltwise_param_;
}
inline ::caffe::EltwiseParameter* LayerParameter::mutable_eltwise_param() {
  set_has_eltwise_param();
  if (eltwise_param_ == NULL) eltwise_param_ = new ::caffe::EltwiseParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.eltwise_param)
  return eltwise_param_;
}
inline ::caffe::EltwiseParameter* LayerParameter::release_eltwise_param() {
  clear_has_eltwise_param();
  ::caffe::EltwiseParameter* temp = eltwise_param_;
  eltwise_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_eltwise_param(::caffe::EltwiseParameter* eltwise_param) {
  delete eltwise_param_;
  eltwise_param_ = eltwise_param;
  if (eltwise_param) {
    set_has_eltwise_param();
  } else {
    clear_has_eltwise_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.eltwise_param)
}

// optional .caffe.ELUParameter elu_param = 140;
inline bool LayerParameter::has_elu_param() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void LayerParameter::set_has_elu_param() {
  _has_bits_[0] |= 0x80000000u;
}
inline void LayerParameter::clear_has_elu_param() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void LayerParameter::clear_elu_param() {
  if (elu_param_ != NULL) elu_param_->::caffe::ELUParameter::Clear();
  clear_has_elu_param();
}
inline const ::caffe::ELUParameter& LayerParameter::elu_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.elu_param)
  return elu_param_ != NULL ? *elu_param_ : *default_instance_->elu_param_;
}
inline ::caffe::ELUParameter* LayerParameter::mutable_elu_param() {
  set_has_elu_param();
  if (elu_param_ == NULL) elu_param_ = new ::caffe::ELUParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.elu_param)
  return elu_param_;
}
inline ::caffe::ELUParameter* LayerParameter::release_elu_param() {
  clear_has_elu_param();
  ::caffe::ELUParameter* temp = elu_param_;
  elu_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_elu_param(::caffe::ELUParameter* elu_param) {
  delete elu_param_;
  elu_param_ = elu_param;
  if (elu_param) {
    set_has_elu_param();
  } else {
    clear_has_elu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.elu_param)
}

// optional .caffe.EmbedParameter embed_param = 137;
inline bool LayerParameter::has_embed_param() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void LayerParameter::set_has_embed_param() {
  _has_bits_[1] |= 0x00000001u;
}
inline void LayerParameter::clear_has_embed_param() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void LayerParameter::clear_embed_param() {
  if (embed_param_ != NULL) embed_param_->::caffe::EmbedParameter::Clear();
  clear_has_embed_param();
}
inline const ::caffe::EmbedParameter& LayerParameter::embed_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.embed_param)
  return embed_param_ != NULL ? *embed_param_ : *default_instance_->embed_param_;
}
inline ::caffe::EmbedParameter* LayerParameter::mutable_embed_param() {
  set_has_embed_param();
  if (embed_param_ == NULL) embed_param_ = new ::caffe::EmbedParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.embed_param)
  return embed_param_;
}
inline ::caffe::EmbedParameter* LayerParameter::release_embed_param() {
  clear_has_embed_param();
  ::caffe::EmbedParameter* temp = embed_param_;
  embed_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_embed_param(::caffe::EmbedParameter* embed_param) {
  delete embed_param_;
  embed_param_ = embed_param;
  if (embed_param) {
    set_has_embed_param();
  } else {
    clear_has_embed_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.embed_param)
}

// optional .caffe.ExpParameter exp_param = 111;
inline bool LayerParameter::has_exp_param() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void LayerParameter::set_has_exp_param() {
  _has_bits_[1] |= 0x00000002u;
}
inline void LayerParameter::clear_has_exp_param() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void LayerParameter::clear_exp_param() {
  if (exp_param_ != NULL) exp_param_->::caffe::ExpParameter::Clear();
  clear_has_exp_param();
}
inline const ::caffe::ExpParameter& LayerParameter::exp_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.exp_param)
  return exp_param_ != NULL ? *exp_param_ : *default_instance_->exp_param_;
}
inline ::caffe::ExpParameter* LayerParameter::mutable_exp_param() {
  set_has_exp_param();
  if (exp_param_ == NULL) exp_param_ = new ::caffe::ExpParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.exp_param)
  return exp_param_;
}
inline ::caffe::ExpParameter* LayerParameter::release_exp_param() {
  clear_has_exp_param();
  ::caffe::ExpParameter* temp = exp_param_;
  exp_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_exp_param(::caffe::ExpParameter* exp_param) {
  delete exp_param_;
  exp_param_ = exp_param;
  if (exp_param) {
    set_has_exp_param();
  } else {
    clear_has_exp_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.exp_param)
}

// optional .caffe.FlattenParameter flatten_param = 135;
inline bool LayerParameter::has_flatten_param() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void LayerParameter::set_has_flatten_param() {
  _has_bits_[1] |= 0x00000004u;
}
inline void LayerParameter::clear_has_flatten_param() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void LayerParameter::clear_flatten_param() {
  if (flatten_param_ != NULL) flatten_param_->::caffe::FlattenParameter::Clear();
  clear_has_flatten_param();
}
inline const ::caffe::FlattenParameter& LayerParameter::flatten_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.flatten_param)
  return flatten_param_ != NULL ? *flatten_param_ : *default_instance_->flatten_param_;
}
inline ::caffe::FlattenParameter* LayerParameter::mutable_flatten_param() {
  set_has_flatten_param();
  if (flatten_param_ == NULL) flatten_param_ = new ::caffe::FlattenParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.flatten_param)
  return flatten_param_;
}
inline ::caffe::FlattenParameter* LayerParameter::release_flatten_param() {
  clear_has_flatten_param();
  ::caffe::FlattenParameter* temp = flatten_param_;
  flatten_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_flatten_param(::caffe::FlattenParameter* flatten_param) {
  delete flatten_param_;
  flatten_param_ = flatten_param;
  if (flatten_param) {
    set_has_flatten_param();
  } else {
    clear_has_flatten_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.flatten_param)
}

// optional .caffe.HDF5DataParameter hdf5_data_param = 112;
inline bool LayerParameter::has_hdf5_data_param() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void LayerParameter::set_has_hdf5_data_param() {
  _has_bits_[1] |= 0x00000008u;
}
inline void LayerParameter::clear_has_hdf5_data_param() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void LayerParameter::clear_hdf5_data_param() {
  if (hdf5_data_param_ != NULL) hdf5_data_param_->::caffe::HDF5DataParameter::Clear();
  clear_has_hdf5_data_param();
}
inline const ::caffe::HDF5DataParameter& LayerParameter::hdf5_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.hdf5_data_param)
  return hdf5_data_param_ != NULL ? *hdf5_data_param_ : *default_instance_->hdf5_data_param_;
}
inline ::caffe::HDF5DataParameter* LayerParameter::mutable_hdf5_data_param() {
  set_has_hdf5_data_param();
  if (hdf5_data_param_ == NULL) hdf5_data_param_ = new ::caffe::HDF5DataParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.hdf5_data_param)
  return hdf5_data_param_;
}
inline ::caffe::HDF5DataParameter* LayerParameter::release_hdf5_data_param() {
  clear_has_hdf5_data_param();
  ::caffe::HDF5DataParameter* temp = hdf5_data_param_;
  hdf5_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_hdf5_data_param(::caffe::HDF5DataParameter* hdf5_data_param) {
  delete hdf5_data_param_;
  hdf5_data_param_ = hdf5_data_param;
  if (hdf5_data_param) {
    set_has_hdf5_data_param();
  } else {
    clear_has_hdf5_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.hdf5_data_param)
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
inline bool LayerParameter::has_hdf5_output_param() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void LayerParameter::set_has_hdf5_output_param() {
  _has_bits_[1] |= 0x00000010u;
}
inline void LayerParameter::clear_has_hdf5_output_param() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void LayerParameter::clear_hdf5_output_param() {
  if (hdf5_output_param_ != NULL) hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
  clear_has_hdf5_output_param();
}
inline const ::caffe::HDF5OutputParameter& LayerParameter::hdf5_output_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.hdf5_output_param)
  return hdf5_output_param_ != NULL ? *hdf5_output_param_ : *default_instance_->hdf5_output_param_;
}
inline ::caffe::HDF5OutputParameter* LayerParameter::mutable_hdf5_output_param() {
  set_has_hdf5_output_param();
  if (hdf5_output_param_ == NULL) hdf5_output_param_ = new ::caffe::HDF5OutputParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.hdf5_output_param)
  return hdf5_output_param_;
}
inline ::caffe::HDF5OutputParameter* LayerParameter::release_hdf5_output_param() {
  clear_has_hdf5_output_param();
  ::caffe::HDF5OutputParameter* temp = hdf5_output_param_;
  hdf5_output_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param) {
  delete hdf5_output_param_;
  hdf5_output_param_ = hdf5_output_param;
  if (hdf5_output_param) {
    set_has_hdf5_output_param();
  } else {
    clear_has_hdf5_output_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.hdf5_output_param)
}

// optional .caffe.HingeLossParameter hinge_loss_param = 114;
inline bool LayerParameter::has_hinge_loss_param() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void LayerParameter::set_has_hinge_loss_param() {
  _has_bits_[1] |= 0x00000020u;
}
inline void LayerParameter::clear_has_hinge_loss_param() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void LayerParameter::clear_hinge_loss_param() {
  if (hinge_loss_param_ != NULL) hinge_loss_param_->::caffe::HingeLossParameter::Clear();
  clear_has_hinge_loss_param();
}
inline const ::caffe::HingeLossParameter& LayerParameter::hinge_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.hinge_loss_param)
  return hinge_loss_param_ != NULL ? *hinge_loss_param_ : *default_instance_->hinge_loss_param_;
}
inline ::caffe::HingeLossParameter* LayerParameter::mutable_hinge_loss_param() {
  set_has_hinge_loss_param();
  if (hinge_loss_param_ == NULL) hinge_loss_param_ = new ::caffe::HingeLossParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.hinge_loss_param)
  return hinge_loss_param_;
}
inline ::caffe::HingeLossParameter* LayerParameter::release_hinge_loss_param() {
  clear_has_hinge_loss_param();
  ::caffe::HingeLossParameter* temp = hinge_loss_param_;
  hinge_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_hinge_loss_param(::caffe::HingeLossParameter* hinge_loss_param) {
  delete hinge_loss_param_;
  hinge_loss_param_ = hinge_loss_param;
  if (hinge_loss_param) {
    set_has_hinge_loss_param();
  } else {
    clear_has_hinge_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.hinge_loss_param)
}

// optional .caffe.ImageDataParameter image_data_param = 115;
inline bool LayerParameter::has_image_data_param() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void LayerParameter::set_has_image_data_param() {
  _has_bits_[1] |= 0x00000040u;
}
inline void LayerParameter::clear_has_image_data_param() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void LayerParameter::clear_image_data_param() {
  if (image_data_param_ != NULL) image_data_param_->::caffe::ImageDataParameter::Clear();
  clear_has_image_data_param();
}
inline const ::caffe::ImageDataParameter& LayerParameter::image_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.image_data_param)
  return image_data_param_ != NULL ? *image_data_param_ : *default_instance_->image_data_param_;
}
inline ::caffe::ImageDataParameter* LayerParameter::mutable_image_data_param() {
  set_has_image_data_param();
  if (image_data_param_ == NULL) image_data_param_ = new ::caffe::ImageDataParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.image_data_param)
  return image_data_param_;
}
inline ::caffe::ImageDataParameter* LayerParameter::release_image_data_param() {
  clear_has_image_data_param();
  ::caffe::ImageDataParameter* temp = image_data_param_;
  image_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_image_data_param(::caffe::ImageDataParameter* image_data_param) {
  delete image_data_param_;
  image_data_param_ = image_data_param;
  if (image_data_param) {
    set_has_image_data_param();
  } else {
    clear_has_image_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.image_data_param)
}

// optional .caffe.InfogainLossParameter infogain_loss_param = 116;
inline bool LayerParameter::has_infogain_loss_param() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void LayerParameter::set_has_infogain_loss_param() {
  _has_bits_[1] |= 0x00000080u;
}
inline void LayerParameter::clear_has_infogain_loss_param() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void LayerParameter::clear_infogain_loss_param() {
  if (infogain_loss_param_ != NULL) infogain_loss_param_->::caffe::InfogainLossParameter::Clear();
  clear_has_infogain_loss_param();
}
inline const ::caffe::InfogainLossParameter& LayerParameter::infogain_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.infogain_loss_param)
  return infogain_loss_param_ != NULL ? *infogain_loss_param_ : *default_instance_->infogain_loss_param_;
}
inline ::caffe::InfogainLossParameter* LayerParameter::mutable_infogain_loss_param() {
  set_has_infogain_loss_param();
  if (infogain_loss_param_ == NULL) infogain_loss_param_ = new ::caffe::InfogainLossParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.infogain_loss_param)
  return infogain_loss_param_;
}
inline ::caffe::InfogainLossParameter* LayerParameter::release_infogain_loss_param() {
  clear_has_infogain_loss_param();
  ::caffe::InfogainLossParameter* temp = infogain_loss_param_;
  infogain_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_infogain_loss_param(::caffe::InfogainLossParameter* infogain_loss_param) {
  delete infogain_loss_param_;
  infogain_loss_param_ = infogain_loss_param;
  if (infogain_loss_param) {
    set_has_infogain_loss_param();
  } else {
    clear_has_infogain_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.infogain_loss_param)
}

// optional .caffe.InnerProductParameter inner_product_param = 117;
inline bool LayerParameter::has_inner_product_param() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void LayerParameter::set_has_inner_product_param() {
  _has_bits_[1] |= 0x00000100u;
}
inline void LayerParameter::clear_has_inner_product_param() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void LayerParameter::clear_inner_product_param() {
  if (inner_product_param_ != NULL) inner_product_param_->::caffe::InnerProductParameter::Clear();
  clear_has_inner_product_param();
}
inline const ::caffe::InnerProductParameter& LayerParameter::inner_product_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.inner_product_param)
  return inner_product_param_ != NULL ? *inner_product_param_ : *default_instance_->inner_product_param_;
}
inline ::caffe::InnerProductParameter* LayerParameter::mutable_inner_product_param() {
  set_has_inner_product_param();
  if (inner_product_param_ == NULL) inner_product_param_ = new ::caffe::InnerProductParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.inner_product_param)
  return inner_product_param_;
}
inline ::caffe::InnerProductParameter* LayerParameter::release_inner_product_param() {
  clear_has_inner_product_param();
  ::caffe::InnerProductParameter* temp = inner_product_param_;
  inner_product_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_inner_product_param(::caffe::InnerProductParameter* inner_product_param) {
  delete inner_product_param_;
  inner_product_param_ = inner_product_param;
  if (inner_product_param) {
    set_has_inner_product_param();
  } else {
    clear_has_inner_product_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.inner_product_param)
}

// optional .caffe.InputParameter input_param = 143;
inline bool LayerParameter::has_input_param() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void LayerParameter::set_has_input_param() {
  _has_bits_[1] |= 0x00000200u;
}
inline void LayerParameter::clear_has_input_param() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void LayerParameter::clear_input_param() {
  if (input_param_ != NULL) input_param_->::caffe::InputParameter::Clear();
  clear_has_input_param();
}
inline const ::caffe::InputParameter& LayerParameter::input_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.input_param)
  return input_param_ != NULL ? *input_param_ : *default_instance_->input_param_;
}
inline ::caffe::InputParameter* LayerParameter::mutable_input_param() {
  set_has_input_param();
  if (input_param_ == NULL) input_param_ = new ::caffe::InputParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.input_param)
  return input_param_;
}
inline ::caffe::InputParameter* LayerParameter::release_input_param() {
  clear_has_input_param();
  ::caffe::InputParameter* temp = input_param_;
  input_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_input_param(::caffe::InputParameter* input_param) {
  delete input_param_;
  input_param_ = input_param;
  if (input_param) {
    set_has_input_param();
  } else {
    clear_has_input_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.input_param)
}

// optional .caffe.LogParameter log_param = 134;
inline bool LayerParameter::has_log_param() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void LayerParameter::set_has_log_param() {
  _has_bits_[1] |= 0x00000400u;
}
inline void LayerParameter::clear_has_log_param() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void LayerParameter::clear_log_param() {
  if (log_param_ != NULL) log_param_->::caffe::LogParameter::Clear();
  clear_has_log_param();
}
inline const ::caffe::LogParameter& LayerParameter::log_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.log_param)
  return log_param_ != NULL ? *log_param_ : *default_instance_->log_param_;
}
inline ::caffe::LogParameter* LayerParameter::mutable_log_param() {
  set_has_log_param();
  if (log_param_ == NULL) log_param_ = new ::caffe::LogParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.log_param)
  return log_param_;
}
inline ::caffe::LogParameter* LayerParameter::release_log_param() {
  clear_has_log_param();
  ::caffe::LogParameter* temp = log_param_;
  log_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_log_param(::caffe::LogParameter* log_param) {
  delete log_param_;
  log_param_ = log_param;
  if (log_param) {
    set_has_log_param();
  } else {
    clear_has_log_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.log_param)
}

// optional .caffe.LRNParameter lrn_param = 118;
inline bool LayerParameter::has_lrn_param() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void LayerParameter::set_has_lrn_param() {
  _has_bits_[1] |= 0x00000800u;
}
inline void LayerParameter::clear_has_lrn_param() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void LayerParameter::clear_lrn_param() {
  if (lrn_param_ != NULL) lrn_param_->::caffe::LRNParameter::Clear();
  clear_has_lrn_param();
}
inline const ::caffe::LRNParameter& LayerParameter::lrn_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.lrn_param)
  return lrn_param_ != NULL ? *lrn_param_ : *default_instance_->lrn_param_;
}
inline ::caffe::LRNParameter* LayerParameter::mutable_lrn_param() {
  set_has_lrn_param();
  if (lrn_param_ == NULL) lrn_param_ = new ::caffe::LRNParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.lrn_param)
  return lrn_param_;
}
inline ::caffe::LRNParameter* LayerParameter::release_lrn_param() {
  clear_has_lrn_param();
  ::caffe::LRNParameter* temp = lrn_param_;
  lrn_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_lrn_param(::caffe::LRNParameter* lrn_param) {
  delete lrn_param_;
  lrn_param_ = lrn_param;
  if (lrn_param) {
    set_has_lrn_param();
  } else {
    clear_has_lrn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.lrn_param)
}

// optional .caffe.MemoryDataParameter memory_data_param = 119;
inline bool LayerParameter::has_memory_data_param() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void LayerParameter::set_has_memory_data_param() {
  _has_bits_[1] |= 0x00001000u;
}
inline void LayerParameter::clear_has_memory_data_param() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void LayerParameter::clear_memory_data_param() {
  if (memory_data_param_ != NULL) memory_data_param_->::caffe::MemoryDataParameter::Clear();
  clear_has_memory_data_param();
}
inline const ::caffe::MemoryDataParameter& LayerParameter::memory_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.memory_data_param)
  return memory_data_param_ != NULL ? *memory_data_param_ : *default_instance_->memory_data_param_;
}
inline ::caffe::MemoryDataParameter* LayerParameter::mutable_memory_data_param() {
  set_has_memory_data_param();
  if (memory_data_param_ == NULL) memory_data_param_ = new ::caffe::MemoryDataParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.memory_data_param)
  return memory_data_param_;
}
inline ::caffe::MemoryDataParameter* LayerParameter::release_memory_data_param() {
  clear_has_memory_data_param();
  ::caffe::MemoryDataParameter* temp = memory_data_param_;
  memory_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_memory_data_param(::caffe::MemoryDataParameter* memory_data_param) {
  delete memory_data_param_;
  memory_data_param_ = memory_data_param;
  if (memory_data_param) {
    set_has_memory_data_param();
  } else {
    clear_has_memory_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.memory_data_param)
}

// optional .caffe.MultiBoxLossParameter multibox_loss_param = 201;
inline bool LayerParameter::has_multibox_loss_param() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void LayerParameter::set_has_multibox_loss_param() {
  _has_bits_[1] |= 0x00002000u;
}
inline void LayerParameter::clear_has_multibox_loss_param() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void LayerParameter::clear_multibox_loss_param() {
  if (multibox_loss_param_ != NULL) multibox_loss_param_->::caffe::MultiBoxLossParameter::Clear();
  clear_has_multibox_loss_param();
}
inline const ::caffe::MultiBoxLossParameter& LayerParameter::multibox_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.multibox_loss_param)
  return multibox_loss_param_ != NULL ? *multibox_loss_param_ : *default_instance_->multibox_loss_param_;
}
inline ::caffe::MultiBoxLossParameter* LayerParameter::mutable_multibox_loss_param() {
  set_has_multibox_loss_param();
  if (multibox_loss_param_ == NULL) multibox_loss_param_ = new ::caffe::MultiBoxLossParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.multibox_loss_param)
  return multibox_loss_param_;
}
inline ::caffe::MultiBoxLossParameter* LayerParameter::release_multibox_loss_param() {
  clear_has_multibox_loss_param();
  ::caffe::MultiBoxLossParameter* temp = multibox_loss_param_;
  multibox_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_multibox_loss_param(::caffe::MultiBoxLossParameter* multibox_loss_param) {
  delete multibox_loss_param_;
  multibox_loss_param_ = multibox_loss_param;
  if (multibox_loss_param) {
    set_has_multibox_loss_param();
  } else {
    clear_has_multibox_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.multibox_loss_param)
}

// optional .caffe.MVNParameter mvn_param = 120;
inline bool LayerParameter::has_mvn_param() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void LayerParameter::set_has_mvn_param() {
  _has_bits_[1] |= 0x00004000u;
}
inline void LayerParameter::clear_has_mvn_param() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void LayerParameter::clear_mvn_param() {
  if (mvn_param_ != NULL) mvn_param_->::caffe::MVNParameter::Clear();
  clear_has_mvn_param();
}
inline const ::caffe::MVNParameter& LayerParameter::mvn_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.mvn_param)
  return mvn_param_ != NULL ? *mvn_param_ : *default_instance_->mvn_param_;
}
inline ::caffe::MVNParameter* LayerParameter::mutable_mvn_param() {
  set_has_mvn_param();
  if (mvn_param_ == NULL) mvn_param_ = new ::caffe::MVNParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.mvn_param)
  return mvn_param_;
}
inline ::caffe::MVNParameter* LayerParameter::release_mvn_param() {
  clear_has_mvn_param();
  ::caffe::MVNParameter* temp = mvn_param_;
  mvn_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_mvn_param(::caffe::MVNParameter* mvn_param) {
  delete mvn_param_;
  mvn_param_ = mvn_param;
  if (mvn_param) {
    set_has_mvn_param();
  } else {
    clear_has_mvn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.mvn_param)
}

// optional .caffe.NormalizeParameter norm_param = 206;
inline bool LayerParameter::has_norm_param() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void LayerParameter::set_has_norm_param() {
  _has_bits_[1] |= 0x00008000u;
}
inline void LayerParameter::clear_has_norm_param() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void LayerParameter::clear_norm_param() {
  if (norm_param_ != NULL) norm_param_->::caffe::NormalizeParameter::Clear();
  clear_has_norm_param();
}
inline const ::caffe::NormalizeParameter& LayerParameter::norm_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.norm_param)
  return norm_param_ != NULL ? *norm_param_ : *default_instance_->norm_param_;
}
inline ::caffe::NormalizeParameter* LayerParameter::mutable_norm_param() {
  set_has_norm_param();
  if (norm_param_ == NULL) norm_param_ = new ::caffe::NormalizeParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.norm_param)
  return norm_param_;
}
inline ::caffe::NormalizeParameter* LayerParameter::release_norm_param() {
  clear_has_norm_param();
  ::caffe::NormalizeParameter* temp = norm_param_;
  norm_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_norm_param(::caffe::NormalizeParameter* norm_param) {
  delete norm_param_;
  norm_param_ = norm_param;
  if (norm_param) {
    set_has_norm_param();
  } else {
    clear_has_norm_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.norm_param)
}

// optional .caffe.ParameterParameter parameter_param = 151;
inline bool LayerParameter::has_parameter_param() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void LayerParameter::set_has_parameter_param() {
  _has_bits_[1] |= 0x00010000u;
}
inline void LayerParameter::clear_has_parameter_param() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void LayerParameter::clear_parameter_param() {
  if (parameter_param_ != NULL) parameter_param_->::caffe::ParameterParameter::Clear();
  clear_has_parameter_param();
}
inline const ::caffe::ParameterParameter& LayerParameter::parameter_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.parameter_param)
  return parameter_param_ != NULL ? *parameter_param_ : *default_instance_->parameter_param_;
}
inline ::caffe::ParameterParameter* LayerParameter::mutable_parameter_param() {
  set_has_parameter_param();
  if (parameter_param_ == NULL) parameter_param_ = new ::caffe::ParameterParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.parameter_param)
  return parameter_param_;
}
inline ::caffe::ParameterParameter* LayerParameter::release_parameter_param() {
  clear_has_parameter_param();
  ::caffe::ParameterParameter* temp = parameter_param_;
  parameter_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_parameter_param(::caffe::ParameterParameter* parameter_param) {
  delete parameter_param_;
  parameter_param_ = parameter_param;
  if (parameter_param) {
    set_has_parameter_param();
  } else {
    clear_has_parameter_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.parameter_param)
}

// optional .caffe.PermuteParameter permute_param = 202;
inline bool LayerParameter::has_permute_param() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void LayerParameter::set_has_permute_param() {
  _has_bits_[1] |= 0x00020000u;
}
inline void LayerParameter::clear_has_permute_param() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void LayerParameter::clear_permute_param() {
  if (permute_param_ != NULL) permute_param_->::caffe::PermuteParameter::Clear();
  clear_has_permute_param();
}
inline const ::caffe::PermuteParameter& LayerParameter::permute_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.permute_param)
  return permute_param_ != NULL ? *permute_param_ : *default_instance_->permute_param_;
}
inline ::caffe::PermuteParameter* LayerParameter::mutable_permute_param() {
  set_has_permute_param();
  if (permute_param_ == NULL) permute_param_ = new ::caffe::PermuteParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.permute_param)
  return permute_param_;
}
inline ::caffe::PermuteParameter* LayerParameter::release_permute_param() {
  clear_has_permute_param();
  ::caffe::PermuteParameter* temp = permute_param_;
  permute_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_permute_param(::caffe::PermuteParameter* permute_param) {
  delete permute_param_;
  permute_param_ = permute_param;
  if (permute_param) {
    set_has_permute_param();
  } else {
    clear_has_permute_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.permute_param)
}

// optional .caffe.PoolingParameter pooling_param = 121;
inline bool LayerParameter::has_pooling_param() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void LayerParameter::set_has_pooling_param() {
  _has_bits_[1] |= 0x00040000u;
}
inline void LayerParameter::clear_has_pooling_param() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void LayerParameter::clear_pooling_param() {
  if (pooling_param_ != NULL) pooling_param_->::caffe::PoolingParameter::Clear();
  clear_has_pooling_param();
}
inline const ::caffe::PoolingParameter& LayerParameter::pooling_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.pooling_param)
  return pooling_param_ != NULL ? *pooling_param_ : *default_instance_->pooling_param_;
}
inline ::caffe::PoolingParameter* LayerParameter::mutable_pooling_param() {
  set_has_pooling_param();
  if (pooling_param_ == NULL) pooling_param_ = new ::caffe::PoolingParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.pooling_param)
  return pooling_param_;
}
inline ::caffe::PoolingParameter* LayerParameter::release_pooling_param() {
  clear_has_pooling_param();
  ::caffe::PoolingParameter* temp = pooling_param_;
  pooling_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_pooling_param(::caffe::PoolingParameter* pooling_param) {
  delete pooling_param_;
  pooling_param_ = pooling_param;
  if (pooling_param) {
    set_has_pooling_param();
  } else {
    clear_has_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.pooling_param)
}

// optional .caffe.PowerParameter power_param = 122;
inline bool LayerParameter::has_power_param() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void LayerParameter::set_has_power_param() {
  _has_bits_[1] |= 0x00080000u;
}
inline void LayerParameter::clear_has_power_param() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void LayerParameter::clear_power_param() {
  if (power_param_ != NULL) power_param_->::caffe::PowerParameter::Clear();
  clear_has_power_param();
}
inline const ::caffe::PowerParameter& LayerParameter::power_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.power_param)
  return power_param_ != NULL ? *power_param_ : *default_instance_->power_param_;
}
inline ::caffe::PowerParameter* LayerParameter::mutable_power_param() {
  set_has_power_param();
  if (power_param_ == NULL) power_param_ = new ::caffe::PowerParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.power_param)
  return power_param_;
}
inline ::caffe::PowerParameter* LayerParameter::release_power_param() {
  clear_has_power_param();
  ::caffe::PowerParameter* temp = power_param_;
  power_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_power_param(::caffe::PowerParameter* power_param) {
  delete power_param_;
  power_param_ = power_param;
  if (power_param) {
    set_has_power_param();
  } else {
    clear_has_power_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.power_param)
}

// optional .caffe.PReLUParameter prelu_param = 131;
inline bool LayerParameter::has_prelu_param() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void LayerParameter::set_has_prelu_param() {
  _has_bits_[1] |= 0x00100000u;
}
inline void LayerParameter::clear_has_prelu_param() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void LayerParameter::clear_prelu_param() {
  if (prelu_param_ != NULL) prelu_param_->::caffe::PReLUParameter::Clear();
  clear_has_prelu_param();
}
inline const ::caffe::PReLUParameter& LayerParameter::prelu_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.prelu_param)
  return prelu_param_ != NULL ? *prelu_param_ : *default_instance_->prelu_param_;
}
inline ::caffe::PReLUParameter* LayerParameter::mutable_prelu_param() {
  set_has_prelu_param();
  if (prelu_param_ == NULL) prelu_param_ = new ::caffe::PReLUParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.prelu_param)
  return prelu_param_;
}
inline ::caffe::PReLUParameter* LayerParameter::release_prelu_param() {
  clear_has_prelu_param();
  ::caffe::PReLUParameter* temp = prelu_param_;
  prelu_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_prelu_param(::caffe::PReLUParameter* prelu_param) {
  delete prelu_param_;
  prelu_param_ = prelu_param;
  if (prelu_param) {
    set_has_prelu_param();
  } else {
    clear_has_prelu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.prelu_param)
}

// optional .caffe.PriorBoxParameter prior_box_param = 203;
inline bool LayerParameter::has_prior_box_param() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void LayerParameter::set_has_prior_box_param() {
  _has_bits_[1] |= 0x00200000u;
}
inline void LayerParameter::clear_has_prior_box_param() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void LayerParameter::clear_prior_box_param() {
  if (prior_box_param_ != NULL) prior_box_param_->::caffe::PriorBoxParameter::Clear();
  clear_has_prior_box_param();
}
inline const ::caffe::PriorBoxParameter& LayerParameter::prior_box_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.prior_box_param)
  return prior_box_param_ != NULL ? *prior_box_param_ : *default_instance_->prior_box_param_;
}
inline ::caffe::PriorBoxParameter* LayerParameter::mutable_prior_box_param() {
  set_has_prior_box_param();
  if (prior_box_param_ == NULL) prior_box_param_ = new ::caffe::PriorBoxParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.prior_box_param)
  return prior_box_param_;
}
inline ::caffe::PriorBoxParameter* LayerParameter::release_prior_box_param() {
  clear_has_prior_box_param();
  ::caffe::PriorBoxParameter* temp = prior_box_param_;
  prior_box_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_prior_box_param(::caffe::PriorBoxParameter* prior_box_param) {
  delete prior_box_param_;
  prior_box_param_ = prior_box_param;
  if (prior_box_param) {
    set_has_prior_box_param();
  } else {
    clear_has_prior_box_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.prior_box_param)
}

// optional .caffe.PythonParameter python_param = 130;
inline bool LayerParameter::has_python_param() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void LayerParameter::set_has_python_param() {
  _has_bits_[1] |= 0x00400000u;
}
inline void LayerParameter::clear_has_python_param() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void LayerParameter::clear_python_param() {
  if (python_param_ != NULL) python_param_->::caffe::PythonParameter::Clear();
  clear_has_python_param();
}
inline const ::caffe::PythonParameter& LayerParameter::python_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.python_param)
  return python_param_ != NULL ? *python_param_ : *default_instance_->python_param_;
}
inline ::caffe::PythonParameter* LayerParameter::mutable_python_param() {
  set_has_python_param();
  if (python_param_ == NULL) python_param_ = new ::caffe::PythonParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.python_param)
  return python_param_;
}
inline ::caffe::PythonParameter* LayerParameter::release_python_param() {
  clear_has_python_param();
  ::caffe::PythonParameter* temp = python_param_;
  python_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_python_param(::caffe::PythonParameter* python_param) {
  delete python_param_;
  python_param_ = python_param;
  if (python_param) {
    set_has_python_param();
  } else {
    clear_has_python_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.python_param)
}

// optional .caffe.ReductionParameter reduction_param = 136;
inline bool LayerParameter::has_reduction_param() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void LayerParameter::set_has_reduction_param() {
  _has_bits_[1] |= 0x00800000u;
}
inline void LayerParameter::clear_has_reduction_param() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void LayerParameter::clear_reduction_param() {
  if (reduction_param_ != NULL) reduction_param_->::caffe::ReductionParameter::Clear();
  clear_has_reduction_param();
}
inline const ::caffe::ReductionParameter& LayerParameter::reduction_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.reduction_param)
  return reduction_param_ != NULL ? *reduction_param_ : *default_instance_->reduction_param_;
}
inline ::caffe::ReductionParameter* LayerParameter::mutable_reduction_param() {
  set_has_reduction_param();
  if (reduction_param_ == NULL) reduction_param_ = new ::caffe::ReductionParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.reduction_param)
  return reduction_param_;
}
inline ::caffe::ReductionParameter* LayerParameter::release_reduction_param() {
  clear_has_reduction_param();
  ::caffe::ReductionParameter* temp = reduction_param_;
  reduction_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_reduction_param(::caffe::ReductionParameter* reduction_param) {
  delete reduction_param_;
  reduction_param_ = reduction_param;
  if (reduction_param) {
    set_has_reduction_param();
  } else {
    clear_has_reduction_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.reduction_param)
}

// optional .caffe.ReLUParameter relu_param = 123;
inline bool LayerParameter::has_relu_param() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void LayerParameter::set_has_relu_param() {
  _has_bits_[1] |= 0x01000000u;
}
inline void LayerParameter::clear_has_relu_param() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void LayerParameter::clear_relu_param() {
  if (relu_param_ != NULL) relu_param_->::caffe::ReLUParameter::Clear();
  clear_has_relu_param();
}
inline const ::caffe::ReLUParameter& LayerParameter::relu_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.relu_param)
  return relu_param_ != NULL ? *relu_param_ : *default_instance_->relu_param_;
}
inline ::caffe::ReLUParameter* LayerParameter::mutable_relu_param() {
  set_has_relu_param();
  if (relu_param_ == NULL) relu_param_ = new ::caffe::ReLUParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.relu_param)
  return relu_param_;
}
inline ::caffe::ReLUParameter* LayerParameter::release_relu_param() {
  clear_has_relu_param();
  ::caffe::ReLUParameter* temp = relu_param_;
  relu_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_relu_param(::caffe::ReLUParameter* relu_param) {
  delete relu_param_;
  relu_param_ = relu_param;
  if (relu_param) {
    set_has_relu_param();
  } else {
    clear_has_relu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.relu_param)
}

// optional .caffe.ReshapeParameter reshape_param = 133;
inline bool LayerParameter::has_reshape_param() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void LayerParameter::set_has_reshape_param() {
  _has_bits_[1] |= 0x02000000u;
}
inline void LayerParameter::clear_has_reshape_param() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void LayerParameter::clear_reshape_param() {
  if (reshape_param_ != NULL) reshape_param_->::caffe::ReshapeParameter::Clear();
  clear_has_reshape_param();
}
inline const ::caffe::ReshapeParameter& LayerParameter::reshape_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.reshape_param)
  return reshape_param_ != NULL ? *reshape_param_ : *default_instance_->reshape_param_;
}
inline ::caffe::ReshapeParameter* LayerParameter::mutable_reshape_param() {
  set_has_reshape_param();
  if (reshape_param_ == NULL) reshape_param_ = new ::caffe::ReshapeParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.reshape_param)
  return reshape_param_;
}
inline ::caffe::ReshapeParameter* LayerParameter::release_reshape_param() {
  clear_has_reshape_param();
  ::caffe::ReshapeParameter* temp = reshape_param_;
  reshape_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_reshape_param(::caffe::ReshapeParameter* reshape_param) {
  delete reshape_param_;
  reshape_param_ = reshape_param;
  if (reshape_param) {
    set_has_reshape_param();
  } else {
    clear_has_reshape_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.reshape_param)
}

// optional .caffe.ScaleParameter scale_param = 142;
inline bool LayerParameter::has_scale_param() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void LayerParameter::set_has_scale_param() {
  _has_bits_[1] |= 0x04000000u;
}
inline void LayerParameter::clear_has_scale_param() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void LayerParameter::clear_scale_param() {
  if (scale_param_ != NULL) scale_param_->::caffe::ScaleParameter::Clear();
  clear_has_scale_param();
}
inline const ::caffe::ScaleParameter& LayerParameter::scale_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.scale_param)
  return scale_param_ != NULL ? *scale_param_ : *default_instance_->scale_param_;
}
inline ::caffe::ScaleParameter* LayerParameter::mutable_scale_param() {
  set_has_scale_param();
  if (scale_param_ == NULL) scale_param_ = new ::caffe::ScaleParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.scale_param)
  return scale_param_;
}
inline ::caffe::ScaleParameter* LayerParameter::release_scale_param() {
  clear_has_scale_param();
  ::caffe::ScaleParameter* temp = scale_param_;
  scale_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_scale_param(::caffe::ScaleParameter* scale_param) {
  delete scale_param_;
  scale_param_ = scale_param;
  if (scale_param) {
    set_has_scale_param();
  } else {
    clear_has_scale_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.scale_param)
}

// optional .caffe.SigmoidParameter sigmoid_param = 124;
inline bool LayerParameter::has_sigmoid_param() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void LayerParameter::set_has_sigmoid_param() {
  _has_bits_[1] |= 0x08000000u;
}
inline void LayerParameter::clear_has_sigmoid_param() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void LayerParameter::clear_sigmoid_param() {
  if (sigmoid_param_ != NULL) sigmoid_param_->::caffe::SigmoidParameter::Clear();
  clear_has_sigmoid_param();
}
inline const ::caffe::SigmoidParameter& LayerParameter::sigmoid_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.sigmoid_param)
  return sigmoid_param_ != NULL ? *sigmoid_param_ : *default_instance_->sigmoid_param_;
}
inline ::caffe::SigmoidParameter* LayerParameter::mutable_sigmoid_param() {
  set_has_sigmoid_param();
  if (sigmoid_param_ == NULL) sigmoid_param_ = new ::caffe::SigmoidParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.sigmoid_param)
  return sigmoid_param_;
}
inline ::caffe::SigmoidParameter* LayerParameter::release_sigmoid_param() {
  clear_has_sigmoid_param();
  ::caffe::SigmoidParameter* temp = sigmoid_param_;
  sigmoid_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_sigmoid_param(::caffe::SigmoidParameter* sigmoid_param) {
  delete sigmoid_param_;
  sigmoid_param_ = sigmoid_param;
  if (sigmoid_param) {
    set_has_sigmoid_param();
  } else {
    clear_has_sigmoid_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.sigmoid_param)
}

// optional .caffe.SoftmaxParameter softmax_param = 125;
inline bool LayerParameter::has_softmax_param() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void LayerParameter::set_has_softmax_param() {
  _has_bits_[1] |= 0x10000000u;
}
inline void LayerParameter::clear_has_softmax_param() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void LayerParameter::clear_softmax_param() {
  if (softmax_param_ != NULL) softmax_param_->::caffe::SoftmaxParameter::Clear();
  clear_has_softmax_param();
}
inline const ::caffe::SoftmaxParameter& LayerParameter::softmax_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.softmax_param)
  return softmax_param_ != NULL ? *softmax_param_ : *default_instance_->softmax_param_;
}
inline ::caffe::SoftmaxParameter* LayerParameter::mutable_softmax_param() {
  set_has_softmax_param();
  if (softmax_param_ == NULL) softmax_param_ = new ::caffe::SoftmaxParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.softmax_param)
  return softmax_param_;
}
inline ::caffe::SoftmaxParameter* LayerParameter::release_softmax_param() {
  clear_has_softmax_param();
  ::caffe::SoftmaxParameter* temp = softmax_param_;
  softmax_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_softmax_param(::caffe::SoftmaxParameter* softmax_param) {
  delete softmax_param_;
  softmax_param_ = softmax_param;
  if (softmax_param) {
    set_has_softmax_param();
  } else {
    clear_has_softmax_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.softmax_param)
}

// optional .caffe.SPPParameter spp_param = 132;
inline bool LayerParameter::has_spp_param() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void LayerParameter::set_has_spp_param() {
  _has_bits_[1] |= 0x20000000u;
}
inline void LayerParameter::clear_has_spp_param() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void LayerParameter::clear_spp_param() {
  if (spp_param_ != NULL) spp_param_->::caffe::SPPParameter::Clear();
  clear_has_spp_param();
}
inline const ::caffe::SPPParameter& LayerParameter::spp_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.spp_param)
  return spp_param_ != NULL ? *spp_param_ : *default_instance_->spp_param_;
}
inline ::caffe::SPPParameter* LayerParameter::mutable_spp_param() {
  set_has_spp_param();
  if (spp_param_ == NULL) spp_param_ = new ::caffe::SPPParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.spp_param)
  return spp_param_;
}
inline ::caffe::SPPParameter* LayerParameter::release_spp_param() {
  clear_has_spp_param();
  ::caffe::SPPParameter* temp = spp_param_;
  spp_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_spp_param(::caffe::SPPParameter* spp_param) {
  delete spp_param_;
  spp_param_ = spp_param;
  if (spp_param) {
    set_has_spp_param();
  } else {
    clear_has_spp_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.spp_param)
}

// optional .caffe.SliceParameter slice_param = 126;
inline bool LayerParameter::has_slice_param() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void LayerParameter::set_has_slice_param() {
  _has_bits_[1] |= 0x40000000u;
}
inline void LayerParameter::clear_has_slice_param() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void LayerParameter::clear_slice_param() {
  if (slice_param_ != NULL) slice_param_->::caffe::SliceParameter::Clear();
  clear_has_slice_param();
}
inline const ::caffe::SliceParameter& LayerParameter::slice_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.slice_param)
  return slice_param_ != NULL ? *slice_param_ : *default_instance_->slice_param_;
}
inline ::caffe::SliceParameter* LayerParameter::mutable_slice_param() {
  set_has_slice_param();
  if (slice_param_ == NULL) slice_param_ = new ::caffe::SliceParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.slice_param)
  return slice_param_;
}
inline ::caffe::SliceParameter* LayerParameter::release_slice_param() {
  clear_has_slice_param();
  ::caffe::SliceParameter* temp = slice_param_;
  slice_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_slice_param(::caffe::SliceParameter* slice_param) {
  delete slice_param_;
  slice_param_ = slice_param;
  if (slice_param) {
    set_has_slice_param();
  } else {
    clear_has_slice_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.slice_param)
}

// optional .caffe.TanHParameter tanh_param = 127;
inline bool LayerParameter::has_tanh_param() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void LayerParameter::set_has_tanh_param() {
  _has_bits_[1] |= 0x80000000u;
}
inline void LayerParameter::clear_has_tanh_param() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void LayerParameter::clear_tanh_param() {
  if (tanh_param_ != NULL) tanh_param_->::caffe::TanHParameter::Clear();
  clear_has_tanh_param();
}
inline const ::caffe::TanHParameter& LayerParameter::tanh_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.tanh_param)
  return tanh_param_ != NULL ? *tanh_param_ : *default_instance_->tanh_param_;
}
inline ::caffe::TanHParameter* LayerParameter::mutable_tanh_param() {
  set_has_tanh_param();
  if (tanh_param_ == NULL) tanh_param_ = new ::caffe::TanHParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.tanh_param)
  return tanh_param_;
}
inline ::caffe::TanHParameter* LayerParameter::release_tanh_param() {
  clear_has_tanh_param();
  ::caffe::TanHParameter* temp = tanh_param_;
  tanh_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tanh_param(::caffe::TanHParameter* tanh_param) {
  delete tanh_param_;
  tanh_param_ = tanh_param;
  if (tanh_param) {
    set_has_tanh_param();
  } else {
    clear_has_tanh_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.tanh_param)
}

// optional .caffe.ThresholdParameter threshold_param = 128;
inline bool LayerParameter::has_threshold_param() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void LayerParameter::set_has_threshold_param() {
  _has_bits_[2] |= 0x00000001u;
}
inline void LayerParameter::clear_has_threshold_param() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void LayerParameter::clear_threshold_param() {
  if (threshold_param_ != NULL) threshold_param_->::caffe::ThresholdParameter::Clear();
  clear_has_threshold_param();
}
inline const ::caffe::ThresholdParameter& LayerParameter::threshold_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.threshold_param)
  return threshold_param_ != NULL ? *threshold_param_ : *default_instance_->threshold_param_;
}
inline ::caffe::ThresholdParameter* LayerParameter::mutable_threshold_param() {
  set_has_threshold_param();
  if (threshold_param_ == NULL) threshold_param_ = new ::caffe::ThresholdParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.threshold_param)
  return threshold_param_;
}
inline ::caffe::ThresholdParameter* LayerParameter::release_threshold_param() {
  clear_has_threshold_param();
  ::caffe::ThresholdParameter* temp = threshold_param_;
  threshold_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_threshold_param(::caffe::ThresholdParameter* threshold_param) {
  delete threshold_param_;
  threshold_param_ = threshold_param;
  if (threshold_param) {
    set_has_threshold_param();
  } else {
    clear_has_threshold_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.threshold_param)
}

// optional .caffe.TileParameter tile_param = 138;
inline bool LayerParameter::has_tile_param() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void LayerParameter::set_has_tile_param() {
  _has_bits_[2] |= 0x00000002u;
}
inline void LayerParameter::clear_has_tile_param() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void LayerParameter::clear_tile_param() {
  if (tile_param_ != NULL) tile_param_->::caffe::TileParameter::Clear();
  clear_has_tile_param();
}
inline const ::caffe::TileParameter& LayerParameter::tile_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.tile_param)
  return tile_param_ != NULL ? *tile_param_ : *default_instance_->tile_param_;
}
inline ::caffe::TileParameter* LayerParameter::mutable_tile_param() {
  set_has_tile_param();
  if (tile_param_ == NULL) tile_param_ = new ::caffe::TileParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.tile_param)
  return tile_param_;
}
inline ::caffe::TileParameter* LayerParameter::release_tile_param() {
  clear_has_tile_param();
  ::caffe::TileParameter* temp = tile_param_;
  tile_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tile_param(::caffe::TileParameter* tile_param) {
  delete tile_param_;
  tile_param_ = tile_param;
  if (tile_param) {
    set_has_tile_param();
  } else {
    clear_has_tile_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.tile_param)
}

// optional .caffe.WindowDataParameter window_data_param = 129;
inline bool LayerParameter::has_window_data_param() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void LayerParameter::set_has_window_data_param() {
  _has_bits_[2] |= 0x00000004u;
}
inline void LayerParameter::clear_has_window_data_param() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void LayerParameter::clear_window_data_param() {
  if (window_data_param_ != NULL) window_data_param_->::caffe::WindowDataParameter::Clear();
  clear_has_window_data_param();
}
inline const ::caffe::WindowDataParameter& LayerParameter::window_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.window_data_param)
  return window_data_param_ != NULL ? *window_data_param_ : *default_instance_->window_data_param_;
}
inline ::caffe::WindowDataParameter* LayerParameter::mutable_window_data_param() {
  set_has_window_data_param();
  if (window_data_param_ == NULL) window_data_param_ = new ::caffe::WindowDataParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.window_data_param)
  return window_data_param_;
}
inline ::caffe::WindowDataParameter* LayerParameter::release_window_data_param() {
  clear_has_window_data_param();
  ::caffe::WindowDataParameter* temp = window_data_param_;
  window_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_window_data_param(::caffe::WindowDataParameter* window_data_param) {
  delete window_data_param_;
  window_data_param_ = window_data_param;
  if (window_data_param) {
    set_has_window_data_param();
  } else {
    clear_has_window_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.window_data_param)
}

// optional .caffe.DetectNetGroundTruthParameter detectnet_groundtruth_param = 6801;
inline bool LayerParameter::has_detectnet_groundtruth_param() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void LayerParameter::set_has_detectnet_groundtruth_param() {
  _has_bits_[2] |= 0x00000008u;
}
inline void LayerParameter::clear_has_detectnet_groundtruth_param() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void LayerParameter::clear_detectnet_groundtruth_param() {
  if (detectnet_groundtruth_param_ != NULL) detectnet_groundtruth_param_->::caffe::DetectNetGroundTruthParameter::Clear();
  clear_has_detectnet_groundtruth_param();
}
inline const ::caffe::DetectNetGroundTruthParameter& LayerParameter::detectnet_groundtruth_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.detectnet_groundtruth_param)
  return detectnet_groundtruth_param_ != NULL ? *detectnet_groundtruth_param_ : *default_instance_->detectnet_groundtruth_param_;
}
inline ::caffe::DetectNetGroundTruthParameter* LayerParameter::mutable_detectnet_groundtruth_param() {
  set_has_detectnet_groundtruth_param();
  if (detectnet_groundtruth_param_ == NULL) detectnet_groundtruth_param_ = new ::caffe::DetectNetGroundTruthParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.detectnet_groundtruth_param)
  return detectnet_groundtruth_param_;
}
inline ::caffe::DetectNetGroundTruthParameter* LayerParameter::release_detectnet_groundtruth_param() {
  clear_has_detectnet_groundtruth_param();
  ::caffe::DetectNetGroundTruthParameter* temp = detectnet_groundtruth_param_;
  detectnet_groundtruth_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_detectnet_groundtruth_param(::caffe::DetectNetGroundTruthParameter* detectnet_groundtruth_param) {
  delete detectnet_groundtruth_param_;
  detectnet_groundtruth_param_ = detectnet_groundtruth_param;
  if (detectnet_groundtruth_param) {
    set_has_detectnet_groundtruth_param();
  } else {
    clear_has_detectnet_groundtruth_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.detectnet_groundtruth_param)
}

// optional .caffe.DetectNetAugmentationParameter detectnet_augmentation_param = 6802;
inline bool LayerParameter::has_detectnet_augmentation_param() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void LayerParameter::set_has_detectnet_augmentation_param() {
  _has_bits_[2] |= 0x00000010u;
}
inline void LayerParameter::clear_has_detectnet_augmentation_param() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void LayerParameter::clear_detectnet_augmentation_param() {
  if (detectnet_augmentation_param_ != NULL) detectnet_augmentation_param_->::caffe::DetectNetAugmentationParameter::Clear();
  clear_has_detectnet_augmentation_param();
}
inline const ::caffe::DetectNetAugmentationParameter& LayerParameter::detectnet_augmentation_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.detectnet_augmentation_param)
  return detectnet_augmentation_param_ != NULL ? *detectnet_augmentation_param_ : *default_instance_->detectnet_augmentation_param_;
}
inline ::caffe::DetectNetAugmentationParameter* LayerParameter::mutable_detectnet_augmentation_param() {
  set_has_detectnet_augmentation_param();
  if (detectnet_augmentation_param_ == NULL) detectnet_augmentation_param_ = new ::caffe::DetectNetAugmentationParameter;
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.detectnet_augmentation_param)
  return detectnet_augmentation_param_;
}
inline ::caffe::DetectNetAugmentationParameter* LayerParameter::release_detectnet_augmentation_param() {
  clear_has_detectnet_augmentation_param();
  ::caffe::DetectNetAugmentationParameter* temp = detectnet_augmentation_param_;
  detectnet_augmentation_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_detectnet_augmentation_param(::caffe::DetectNetAugmentationParameter* detectnet_augmentation_param) {
  delete detectnet_augmentation_param_;
  detectnet_augmentation_param_ = detectnet_augmentation_param;
  if (detectnet_augmentation_param) {
    set_has_detectnet_augmentation_param();
  } else {
    clear_has_detectnet_augmentation_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.detectnet_augmentation_param)
}

// -------------------------------------------------------------------

// TransformationParameter

// optional float scale = 1 [default = 1];
inline bool TransformationParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransformationParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransformationParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransformationParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float TransformationParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.scale)
  return scale_;
}
inline void TransformationParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.scale)
}

// optional bool mirror = 2 [default = false];
inline bool TransformationParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransformationParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransformationParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransformationParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool TransformationParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.mirror)
  return mirror_;
}
inline void TransformationParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.mirror)
}

// optional uint32 crop_size = 3 [default = 0];
inline bool TransformationParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransformationParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TransformationParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TransformationParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
inline ::google::protobuf::uint32 TransformationParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.crop_size)
  return crop_size_;
}
inline void TransformationParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.crop_size)
}

// optional uint32 crop_h = 11 [default = 0];
inline bool TransformationParameter::has_crop_h() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TransformationParameter::set_has_crop_h() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TransformationParameter::clear_has_crop_h() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TransformationParameter::clear_crop_h() {
  crop_h_ = 0u;
  clear_has_crop_h();
}
inline ::google::protobuf::uint32 TransformationParameter::crop_h() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.crop_h)
  return crop_h_;
}
inline void TransformationParameter::set_crop_h(::google::protobuf::uint32 value) {
  set_has_crop_h();
  crop_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.crop_h)
}

// optional uint32 crop_w = 12 [default = 0];
inline bool TransformationParameter::has_crop_w() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TransformationParameter::set_has_crop_w() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TransformationParameter::clear_has_crop_w() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TransformationParameter::clear_crop_w() {
  crop_w_ = 0u;
  clear_has_crop_w();
}
inline ::google::protobuf::uint32 TransformationParameter::crop_w() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.crop_w)
  return crop_w_;
}
inline void TransformationParameter::set_crop_w(::google::protobuf::uint32 value) {
  set_has_crop_w();
  crop_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.crop_w)
}

// optional string mean_file = 4;
inline bool TransformationParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TransformationParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TransformationParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TransformationParameter::clear_mean_file() {
  if (mean_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_->clear();
  }
  clear_has_mean_file();
}
inline const ::std::string& TransformationParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.mean_file)
  return *mean_file_;
}
inline void TransformationParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.mean_file)
}
inline void TransformationParameter::set_mean_file(const char* value) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.TransformationParameter.mean_file)
}
inline void TransformationParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.TransformationParameter.mean_file)
}
inline ::std::string* TransformationParameter::mutable_mean_file() {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe.TransformationParameter.mean_file)
  return mean_file_;
}
inline ::std::string* TransformationParameter::release_mean_file() {
  clear_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mean_file_;
    mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TransformationParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mean_file_;
  }
  if (mean_file) {
    set_has_mean_file();
    mean_file_ = mean_file;
  } else {
    clear_has_mean_file();
    mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.TransformationParameter.mean_file)
}

// repeated float mean_value = 5;
inline int TransformationParameter::mean_value_size() const {
  return mean_value_.size();
}
inline void TransformationParameter::clear_mean_value() {
  mean_value_.Clear();
}
inline float TransformationParameter::mean_value(int index) const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.mean_value)
  return mean_value_.Get(index);
}
inline void TransformationParameter::set_mean_value(int index, float value) {
  mean_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.mean_value)
}
inline void TransformationParameter::add_mean_value(float value) {
  mean_value_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.TransformationParameter.mean_value)
}
inline const ::google::protobuf::RepeatedField< float >&
TransformationParameter::mean_value() const {
  // @@protoc_insertion_point(field_list:caffe.TransformationParameter.mean_value)
  return mean_value_;
}
inline ::google::protobuf::RepeatedField< float >*
TransformationParameter::mutable_mean_value() {
  // @@protoc_insertion_point(field_mutable_list:caffe.TransformationParameter.mean_value)
  return &mean_value_;
}

// optional bool force_color = 6 [default = false];
inline bool TransformationParameter::has_force_color() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TransformationParameter::set_has_force_color() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TransformationParameter::clear_has_force_color() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TransformationParameter::clear_force_color() {
  force_color_ = false;
  clear_has_force_color();
}
inline bool TransformationParameter::force_color() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.force_color)
  return force_color_;
}
inline void TransformationParameter::set_force_color(bool value) {
  set_has_force_color();
  force_color_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.force_color)
}

// optional bool force_gray = 7 [default = false];
inline bool TransformationParameter::has_force_gray() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TransformationParameter::set_has_force_gray() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TransformationParameter::clear_has_force_gray() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TransformationParameter::clear_force_gray() {
  force_gray_ = false;
  clear_has_force_gray();
}
inline bool TransformationParameter::force_gray() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.force_gray)
  return force_gray_;
}
inline void TransformationParameter::set_force_gray(bool value) {
  set_has_force_gray();
  force_gray_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.force_gray)
}

// optional .caffe.ResizeParameter resize_param = 8;
inline bool TransformationParameter::has_resize_param() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TransformationParameter::set_has_resize_param() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TransformationParameter::clear_has_resize_param() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TransformationParameter::clear_resize_param() {
  if (resize_param_ != NULL) resize_param_->::caffe::ResizeParameter::Clear();
  clear_has_resize_param();
}
inline const ::caffe::ResizeParameter& TransformationParameter::resize_param() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.resize_param)
  return resize_param_ != NULL ? *resize_param_ : *default_instance_->resize_param_;
}
inline ::caffe::ResizeParameter* TransformationParameter::mutable_resize_param() {
  set_has_resize_param();
  if (resize_param_ == NULL) resize_param_ = new ::caffe::ResizeParameter;
  // @@protoc_insertion_point(field_mutable:caffe.TransformationParameter.resize_param)
  return resize_param_;
}
inline ::caffe::ResizeParameter* TransformationParameter::release_resize_param() {
  clear_has_resize_param();
  ::caffe::ResizeParameter* temp = resize_param_;
  resize_param_ = NULL;
  return temp;
}
inline void TransformationParameter::set_allocated_resize_param(::caffe::ResizeParameter* resize_param) {
  delete resize_param_;
  resize_param_ = resize_param;
  if (resize_param) {
    set_has_resize_param();
  } else {
    clear_has_resize_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.TransformationParameter.resize_param)
}

// optional .caffe.NoiseParameter noise_param = 9;
inline bool TransformationParameter::has_noise_param() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TransformationParameter::set_has_noise_param() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TransformationParameter::clear_has_noise_param() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TransformationParameter::clear_noise_param() {
  if (noise_param_ != NULL) noise_param_->::caffe::NoiseParameter::Clear();
  clear_has_noise_param();
}
inline const ::caffe::NoiseParameter& TransformationParameter::noise_param() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.noise_param)
  return noise_param_ != NULL ? *noise_param_ : *default_instance_->noise_param_;
}
inline ::caffe::NoiseParameter* TransformationParameter::mutable_noise_param() {
  set_has_noise_param();
  if (noise_param_ == NULL) noise_param_ = new ::caffe::NoiseParameter;
  // @@protoc_insertion_point(field_mutable:caffe.TransformationParameter.noise_param)
  return noise_param_;
}
inline ::caffe::NoiseParameter* TransformationParameter::release_noise_param() {
  clear_has_noise_param();
  ::caffe::NoiseParameter* temp = noise_param_;
  noise_param_ = NULL;
  return temp;
}
inline void TransformationParameter::set_allocated_noise_param(::caffe::NoiseParameter* noise_param) {
  delete noise_param_;
  noise_param_ = noise_param;
  if (noise_param) {
    set_has_noise_param();
  } else {
    clear_has_noise_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.TransformationParameter.noise_param)
}

// optional .caffe.DistortionParameter distort_param = 13;
inline bool TransformationParameter::has_distort_param() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TransformationParameter::set_has_distort_param() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TransformationParameter::clear_has_distort_param() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TransformationParameter::clear_distort_param() {
  if (distort_param_ != NULL) distort_param_->::caffe::DistortionParameter::Clear();
  clear_has_distort_param();
}
inline const ::caffe::DistortionParameter& TransformationParameter::distort_param() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.distort_param)
  return distort_param_ != NULL ? *distort_param_ : *default_instance_->distort_param_;
}
inline ::caffe::DistortionParameter* TransformationParameter::mutable_distort_param() {
  set_has_distort_param();
  if (distort_param_ == NULL) distort_param_ = new ::caffe::DistortionParameter;
  // @@protoc_insertion_point(field_mutable:caffe.TransformationParameter.distort_param)
  return distort_param_;
}
inline ::caffe::DistortionParameter* TransformationParameter::release_distort_param() {
  clear_has_distort_param();
  ::caffe::DistortionParameter* temp = distort_param_;
  distort_param_ = NULL;
  return temp;
}
inline void TransformationParameter::set_allocated_distort_param(::caffe::DistortionParameter* distort_param) {
  delete distort_param_;
  distort_param_ = distort_param;
  if (distort_param) {
    set_has_distort_param();
  } else {
    clear_has_distort_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.TransformationParameter.distort_param)
}

// optional .caffe.ExpansionParameter expand_param = 14;
inline bool TransformationParameter::has_expand_param() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TransformationParameter::set_has_expand_param() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TransformationParameter::clear_has_expand_param() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TransformationParameter::clear_expand_param() {
  if (expand_param_ != NULL) expand_param_->::caffe::ExpansionParameter::Clear();
  clear_has_expand_param();
}
inline const ::caffe::ExpansionParameter& TransformationParameter::expand_param() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.expand_param)
  return expand_param_ != NULL ? *expand_param_ : *default_instance_->expand_param_;
}
inline ::caffe::ExpansionParameter* TransformationParameter::mutable_expand_param() {
  set_has_expand_param();
  if (expand_param_ == NULL) expand_param_ = new ::caffe::ExpansionParameter;
  // @@protoc_insertion_point(field_mutable:caffe.TransformationParameter.expand_param)
  return expand_param_;
}
inline ::caffe::ExpansionParameter* TransformationParameter::release_expand_param() {
  clear_has_expand_param();
  ::caffe::ExpansionParameter* temp = expand_param_;
  expand_param_ = NULL;
  return temp;
}
inline void TransformationParameter::set_allocated_expand_param(::caffe::ExpansionParameter* expand_param) {
  delete expand_param_;
  expand_param_ = expand_param;
  if (expand_param) {
    set_has_expand_param();
  } else {
    clear_has_expand_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.TransformationParameter.expand_param)
}

// optional .caffe.EmitConstraint emit_constraint = 10;
inline bool TransformationParameter::has_emit_constraint() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TransformationParameter::set_has_emit_constraint() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TransformationParameter::clear_has_emit_constraint() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TransformationParameter::clear_emit_constraint() {
  if (emit_constraint_ != NULL) emit_constraint_->::caffe::EmitConstraint::Clear();
  clear_has_emit_constraint();
}
inline const ::caffe::EmitConstraint& TransformationParameter::emit_constraint() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.emit_constraint)
  return emit_constraint_ != NULL ? *emit_constraint_ : *default_instance_->emit_constraint_;
}
inline ::caffe::EmitConstraint* TransformationParameter::mutable_emit_constraint() {
  set_has_emit_constraint();
  if (emit_constraint_ == NULL) emit_constraint_ = new ::caffe::EmitConstraint;
  // @@protoc_insertion_point(field_mutable:caffe.TransformationParameter.emit_constraint)
  return emit_constraint_;
}
inline ::caffe::EmitConstraint* TransformationParameter::release_emit_constraint() {
  clear_has_emit_constraint();
  ::caffe::EmitConstraint* temp = emit_constraint_;
  emit_constraint_ = NULL;
  return temp;
}
inline void TransformationParameter::set_allocated_emit_constraint(::caffe::EmitConstraint* emit_constraint) {
  delete emit_constraint_;
  emit_constraint_ = emit_constraint;
  if (emit_constraint) {
    set_has_emit_constraint();
  } else {
    clear_has_emit_constraint();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.TransformationParameter.emit_constraint)
}

// optional bool use_gpu_transform = 15 [default = false];
inline bool TransformationParameter::has_use_gpu_transform() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TransformationParameter::set_has_use_gpu_transform() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TransformationParameter::clear_has_use_gpu_transform() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TransformationParameter::clear_use_gpu_transform() {
  use_gpu_transform_ = false;
  clear_has_use_gpu_transform();
}
inline bool TransformationParameter::use_gpu_transform() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.use_gpu_transform)
  return use_gpu_transform_;
}
inline void TransformationParameter::set_use_gpu_transform(bool value) {
  set_has_use_gpu_transform();
  use_gpu_transform_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.use_gpu_transform)
}

// optional int64 random_seed = 16 [default = -1];
inline bool TransformationParameter::has_random_seed() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TransformationParameter::set_has_random_seed() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TransformationParameter::clear_has_random_seed() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TransformationParameter::clear_random_seed() {
  random_seed_ = GOOGLE_LONGLONG(-1);
  clear_has_random_seed();
}
inline ::google::protobuf::int64 TransformationParameter::random_seed() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.random_seed)
  return random_seed_;
}
inline void TransformationParameter::set_random_seed(::google::protobuf::int64 value) {
  set_has_random_seed();
  random_seed_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.random_seed)
}

// -------------------------------------------------------------------

// ResizeParameter

// optional float prob = 1 [default = 1];
inline bool ResizeParameter::has_prob() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResizeParameter::set_has_prob() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResizeParameter::clear_has_prob() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResizeParameter::clear_prob() {
  prob_ = 1;
  clear_has_prob();
}
inline float ResizeParameter::prob() const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.prob)
  return prob_;
}
inline void ResizeParameter::set_prob(float value) {
  set_has_prob();
  prob_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.prob)
}

// optional .caffe.ResizeParameter.Resize_mode resize_mode = 2 [default = WARP];
inline bool ResizeParameter::has_resize_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResizeParameter::set_has_resize_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResizeParameter::clear_has_resize_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResizeParameter::clear_resize_mode() {
  resize_mode_ = 1;
  clear_has_resize_mode();
}
inline ::caffe::ResizeParameter_Resize_mode ResizeParameter::resize_mode() const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.resize_mode)
  return static_cast< ::caffe::ResizeParameter_Resize_mode >(resize_mode_);
}
inline void ResizeParameter::set_resize_mode(::caffe::ResizeParameter_Resize_mode value) {
  assert(::caffe::ResizeParameter_Resize_mode_IsValid(value));
  set_has_resize_mode();
  resize_mode_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.resize_mode)
}

// optional uint32 height = 3 [default = 0];
inline bool ResizeParameter::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResizeParameter::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResizeParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResizeParameter::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 ResizeParameter::height() const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.height)
  return height_;
}
inline void ResizeParameter::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.height)
}

// optional uint32 width = 4 [default = 0];
inline bool ResizeParameter::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResizeParameter::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResizeParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResizeParameter::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 ResizeParameter::width() const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.width)
  return width_;
}
inline void ResizeParameter::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.width)
}

// optional uint32 height_scale = 8 [default = 0];
inline bool ResizeParameter::has_height_scale() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResizeParameter::set_has_height_scale() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResizeParameter::clear_has_height_scale() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResizeParameter::clear_height_scale() {
  height_scale_ = 0u;
  clear_has_height_scale();
}
inline ::google::protobuf::uint32 ResizeParameter::height_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.height_scale)
  return height_scale_;
}
inline void ResizeParameter::set_height_scale(::google::protobuf::uint32 value) {
  set_has_height_scale();
  height_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.height_scale)
}

// optional uint32 width_scale = 9 [default = 0];
inline bool ResizeParameter::has_width_scale() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ResizeParameter::set_has_width_scale() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ResizeParameter::clear_has_width_scale() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ResizeParameter::clear_width_scale() {
  width_scale_ = 0u;
  clear_has_width_scale();
}
inline ::google::protobuf::uint32 ResizeParameter::width_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.width_scale)
  return width_scale_;
}
inline void ResizeParameter::set_width_scale(::google::protobuf::uint32 value) {
  set_has_width_scale();
  width_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.width_scale)
}

// optional .caffe.ResizeParameter.Pad_mode pad_mode = 5 [default = CONSTANT];
inline bool ResizeParameter::has_pad_mode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ResizeParameter::set_has_pad_mode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ResizeParameter::clear_has_pad_mode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ResizeParameter::clear_pad_mode() {
  pad_mode_ = 1;
  clear_has_pad_mode();
}
inline ::caffe::ResizeParameter_Pad_mode ResizeParameter::pad_mode() const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.pad_mode)
  return static_cast< ::caffe::ResizeParameter_Pad_mode >(pad_mode_);
}
inline void ResizeParameter::set_pad_mode(::caffe::ResizeParameter_Pad_mode value) {
  assert(::caffe::ResizeParameter_Pad_mode_IsValid(value));
  set_has_pad_mode();
  pad_mode_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.pad_mode)
}

// repeated float pad_value = 6;
inline int ResizeParameter::pad_value_size() const {
  return pad_value_.size();
}
inline void ResizeParameter::clear_pad_value() {
  pad_value_.Clear();
}
inline float ResizeParameter::pad_value(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.pad_value)
  return pad_value_.Get(index);
}
inline void ResizeParameter::set_pad_value(int index, float value) {
  pad_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.pad_value)
}
inline void ResizeParameter::add_pad_value(float value) {
  pad_value_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ResizeParameter.pad_value)
}
inline const ::google::protobuf::RepeatedField< float >&
ResizeParameter::pad_value() const {
  // @@protoc_insertion_point(field_list:caffe.ResizeParameter.pad_value)
  return pad_value_;
}
inline ::google::protobuf::RepeatedField< float >*
ResizeParameter::mutable_pad_value() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ResizeParameter.pad_value)
  return &pad_value_;
}

// repeated .caffe.ResizeParameter.Interp_mode interp_mode = 7;
inline int ResizeParameter::interp_mode_size() const {
  return interp_mode_.size();
}
inline void ResizeParameter::clear_interp_mode() {
  interp_mode_.Clear();
}
inline ::caffe::ResizeParameter_Interp_mode ResizeParameter::interp_mode(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.interp_mode)
  return static_cast< ::caffe::ResizeParameter_Interp_mode >(interp_mode_.Get(index));
}
inline void ResizeParameter::set_interp_mode(int index, ::caffe::ResizeParameter_Interp_mode value) {
  assert(::caffe::ResizeParameter_Interp_mode_IsValid(value));
  interp_mode_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.interp_mode)
}
inline void ResizeParameter::add_interp_mode(::caffe::ResizeParameter_Interp_mode value) {
  assert(::caffe::ResizeParameter_Interp_mode_IsValid(value));
  interp_mode_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ResizeParameter.interp_mode)
}
inline const ::google::protobuf::RepeatedField<int>&
ResizeParameter::interp_mode() const {
  // @@protoc_insertion_point(field_list:caffe.ResizeParameter.interp_mode)
  return interp_mode_;
}
inline ::google::protobuf::RepeatedField<int>*
ResizeParameter::mutable_interp_mode() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ResizeParameter.interp_mode)
  return &interp_mode_;
}

// -------------------------------------------------------------------

// SaltPepperParameter

// optional float fraction = 1 [default = 0];
inline bool SaltPepperParameter::has_fraction() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SaltPepperParameter::set_has_fraction() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SaltPepperParameter::clear_has_fraction() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SaltPepperParameter::clear_fraction() {
  fraction_ = 0;
  clear_has_fraction();
}
inline float SaltPepperParameter::fraction() const {
  // @@protoc_insertion_point(field_get:caffe.SaltPepperParameter.fraction)
  return fraction_;
}
inline void SaltPepperParameter::set_fraction(float value) {
  set_has_fraction();
  fraction_ = value;
  // @@protoc_insertion_point(field_set:caffe.SaltPepperParameter.fraction)
}

// repeated float value = 2;
inline int SaltPepperParameter::value_size() const {
  return value_.size();
}
inline void SaltPepperParameter::clear_value() {
  value_.Clear();
}
inline float SaltPepperParameter::value(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SaltPepperParameter.value)
  return value_.Get(index);
}
inline void SaltPepperParameter::set_value(int index, float value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SaltPepperParameter.value)
}
inline void SaltPepperParameter::add_value(float value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SaltPepperParameter.value)
}
inline const ::google::protobuf::RepeatedField< float >&
SaltPepperParameter::value() const {
  // @@protoc_insertion_point(field_list:caffe.SaltPepperParameter.value)
  return value_;
}
inline ::google::protobuf::RepeatedField< float >*
SaltPepperParameter::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SaltPepperParameter.value)
  return &value_;
}

// -------------------------------------------------------------------

// NoiseParameter

// optional float prob = 1 [default = 0];
inline bool NoiseParameter::has_prob() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NoiseParameter::set_has_prob() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NoiseParameter::clear_has_prob() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NoiseParameter::clear_prob() {
  prob_ = 0;
  clear_has_prob();
}
inline float NoiseParameter::prob() const {
  // @@protoc_insertion_point(field_get:caffe.NoiseParameter.prob)
  return prob_;
}
inline void NoiseParameter::set_prob(float value) {
  set_has_prob();
  prob_ = value;
  // @@protoc_insertion_point(field_set:caffe.NoiseParameter.prob)
}

// optional bool hist_eq = 2 [default = false];
inline bool NoiseParameter::has_hist_eq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NoiseParameter::set_has_hist_eq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NoiseParameter::clear_has_hist_eq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NoiseParameter::clear_hist_eq() {
  hist_eq_ = false;
  clear_has_hist_eq();
}
inline bool NoiseParameter::hist_eq() const {
  // @@protoc_insertion_point(field_get:caffe.NoiseParameter.hist_eq)
  return hist_eq_;
}
inline void NoiseParameter::set_hist_eq(bool value) {
  set_has_hist_eq();
  hist_eq_ = value;
  // @@protoc_insertion_point(field_set:caffe.NoiseParameter.hist_eq)
}

// optional bool inverse = 3 [default = false];
inline bool NoiseParameter::has_inverse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NoiseParameter::set_has_inverse() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NoiseParameter::clear_has_inverse() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NoiseParameter::clear_inverse() {
  inverse_ = false;
  clear_has_inverse();
}
inline bool NoiseParameter::inverse() const {
  // @@protoc_insertion_point(field_get:caffe.NoiseParameter.inverse)
  return inverse_;
}
inline void NoiseParameter::set_inverse(bool value) {
  set_has_inverse();
  inverse_ = value;
  // @@protoc_insertion_point(field_set:caffe.NoiseParameter.inverse)
}

// optional bool decolorize = 4 [default = false];
inline bool NoiseParameter::has_decolorize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NoiseParameter::set_has_decolorize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NoiseParameter::clear_has_decolorize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NoiseParameter::clear_decolorize() {
  decolorize_ = false;
  clear_has_decolorize();
}
inline bool NoiseParameter::decolorize() const {
  // @@protoc_insertion_point(field_get:caffe.NoiseParameter.decolorize)
  return decolorize_;
}
inline void NoiseParameter::set_decolorize(bool value) {
  set_has_decolorize();
  decolorize_ = value;
  // @@protoc_insertion_point(field_set:caffe.NoiseParameter.decolorize)
}

// optional bool gauss_blur = 5 [default = false];
inline bool NoiseParameter::has_gauss_blur() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NoiseParameter::set_has_gauss_blur() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NoiseParameter::clear_has_gauss_blur() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NoiseParameter::clear_gauss_blur() {
  gauss_blur_ = false;
  clear_has_gauss_blur();
}
inline bool NoiseParameter::gauss_blur() const {
  // @@protoc_insertion_point(field_get:caffe.NoiseParameter.gauss_blur)
  return gauss_blur_;
}
inline void NoiseParameter::set_gauss_blur(bool value) {
  set_has_gauss_blur();
  gauss_blur_ = value;
  // @@protoc_insertion_point(field_set:caffe.NoiseParameter.gauss_blur)
}

// optional float jpeg = 6 [default = -1];
inline bool NoiseParameter::has_jpeg() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NoiseParameter::set_has_jpeg() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NoiseParameter::clear_has_jpeg() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NoiseParameter::clear_jpeg() {
  jpeg_ = -1;
  clear_has_jpeg();
}
inline float NoiseParameter::jpeg() const {
  // @@protoc_insertion_point(field_get:caffe.NoiseParameter.jpeg)
  return jpeg_;
}
inline void NoiseParameter::set_jpeg(float value) {
  set_has_jpeg();
  jpeg_ = value;
  // @@protoc_insertion_point(field_set:caffe.NoiseParameter.jpeg)
}

// optional bool posterize = 7 [default = false];
inline bool NoiseParameter::has_posterize() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NoiseParameter::set_has_posterize() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NoiseParameter::clear_has_posterize() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NoiseParameter::clear_posterize() {
  posterize_ = false;
  clear_has_posterize();
}
inline bool NoiseParameter::posterize() const {
  // @@protoc_insertion_point(field_get:caffe.NoiseParameter.posterize)
  return posterize_;
}
inline void NoiseParameter::set_posterize(bool value) {
  set_has_posterize();
  posterize_ = value;
  // @@protoc_insertion_point(field_set:caffe.NoiseParameter.posterize)
}

// optional bool erode = 8 [default = false];
inline bool NoiseParameter::has_erode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NoiseParameter::set_has_erode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NoiseParameter::clear_has_erode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NoiseParameter::clear_erode() {
  erode_ = false;
  clear_has_erode();
}
inline bool NoiseParameter::erode() const {
  // @@protoc_insertion_point(field_get:caffe.NoiseParameter.erode)
  return erode_;
}
inline void NoiseParameter::set_erode(bool value) {
  set_has_erode();
  erode_ = value;
  // @@protoc_insertion_point(field_set:caffe.NoiseParameter.erode)
}

// optional bool saltpepper = 9 [default = false];
inline bool NoiseParameter::has_saltpepper() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NoiseParameter::set_has_saltpepper() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NoiseParameter::clear_has_saltpepper() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NoiseParameter::clear_saltpepper() {
  saltpepper_ = false;
  clear_has_saltpepper();
}
inline bool NoiseParameter::saltpepper() const {
  // @@protoc_insertion_point(field_get:caffe.NoiseParameter.saltpepper)
  return saltpepper_;
}
inline void NoiseParameter::set_saltpepper(bool value) {
  set_has_saltpepper();
  saltpepper_ = value;
  // @@protoc_insertion_point(field_set:caffe.NoiseParameter.saltpepper)
}

// optional .caffe.SaltPepperParameter saltpepper_param = 10;
inline bool NoiseParameter::has_saltpepper_param() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NoiseParameter::set_has_saltpepper_param() {
  _has_bits_[0] |= 0x00000200u;
}
inline void NoiseParameter::clear_has_saltpepper_param() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void NoiseParameter::clear_saltpepper_param() {
  if (saltpepper_param_ != NULL) saltpepper_param_->::caffe::SaltPepperParameter::Clear();
  clear_has_saltpepper_param();
}
inline const ::caffe::SaltPepperParameter& NoiseParameter::saltpepper_param() const {
  // @@protoc_insertion_point(field_get:caffe.NoiseParameter.saltpepper_param)
  return saltpepper_param_ != NULL ? *saltpepper_param_ : *default_instance_->saltpepper_param_;
}
inline ::caffe::SaltPepperParameter* NoiseParameter::mutable_saltpepper_param() {
  set_has_saltpepper_param();
  if (saltpepper_param_ == NULL) saltpepper_param_ = new ::caffe::SaltPepperParameter;
  // @@protoc_insertion_point(field_mutable:caffe.NoiseParameter.saltpepper_param)
  return saltpepper_param_;
}
inline ::caffe::SaltPepperParameter* NoiseParameter::release_saltpepper_param() {
  clear_has_saltpepper_param();
  ::caffe::SaltPepperParameter* temp = saltpepper_param_;
  saltpepper_param_ = NULL;
  return temp;
}
inline void NoiseParameter::set_allocated_saltpepper_param(::caffe::SaltPepperParameter* saltpepper_param) {
  delete saltpepper_param_;
  saltpepper_param_ = saltpepper_param;
  if (saltpepper_param) {
    set_has_saltpepper_param();
  } else {
    clear_has_saltpepper_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.NoiseParameter.saltpepper_param)
}

// optional bool clahe = 11 [default = false];
inline bool NoiseParameter::has_clahe() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void NoiseParameter::set_has_clahe() {
  _has_bits_[0] |= 0x00000400u;
}
inline void NoiseParameter::clear_has_clahe() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void NoiseParameter::clear_clahe() {
  clahe_ = false;
  clear_has_clahe();
}
inline bool NoiseParameter::clahe() const {
  // @@protoc_insertion_point(field_get:caffe.NoiseParameter.clahe)
  return clahe_;
}
inline void NoiseParameter::set_clahe(bool value) {
  set_has_clahe();
  clahe_ = value;
  // @@protoc_insertion_point(field_set:caffe.NoiseParameter.clahe)
}

// optional bool convert_to_hsv = 12 [default = false];
inline bool NoiseParameter::has_convert_to_hsv() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void NoiseParameter::set_has_convert_to_hsv() {
  _has_bits_[0] |= 0x00000800u;
}
inline void NoiseParameter::clear_has_convert_to_hsv() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void NoiseParameter::clear_convert_to_hsv() {
  convert_to_hsv_ = false;
  clear_has_convert_to_hsv();
}
inline bool NoiseParameter::convert_to_hsv() const {
  // @@protoc_insertion_point(field_get:caffe.NoiseParameter.convert_to_hsv)
  return convert_to_hsv_;
}
inline void NoiseParameter::set_convert_to_hsv(bool value) {
  set_has_convert_to_hsv();
  convert_to_hsv_ = value;
  // @@protoc_insertion_point(field_set:caffe.NoiseParameter.convert_to_hsv)
}

// optional bool convert_to_lab = 13 [default = false];
inline bool NoiseParameter::has_convert_to_lab() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void NoiseParameter::set_has_convert_to_lab() {
  _has_bits_[0] |= 0x00001000u;
}
inline void NoiseParameter::clear_has_convert_to_lab() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void NoiseParameter::clear_convert_to_lab() {
  convert_to_lab_ = false;
  clear_has_convert_to_lab();
}
inline bool NoiseParameter::convert_to_lab() const {
  // @@protoc_insertion_point(field_get:caffe.NoiseParameter.convert_to_lab)
  return convert_to_lab_;
}
inline void NoiseParameter::set_convert_to_lab(bool value) {
  set_has_convert_to_lab();
  convert_to_lab_ = value;
  // @@protoc_insertion_point(field_set:caffe.NoiseParameter.convert_to_lab)
}

// -------------------------------------------------------------------

// DistortionParameter

// optional float brightness_prob = 1 [default = 0];
inline bool DistortionParameter::has_brightness_prob() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DistortionParameter::set_has_brightness_prob() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DistortionParameter::clear_has_brightness_prob() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DistortionParameter::clear_brightness_prob() {
  brightness_prob_ = 0;
  clear_has_brightness_prob();
}
inline float DistortionParameter::brightness_prob() const {
  // @@protoc_insertion_point(field_get:caffe.DistortionParameter.brightness_prob)
  return brightness_prob_;
}
inline void DistortionParameter::set_brightness_prob(float value) {
  set_has_brightness_prob();
  brightness_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe.DistortionParameter.brightness_prob)
}

// optional float brightness_delta = 2 [default = 0];
inline bool DistortionParameter::has_brightness_delta() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DistortionParameter::set_has_brightness_delta() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DistortionParameter::clear_has_brightness_delta() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DistortionParameter::clear_brightness_delta() {
  brightness_delta_ = 0;
  clear_has_brightness_delta();
}
inline float DistortionParameter::brightness_delta() const {
  // @@protoc_insertion_point(field_get:caffe.DistortionParameter.brightness_delta)
  return brightness_delta_;
}
inline void DistortionParameter::set_brightness_delta(float value) {
  set_has_brightness_delta();
  brightness_delta_ = value;
  // @@protoc_insertion_point(field_set:caffe.DistortionParameter.brightness_delta)
}

// optional float contrast_prob = 3 [default = 0];
inline bool DistortionParameter::has_contrast_prob() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DistortionParameter::set_has_contrast_prob() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DistortionParameter::clear_has_contrast_prob() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DistortionParameter::clear_contrast_prob() {
  contrast_prob_ = 0;
  clear_has_contrast_prob();
}
inline float DistortionParameter::contrast_prob() const {
  // @@protoc_insertion_point(field_get:caffe.DistortionParameter.contrast_prob)
  return contrast_prob_;
}
inline void DistortionParameter::set_contrast_prob(float value) {
  set_has_contrast_prob();
  contrast_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe.DistortionParameter.contrast_prob)
}

// optional float contrast_lower = 4 [default = 0];
inline bool DistortionParameter::has_contrast_lower() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DistortionParameter::set_has_contrast_lower() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DistortionParameter::clear_has_contrast_lower() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DistortionParameter::clear_contrast_lower() {
  contrast_lower_ = 0;
  clear_has_contrast_lower();
}
inline float DistortionParameter::contrast_lower() const {
  // @@protoc_insertion_point(field_get:caffe.DistortionParameter.contrast_lower)
  return contrast_lower_;
}
inline void DistortionParameter::set_contrast_lower(float value) {
  set_has_contrast_lower();
  contrast_lower_ = value;
  // @@protoc_insertion_point(field_set:caffe.DistortionParameter.contrast_lower)
}

// optional float contrast_upper = 5 [default = 0];
inline bool DistortionParameter::has_contrast_upper() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DistortionParameter::set_has_contrast_upper() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DistortionParameter::clear_has_contrast_upper() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DistortionParameter::clear_contrast_upper() {
  contrast_upper_ = 0;
  clear_has_contrast_upper();
}
inline float DistortionParameter::contrast_upper() const {
  // @@protoc_insertion_point(field_get:caffe.DistortionParameter.contrast_upper)
  return contrast_upper_;
}
inline void DistortionParameter::set_contrast_upper(float value) {
  set_has_contrast_upper();
  contrast_upper_ = value;
  // @@protoc_insertion_point(field_set:caffe.DistortionParameter.contrast_upper)
}

// optional float hue_prob = 6 [default = 0];
inline bool DistortionParameter::has_hue_prob() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DistortionParameter::set_has_hue_prob() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DistortionParameter::clear_has_hue_prob() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DistortionParameter::clear_hue_prob() {
  hue_prob_ = 0;
  clear_has_hue_prob();
}
inline float DistortionParameter::hue_prob() const {
  // @@protoc_insertion_point(field_get:caffe.DistortionParameter.hue_prob)
  return hue_prob_;
}
inline void DistortionParameter::set_hue_prob(float value) {
  set_has_hue_prob();
  hue_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe.DistortionParameter.hue_prob)
}

// optional float hue_delta = 7 [default = 0];
inline bool DistortionParameter::has_hue_delta() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DistortionParameter::set_has_hue_delta() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DistortionParameter::clear_has_hue_delta() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DistortionParameter::clear_hue_delta() {
  hue_delta_ = 0;
  clear_has_hue_delta();
}
inline float DistortionParameter::hue_delta() const {
  // @@protoc_insertion_point(field_get:caffe.DistortionParameter.hue_delta)
  return hue_delta_;
}
inline void DistortionParameter::set_hue_delta(float value) {
  set_has_hue_delta();
  hue_delta_ = value;
  // @@protoc_insertion_point(field_set:caffe.DistortionParameter.hue_delta)
}

// optional float saturation_prob = 8 [default = 0];
inline bool DistortionParameter::has_saturation_prob() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DistortionParameter::set_has_saturation_prob() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DistortionParameter::clear_has_saturation_prob() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DistortionParameter::clear_saturation_prob() {
  saturation_prob_ = 0;
  clear_has_saturation_prob();
}
inline float DistortionParameter::saturation_prob() const {
  // @@protoc_insertion_point(field_get:caffe.DistortionParameter.saturation_prob)
  return saturation_prob_;
}
inline void DistortionParameter::set_saturation_prob(float value) {
  set_has_saturation_prob();
  saturation_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe.DistortionParameter.saturation_prob)
}

// optional float saturation_lower = 9 [default = 0];
inline bool DistortionParameter::has_saturation_lower() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DistortionParameter::set_has_saturation_lower() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DistortionParameter::clear_has_saturation_lower() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DistortionParameter::clear_saturation_lower() {
  saturation_lower_ = 0;
  clear_has_saturation_lower();
}
inline float DistortionParameter::saturation_lower() const {
  // @@protoc_insertion_point(field_get:caffe.DistortionParameter.saturation_lower)
  return saturation_lower_;
}
inline void DistortionParameter::set_saturation_lower(float value) {
  set_has_saturation_lower();
  saturation_lower_ = value;
  // @@protoc_insertion_point(field_set:caffe.DistortionParameter.saturation_lower)
}

// optional float saturation_upper = 10 [default = 0];
inline bool DistortionParameter::has_saturation_upper() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DistortionParameter::set_has_saturation_upper() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DistortionParameter::clear_has_saturation_upper() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DistortionParameter::clear_saturation_upper() {
  saturation_upper_ = 0;
  clear_has_saturation_upper();
}
inline float DistortionParameter::saturation_upper() const {
  // @@protoc_insertion_point(field_get:caffe.DistortionParameter.saturation_upper)
  return saturation_upper_;
}
inline void DistortionParameter::set_saturation_upper(float value) {
  set_has_saturation_upper();
  saturation_upper_ = value;
  // @@protoc_insertion_point(field_set:caffe.DistortionParameter.saturation_upper)
}

// optional float random_order_prob = 11 [default = 0];
inline bool DistortionParameter::has_random_order_prob() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DistortionParameter::set_has_random_order_prob() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DistortionParameter::clear_has_random_order_prob() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DistortionParameter::clear_random_order_prob() {
  random_order_prob_ = 0;
  clear_has_random_order_prob();
}
inline float DistortionParameter::random_order_prob() const {
  // @@protoc_insertion_point(field_get:caffe.DistortionParameter.random_order_prob)
  return random_order_prob_;
}
inline void DistortionParameter::set_random_order_prob(float value) {
  set_has_random_order_prob();
  random_order_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe.DistortionParameter.random_order_prob)
}

// -------------------------------------------------------------------

// ExpansionParameter

// optional float prob = 1 [default = 1];
inline bool ExpansionParameter::has_prob() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExpansionParameter::set_has_prob() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExpansionParameter::clear_has_prob() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExpansionParameter::clear_prob() {
  prob_ = 1;
  clear_has_prob();
}
inline float ExpansionParameter::prob() const {
  // @@protoc_insertion_point(field_get:caffe.ExpansionParameter.prob)
  return prob_;
}
inline void ExpansionParameter::set_prob(float value) {
  set_has_prob();
  prob_ = value;
  // @@protoc_insertion_point(field_set:caffe.ExpansionParameter.prob)
}

// optional float max_expand_ratio = 2 [default = 1];
inline bool ExpansionParameter::has_max_expand_ratio() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExpansionParameter::set_has_max_expand_ratio() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExpansionParameter::clear_has_max_expand_ratio() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExpansionParameter::clear_max_expand_ratio() {
  max_expand_ratio_ = 1;
  clear_has_max_expand_ratio();
}
inline float ExpansionParameter::max_expand_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.ExpansionParameter.max_expand_ratio)
  return max_expand_ratio_;
}
inline void ExpansionParameter::set_max_expand_ratio(float value) {
  set_has_max_expand_ratio();
  max_expand_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.ExpansionParameter.max_expand_ratio)
}

// -------------------------------------------------------------------

// DetectNetGroundTruthParameter_ClassMapping

// required uint32 src = 1;
inline bool DetectNetGroundTruthParameter_ClassMapping::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DetectNetGroundTruthParameter_ClassMapping::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DetectNetGroundTruthParameter_ClassMapping::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DetectNetGroundTruthParameter_ClassMapping::clear_src() {
  src_ = 0u;
  clear_has_src();
}
inline ::google::protobuf::uint32 DetectNetGroundTruthParameter_ClassMapping::src() const {
  // @@protoc_insertion_point(field_get:caffe.DetectNetGroundTruthParameter.ClassMapping.src)
  return src_;
}
inline void DetectNetGroundTruthParameter_ClassMapping::set_src(::google::protobuf::uint32 value) {
  set_has_src();
  src_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectNetGroundTruthParameter.ClassMapping.src)
}

// required uint32 dst = 2;
inline bool DetectNetGroundTruthParameter_ClassMapping::has_dst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DetectNetGroundTruthParameter_ClassMapping::set_has_dst() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DetectNetGroundTruthParameter_ClassMapping::clear_has_dst() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DetectNetGroundTruthParameter_ClassMapping::clear_dst() {
  dst_ = 0u;
  clear_has_dst();
}
inline ::google::protobuf::uint32 DetectNetGroundTruthParameter_ClassMapping::dst() const {
  // @@protoc_insertion_point(field_get:caffe.DetectNetGroundTruthParameter.ClassMapping.dst)
  return dst_;
}
inline void DetectNetGroundTruthParameter_ClassMapping::set_dst(::google::protobuf::uint32 value) {
  set_has_dst();
  dst_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectNetGroundTruthParameter.ClassMapping.dst)
}

// -------------------------------------------------------------------

// DetectNetGroundTruthParameter

// optional uint32 stride = 1 [default = 4];
inline bool DetectNetGroundTruthParameter::has_stride() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DetectNetGroundTruthParameter::set_has_stride() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DetectNetGroundTruthParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DetectNetGroundTruthParameter::clear_stride() {
  stride_ = 4u;
  clear_has_stride();
}
inline ::google::protobuf::uint32 DetectNetGroundTruthParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.DetectNetGroundTruthParameter.stride)
  return stride_;
}
inline void DetectNetGroundTruthParameter::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectNetGroundTruthParameter.stride)
}

// optional float scale_cvg = 2 [default = 0.5];
inline bool DetectNetGroundTruthParameter::has_scale_cvg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DetectNetGroundTruthParameter::set_has_scale_cvg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DetectNetGroundTruthParameter::clear_has_scale_cvg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DetectNetGroundTruthParameter::clear_scale_cvg() {
  scale_cvg_ = 0.5f;
  clear_has_scale_cvg();
}
inline float DetectNetGroundTruthParameter::scale_cvg() const {
  // @@protoc_insertion_point(field_get:caffe.DetectNetGroundTruthParameter.scale_cvg)
  return scale_cvg_;
}
inline void DetectNetGroundTruthParameter::set_scale_cvg(float value) {
  set_has_scale_cvg();
  scale_cvg_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectNetGroundTruthParameter.scale_cvg)
}

// optional .caffe.DetectNetGroundTruthParameter.GridboxType gridbox_type = 3 [default = GRIDBOX_MAX];
inline bool DetectNetGroundTruthParameter::has_gridbox_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DetectNetGroundTruthParameter::set_has_gridbox_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DetectNetGroundTruthParameter::clear_has_gridbox_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DetectNetGroundTruthParameter::clear_gridbox_type() {
  gridbox_type_ = 0;
  clear_has_gridbox_type();
}
inline ::caffe::DetectNetGroundTruthParameter_GridboxType DetectNetGroundTruthParameter::gridbox_type() const {
  // @@protoc_insertion_point(field_get:caffe.DetectNetGroundTruthParameter.gridbox_type)
  return static_cast< ::caffe::DetectNetGroundTruthParameter_GridboxType >(gridbox_type_);
}
inline void DetectNetGroundTruthParameter::set_gridbox_type(::caffe::DetectNetGroundTruthParameter_GridboxType value) {
  assert(::caffe::DetectNetGroundTruthParameter_GridboxType_IsValid(value));
  set_has_gridbox_type();
  gridbox_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectNetGroundTruthParameter.gridbox_type)
}

// optional uint32 max_cvg_len = 4 [default = 50];
inline bool DetectNetGroundTruthParameter::has_max_cvg_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DetectNetGroundTruthParameter::set_has_max_cvg_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DetectNetGroundTruthParameter::clear_has_max_cvg_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DetectNetGroundTruthParameter::clear_max_cvg_len() {
  max_cvg_len_ = 50u;
  clear_has_max_cvg_len();
}
inline ::google::protobuf::uint32 DetectNetGroundTruthParameter::max_cvg_len() const {
  // @@protoc_insertion_point(field_get:caffe.DetectNetGroundTruthParameter.max_cvg_len)
  return max_cvg_len_;
}
inline void DetectNetGroundTruthParameter::set_max_cvg_len(::google::protobuf::uint32 value) {
  set_has_max_cvg_len();
  max_cvg_len_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectNetGroundTruthParameter.max_cvg_len)
}

// optional uint32 min_cvg_len = 5 [default = 50];
inline bool DetectNetGroundTruthParameter::has_min_cvg_len() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DetectNetGroundTruthParameter::set_has_min_cvg_len() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DetectNetGroundTruthParameter::clear_has_min_cvg_len() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DetectNetGroundTruthParameter::clear_min_cvg_len() {
  min_cvg_len_ = 50u;
  clear_has_min_cvg_len();
}
inline ::google::protobuf::uint32 DetectNetGroundTruthParameter::min_cvg_len() const {
  // @@protoc_insertion_point(field_get:caffe.DetectNetGroundTruthParameter.min_cvg_len)
  return min_cvg_len_;
}
inline void DetectNetGroundTruthParameter::set_min_cvg_len(::google::protobuf::uint32 value) {
  set_has_min_cvg_len();
  min_cvg_len_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectNetGroundTruthParameter.min_cvg_len)
}

// optional .caffe.DetectNetGroundTruthParameter.CoverageType coverage_type = 7 [default = RECTANGULAR];
inline bool DetectNetGroundTruthParameter::has_coverage_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DetectNetGroundTruthParameter::set_has_coverage_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DetectNetGroundTruthParameter::clear_has_coverage_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DetectNetGroundTruthParameter::clear_coverage_type() {
  coverage_type_ = 0;
  clear_has_coverage_type();
}
inline ::caffe::DetectNetGroundTruthParameter_CoverageType DetectNetGroundTruthParameter::coverage_type() const {
  // @@protoc_insertion_point(field_get:caffe.DetectNetGroundTruthParameter.coverage_type)
  return static_cast< ::caffe::DetectNetGroundTruthParameter_CoverageType >(coverage_type_);
}
inline void DetectNetGroundTruthParameter::set_coverage_type(::caffe::DetectNetGroundTruthParameter_CoverageType value) {
  assert(::caffe::DetectNetGroundTruthParameter_CoverageType_IsValid(value));
  set_has_coverage_type();
  coverage_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectNetGroundTruthParameter.coverage_type)
}

// optional uint32 image_size_x = 8 [default = 1248];
inline bool DetectNetGroundTruthParameter::has_image_size_x() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DetectNetGroundTruthParameter::set_has_image_size_x() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DetectNetGroundTruthParameter::clear_has_image_size_x() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DetectNetGroundTruthParameter::clear_image_size_x() {
  image_size_x_ = 1248u;
  clear_has_image_size_x();
}
inline ::google::protobuf::uint32 DetectNetGroundTruthParameter::image_size_x() const {
  // @@protoc_insertion_point(field_get:caffe.DetectNetGroundTruthParameter.image_size_x)
  return image_size_x_;
}
inline void DetectNetGroundTruthParameter::set_image_size_x(::google::protobuf::uint32 value) {
  set_has_image_size_x();
  image_size_x_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectNetGroundTruthParameter.image_size_x)
}

// optional uint32 image_size_y = 9 [default = 384];
inline bool DetectNetGroundTruthParameter::has_image_size_y() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DetectNetGroundTruthParameter::set_has_image_size_y() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DetectNetGroundTruthParameter::clear_has_image_size_y() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DetectNetGroundTruthParameter::clear_image_size_y() {
  image_size_y_ = 384u;
  clear_has_image_size_y();
}
inline ::google::protobuf::uint32 DetectNetGroundTruthParameter::image_size_y() const {
  // @@protoc_insertion_point(field_get:caffe.DetectNetGroundTruthParameter.image_size_y)
  return image_size_y_;
}
inline void DetectNetGroundTruthParameter::set_image_size_y(::google::protobuf::uint32 value) {
  set_has_image_size_y();
  image_size_y_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectNetGroundTruthParameter.image_size_y)
}

// optional bool obj_norm = 11 [default = false];
inline bool DetectNetGroundTruthParameter::has_obj_norm() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DetectNetGroundTruthParameter::set_has_obj_norm() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DetectNetGroundTruthParameter::clear_has_obj_norm() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DetectNetGroundTruthParameter::clear_obj_norm() {
  obj_norm_ = false;
  clear_has_obj_norm();
}
inline bool DetectNetGroundTruthParameter::obj_norm() const {
  // @@protoc_insertion_point(field_get:caffe.DetectNetGroundTruthParameter.obj_norm)
  return obj_norm_;
}
inline void DetectNetGroundTruthParameter::set_obj_norm(bool value) {
  set_has_obj_norm();
  obj_norm_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectNetGroundTruthParameter.obj_norm)
}

// optional bool crop_bboxes = 12 [default = true];
inline bool DetectNetGroundTruthParameter::has_crop_bboxes() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DetectNetGroundTruthParameter::set_has_crop_bboxes() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DetectNetGroundTruthParameter::clear_has_crop_bboxes() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DetectNetGroundTruthParameter::clear_crop_bboxes() {
  crop_bboxes_ = true;
  clear_has_crop_bboxes();
}
inline bool DetectNetGroundTruthParameter::crop_bboxes() const {
  // @@protoc_insertion_point(field_get:caffe.DetectNetGroundTruthParameter.crop_bboxes)
  return crop_bboxes_;
}
inline void DetectNetGroundTruthParameter::set_crop_bboxes(bool value) {
  set_has_crop_bboxes();
  crop_bboxes_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectNetGroundTruthParameter.crop_bboxes)
}

// repeated .caffe.DetectNetGroundTruthParameter.ClassMapping object_class = 13;
inline int DetectNetGroundTruthParameter::object_class_size() const {
  return object_class_.size();
}
inline void DetectNetGroundTruthParameter::clear_object_class() {
  object_class_.Clear();
}
inline const ::caffe::DetectNetGroundTruthParameter_ClassMapping& DetectNetGroundTruthParameter::object_class(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectNetGroundTruthParameter.object_class)
  return object_class_.Get(index);
}
inline ::caffe::DetectNetGroundTruthParameter_ClassMapping* DetectNetGroundTruthParameter::mutable_object_class(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.DetectNetGroundTruthParameter.object_class)
  return object_class_.Mutable(index);
}
inline ::caffe::DetectNetGroundTruthParameter_ClassMapping* DetectNetGroundTruthParameter::add_object_class() {
  // @@protoc_insertion_point(field_add:caffe.DetectNetGroundTruthParameter.object_class)
  return object_class_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::DetectNetGroundTruthParameter_ClassMapping >&
DetectNetGroundTruthParameter::object_class() const {
  // @@protoc_insertion_point(field_list:caffe.DetectNetGroundTruthParameter.object_class)
  return object_class_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::DetectNetGroundTruthParameter_ClassMapping >*
DetectNetGroundTruthParameter::mutable_object_class() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectNetGroundTruthParameter.object_class)
  return &object_class_;
}

// -------------------------------------------------------------------

// DetectNetAugmentationParameter

// optional float crop_prob = 1 [default = 1];
inline bool DetectNetAugmentationParameter::has_crop_prob() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DetectNetAugmentationParameter::set_has_crop_prob() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DetectNetAugmentationParameter::clear_has_crop_prob() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DetectNetAugmentationParameter::clear_crop_prob() {
  crop_prob_ = 1;
  clear_has_crop_prob();
}
inline float DetectNetAugmentationParameter::crop_prob() const {
  // @@protoc_insertion_point(field_get:caffe.DetectNetAugmentationParameter.crop_prob)
  return crop_prob_;
}
inline void DetectNetAugmentationParameter::set_crop_prob(float value) {
  set_has_crop_prob();
  crop_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectNetAugmentationParameter.crop_prob)
}

// optional uint32 shift_x = 2 [default = 0];
inline bool DetectNetAugmentationParameter::has_shift_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DetectNetAugmentationParameter::set_has_shift_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DetectNetAugmentationParameter::clear_has_shift_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DetectNetAugmentationParameter::clear_shift_x() {
  shift_x_ = 0u;
  clear_has_shift_x();
}
inline ::google::protobuf::uint32 DetectNetAugmentationParameter::shift_x() const {
  // @@protoc_insertion_point(field_get:caffe.DetectNetAugmentationParameter.shift_x)
  return shift_x_;
}
inline void DetectNetAugmentationParameter::set_shift_x(::google::protobuf::uint32 value) {
  set_has_shift_x();
  shift_x_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectNetAugmentationParameter.shift_x)
}

// optional uint32 shift_y = 3 [default = 0];
inline bool DetectNetAugmentationParameter::has_shift_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DetectNetAugmentationParameter::set_has_shift_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DetectNetAugmentationParameter::clear_has_shift_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DetectNetAugmentationParameter::clear_shift_y() {
  shift_y_ = 0u;
  clear_has_shift_y();
}
inline ::google::protobuf::uint32 DetectNetAugmentationParameter::shift_y() const {
  // @@protoc_insertion_point(field_get:caffe.DetectNetAugmentationParameter.shift_y)
  return shift_y_;
}
inline void DetectNetAugmentationParameter::set_shift_y(::google::protobuf::uint32 value) {
  set_has_shift_y();
  shift_y_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectNetAugmentationParameter.shift_y)
}

// optional float scale_prob = 4 [default = 0.33];
inline bool DetectNetAugmentationParameter::has_scale_prob() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DetectNetAugmentationParameter::set_has_scale_prob() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DetectNetAugmentationParameter::clear_has_scale_prob() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DetectNetAugmentationParameter::clear_scale_prob() {
  scale_prob_ = 0.33f;
  clear_has_scale_prob();
}
inline float DetectNetAugmentationParameter::scale_prob() const {
  // @@protoc_insertion_point(field_get:caffe.DetectNetAugmentationParameter.scale_prob)
  return scale_prob_;
}
inline void DetectNetAugmentationParameter::set_scale_prob(float value) {
  set_has_scale_prob();
  scale_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectNetAugmentationParameter.scale_prob)
}

// optional float scale_min = 5 [default = 0.7];
inline bool DetectNetAugmentationParameter::has_scale_min() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DetectNetAugmentationParameter::set_has_scale_min() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DetectNetAugmentationParameter::clear_has_scale_min() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DetectNetAugmentationParameter::clear_scale_min() {
  scale_min_ = 0.7f;
  clear_has_scale_min();
}
inline float DetectNetAugmentationParameter::scale_min() const {
  // @@protoc_insertion_point(field_get:caffe.DetectNetAugmentationParameter.scale_min)
  return scale_min_;
}
inline void DetectNetAugmentationParameter::set_scale_min(float value) {
  set_has_scale_min();
  scale_min_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectNetAugmentationParameter.scale_min)
}

// optional float scale_max = 6 [default = 1];
inline bool DetectNetAugmentationParameter::has_scale_max() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DetectNetAugmentationParameter::set_has_scale_max() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DetectNetAugmentationParameter::clear_has_scale_max() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DetectNetAugmentationParameter::clear_scale_max() {
  scale_max_ = 1;
  clear_has_scale_max();
}
inline float DetectNetAugmentationParameter::scale_max() const {
  // @@protoc_insertion_point(field_get:caffe.DetectNetAugmentationParameter.scale_max)
  return scale_max_;
}
inline void DetectNetAugmentationParameter::set_scale_max(float value) {
  set_has_scale_max();
  scale_max_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectNetAugmentationParameter.scale_max)
}

// optional float flip_prob = 7 [default = 0.33];
inline bool DetectNetAugmentationParameter::has_flip_prob() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DetectNetAugmentationParameter::set_has_flip_prob() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DetectNetAugmentationParameter::clear_has_flip_prob() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DetectNetAugmentationParameter::clear_flip_prob() {
  flip_prob_ = 0.33f;
  clear_has_flip_prob();
}
inline float DetectNetAugmentationParameter::flip_prob() const {
  // @@protoc_insertion_point(field_get:caffe.DetectNetAugmentationParameter.flip_prob)
  return flip_prob_;
}
inline void DetectNetAugmentationParameter::set_flip_prob(float value) {
  set_has_flip_prob();
  flip_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectNetAugmentationParameter.flip_prob)
}

// optional float rotation_prob = 8 [default = 0.33];
inline bool DetectNetAugmentationParameter::has_rotation_prob() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DetectNetAugmentationParameter::set_has_rotation_prob() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DetectNetAugmentationParameter::clear_has_rotation_prob() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DetectNetAugmentationParameter::clear_rotation_prob() {
  rotation_prob_ = 0.33f;
  clear_has_rotation_prob();
}
inline float DetectNetAugmentationParameter::rotation_prob() const {
  // @@protoc_insertion_point(field_get:caffe.DetectNetAugmentationParameter.rotation_prob)
  return rotation_prob_;
}
inline void DetectNetAugmentationParameter::set_rotation_prob(float value) {
  set_has_rotation_prob();
  rotation_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectNetAugmentationParameter.rotation_prob)
}

// optional float max_rotate_degree = 9 [default = 1];
inline bool DetectNetAugmentationParameter::has_max_rotate_degree() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DetectNetAugmentationParameter::set_has_max_rotate_degree() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DetectNetAugmentationParameter::clear_has_max_rotate_degree() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DetectNetAugmentationParameter::clear_max_rotate_degree() {
  max_rotate_degree_ = 1;
  clear_has_max_rotate_degree();
}
inline float DetectNetAugmentationParameter::max_rotate_degree() const {
  // @@protoc_insertion_point(field_get:caffe.DetectNetAugmentationParameter.max_rotate_degree)
  return max_rotate_degree_;
}
inline void DetectNetAugmentationParameter::set_max_rotate_degree(float value) {
  set_has_max_rotate_degree();
  max_rotate_degree_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectNetAugmentationParameter.max_rotate_degree)
}

// optional float hue_rotation_prob = 10 [default = 0.33];
inline bool DetectNetAugmentationParameter::has_hue_rotation_prob() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DetectNetAugmentationParameter::set_has_hue_rotation_prob() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DetectNetAugmentationParameter::clear_has_hue_rotation_prob() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DetectNetAugmentationParameter::clear_hue_rotation_prob() {
  hue_rotation_prob_ = 0.33f;
  clear_has_hue_rotation_prob();
}
inline float DetectNetAugmentationParameter::hue_rotation_prob() const {
  // @@protoc_insertion_point(field_get:caffe.DetectNetAugmentationParameter.hue_rotation_prob)
  return hue_rotation_prob_;
}
inline void DetectNetAugmentationParameter::set_hue_rotation_prob(float value) {
  set_has_hue_rotation_prob();
  hue_rotation_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectNetAugmentationParameter.hue_rotation_prob)
}

// optional float hue_rotation = 11 [default = 15];
inline bool DetectNetAugmentationParameter::has_hue_rotation() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DetectNetAugmentationParameter::set_has_hue_rotation() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DetectNetAugmentationParameter::clear_has_hue_rotation() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DetectNetAugmentationParameter::clear_hue_rotation() {
  hue_rotation_ = 15;
  clear_has_hue_rotation();
}
inline float DetectNetAugmentationParameter::hue_rotation() const {
  // @@protoc_insertion_point(field_get:caffe.DetectNetAugmentationParameter.hue_rotation)
  return hue_rotation_;
}
inline void DetectNetAugmentationParameter::set_hue_rotation(float value) {
  set_has_hue_rotation();
  hue_rotation_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectNetAugmentationParameter.hue_rotation)
}

// optional float desaturation_prob = 12 [default = 0.33];
inline bool DetectNetAugmentationParameter::has_desaturation_prob() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DetectNetAugmentationParameter::set_has_desaturation_prob() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DetectNetAugmentationParameter::clear_has_desaturation_prob() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DetectNetAugmentationParameter::clear_desaturation_prob() {
  desaturation_prob_ = 0.33f;
  clear_has_desaturation_prob();
}
inline float DetectNetAugmentationParameter::desaturation_prob() const {
  // @@protoc_insertion_point(field_get:caffe.DetectNetAugmentationParameter.desaturation_prob)
  return desaturation_prob_;
}
inline void DetectNetAugmentationParameter::set_desaturation_prob(float value) {
  set_has_desaturation_prob();
  desaturation_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectNetAugmentationParameter.desaturation_prob)
}

// optional float desaturation_max = 13 [default = 0.5];
inline bool DetectNetAugmentationParameter::has_desaturation_max() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DetectNetAugmentationParameter::set_has_desaturation_max() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DetectNetAugmentationParameter::clear_has_desaturation_max() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DetectNetAugmentationParameter::clear_desaturation_max() {
  desaturation_max_ = 0.5f;
  clear_has_desaturation_max();
}
inline float DetectNetAugmentationParameter::desaturation_max() const {
  // @@protoc_insertion_point(field_get:caffe.DetectNetAugmentationParameter.desaturation_max)
  return desaturation_max_;
}
inline void DetectNetAugmentationParameter::set_desaturation_max(float value) {
  set_has_desaturation_max();
  desaturation_max_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectNetAugmentationParameter.desaturation_max)
}

// -------------------------------------------------------------------

// LossParameter

// optional int32 ignore_label = 1;
inline bool LossParameter::has_ignore_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LossParameter::set_has_ignore_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LossParameter::clear_has_ignore_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LossParameter::clear_ignore_label() {
  ignore_label_ = 0;
  clear_has_ignore_label();
}
inline ::google::protobuf::int32 LossParameter::ignore_label() const {
  // @@protoc_insertion_point(field_get:caffe.LossParameter.ignore_label)
  return ignore_label_;
}
inline void LossParameter::set_ignore_label(::google::protobuf::int32 value) {
  set_has_ignore_label();
  ignore_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.LossParameter.ignore_label)
}

// optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
inline bool LossParameter::has_normalization() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LossParameter::set_has_normalization() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LossParameter::clear_has_normalization() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LossParameter::clear_normalization() {
  normalization_ = 1;
  clear_has_normalization();
}
inline ::caffe::LossParameter_NormalizationMode LossParameter::normalization() const {
  // @@protoc_insertion_point(field_get:caffe.LossParameter.normalization)
  return static_cast< ::caffe::LossParameter_NormalizationMode >(normalization_);
}
inline void LossParameter::set_normalization(::caffe::LossParameter_NormalizationMode value) {
  assert(::caffe::LossParameter_NormalizationMode_IsValid(value));
  set_has_normalization();
  normalization_ = value;
  // @@protoc_insertion_point(field_set:caffe.LossParameter.normalization)
}

// optional bool normalize = 2;
inline bool LossParameter::has_normalize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LossParameter::set_has_normalize() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LossParameter::clear_has_normalize() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LossParameter::clear_normalize() {
  normalize_ = false;
  clear_has_normalize();
}
inline bool LossParameter::normalize() const {
  // @@protoc_insertion_point(field_get:caffe.LossParameter.normalize)
  return normalize_;
}
inline void LossParameter::set_normalize(bool value) {
  set_has_normalize();
  normalize_ = value;
  // @@protoc_insertion_point(field_set:caffe.LossParameter.normalize)
}

// -------------------------------------------------------------------

// AccuracyParameter

// optional uint32 top_k = 1 [default = 1];
inline bool AccuracyParameter::has_top_k() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccuracyParameter::set_has_top_k() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccuracyParameter::clear_has_top_k() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccuracyParameter::clear_top_k() {
  top_k_ = 1u;
  clear_has_top_k();
}
inline ::google::protobuf::uint32 AccuracyParameter::top_k() const {
  // @@protoc_insertion_point(field_get:caffe.AccuracyParameter.top_k)
  return top_k_;
}
inline void AccuracyParameter::set_top_k(::google::protobuf::uint32 value) {
  set_has_top_k();
  top_k_ = value;
  // @@protoc_insertion_point(field_set:caffe.AccuracyParameter.top_k)
}

// optional int32 axis = 2 [default = 1];
inline bool AccuracyParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccuracyParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccuracyParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccuracyParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 AccuracyParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.AccuracyParameter.axis)
  return axis_;
}
inline void AccuracyParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.AccuracyParameter.axis)
}

// optional int32 ignore_label = 3;
inline bool AccuracyParameter::has_ignore_label() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccuracyParameter::set_has_ignore_label() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccuracyParameter::clear_has_ignore_label() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccuracyParameter::clear_ignore_label() {
  ignore_label_ = 0;
  clear_has_ignore_label();
}
inline ::google::protobuf::int32 AccuracyParameter::ignore_label() const {
  // @@protoc_insertion_point(field_get:caffe.AccuracyParameter.ignore_label)
  return ignore_label_;
}
inline void AccuracyParameter::set_ignore_label(::google::protobuf::int32 value) {
  set_has_ignore_label();
  ignore_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.AccuracyParameter.ignore_label)
}

// -------------------------------------------------------------------

// AnnotatedDataParameter

// repeated .caffe.BatchSampler batch_sampler = 1;
inline int AnnotatedDataParameter::batch_sampler_size() const {
  return batch_sampler_.size();
}
inline void AnnotatedDataParameter::clear_batch_sampler() {
  batch_sampler_.Clear();
}
inline const ::caffe::BatchSampler& AnnotatedDataParameter::batch_sampler(int index) const {
  // @@protoc_insertion_point(field_get:caffe.AnnotatedDataParameter.batch_sampler)
  return batch_sampler_.Get(index);
}
inline ::caffe::BatchSampler* AnnotatedDataParameter::mutable_batch_sampler(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.AnnotatedDataParameter.batch_sampler)
  return batch_sampler_.Mutable(index);
}
inline ::caffe::BatchSampler* AnnotatedDataParameter::add_batch_sampler() {
  // @@protoc_insertion_point(field_add:caffe.AnnotatedDataParameter.batch_sampler)
  return batch_sampler_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BatchSampler >&
AnnotatedDataParameter::batch_sampler() const {
  // @@protoc_insertion_point(field_list:caffe.AnnotatedDataParameter.batch_sampler)
  return batch_sampler_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BatchSampler >*
AnnotatedDataParameter::mutable_batch_sampler() {
  // @@protoc_insertion_point(field_mutable_list:caffe.AnnotatedDataParameter.batch_sampler)
  return &batch_sampler_;
}

// optional string label_map_file = 2;
inline bool AnnotatedDataParameter::has_label_map_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AnnotatedDataParameter::set_has_label_map_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AnnotatedDataParameter::clear_has_label_map_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AnnotatedDataParameter::clear_label_map_file() {
  if (label_map_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_map_file_->clear();
  }
  clear_has_label_map_file();
}
inline const ::std::string& AnnotatedDataParameter::label_map_file() const {
  // @@protoc_insertion_point(field_get:caffe.AnnotatedDataParameter.label_map_file)
  return *label_map_file_;
}
inline void AnnotatedDataParameter::set_label_map_file(const ::std::string& value) {
  set_has_label_map_file();
  if (label_map_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_map_file_ = new ::std::string;
  }
  label_map_file_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.AnnotatedDataParameter.label_map_file)
}
inline void AnnotatedDataParameter::set_label_map_file(const char* value) {
  set_has_label_map_file();
  if (label_map_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_map_file_ = new ::std::string;
  }
  label_map_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.AnnotatedDataParameter.label_map_file)
}
inline void AnnotatedDataParameter::set_label_map_file(const char* value, size_t size) {
  set_has_label_map_file();
  if (label_map_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_map_file_ = new ::std::string;
  }
  label_map_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.AnnotatedDataParameter.label_map_file)
}
inline ::std::string* AnnotatedDataParameter::mutable_label_map_file() {
  set_has_label_map_file();
  if (label_map_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    label_map_file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe.AnnotatedDataParameter.label_map_file)
  return label_map_file_;
}
inline ::std::string* AnnotatedDataParameter::release_label_map_file() {
  clear_has_label_map_file();
  if (label_map_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = label_map_file_;
    label_map_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AnnotatedDataParameter::set_allocated_label_map_file(::std::string* label_map_file) {
  if (label_map_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete label_map_file_;
  }
  if (label_map_file) {
    set_has_label_map_file();
    label_map_file_ = label_map_file;
  } else {
    clear_has_label_map_file();
    label_map_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.AnnotatedDataParameter.label_map_file)
}

// optional .caffe.AnnotatedDatum.AnnotationType anno_type = 3;
inline bool AnnotatedDataParameter::has_anno_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AnnotatedDataParameter::set_has_anno_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AnnotatedDataParameter::clear_has_anno_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AnnotatedDataParameter::clear_anno_type() {
  anno_type_ = 0;
  clear_has_anno_type();
}
inline ::caffe::AnnotatedDatum_AnnotationType AnnotatedDataParameter::anno_type() const {
  // @@protoc_insertion_point(field_get:caffe.AnnotatedDataParameter.anno_type)
  return static_cast< ::caffe::AnnotatedDatum_AnnotationType >(anno_type_);
}
inline void AnnotatedDataParameter::set_anno_type(::caffe::AnnotatedDatum_AnnotationType value) {
  assert(::caffe::AnnotatedDatum_AnnotationType_IsValid(value));
  set_has_anno_type();
  anno_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.AnnotatedDataParameter.anno_type)
}

// -------------------------------------------------------------------

// ArgMaxParameter

// optional bool out_max_val = 1 [default = false];
inline bool ArgMaxParameter::has_out_max_val() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArgMaxParameter::set_has_out_max_val() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArgMaxParameter::clear_has_out_max_val() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArgMaxParameter::clear_out_max_val() {
  out_max_val_ = false;
  clear_has_out_max_val();
}
inline bool ArgMaxParameter::out_max_val() const {
  // @@protoc_insertion_point(field_get:caffe.ArgMaxParameter.out_max_val)
  return out_max_val_;
}
inline void ArgMaxParameter::set_out_max_val(bool value) {
  set_has_out_max_val();
  out_max_val_ = value;
  // @@protoc_insertion_point(field_set:caffe.ArgMaxParameter.out_max_val)
}

// optional uint32 top_k = 2 [default = 1];
inline bool ArgMaxParameter::has_top_k() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArgMaxParameter::set_has_top_k() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArgMaxParameter::clear_has_top_k() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArgMaxParameter::clear_top_k() {
  top_k_ = 1u;
  clear_has_top_k();
}
inline ::google::protobuf::uint32 ArgMaxParameter::top_k() const {
  // @@protoc_insertion_point(field_get:caffe.ArgMaxParameter.top_k)
  return top_k_;
}
inline void ArgMaxParameter::set_top_k(::google::protobuf::uint32 value) {
  set_has_top_k();
  top_k_ = value;
  // @@protoc_insertion_point(field_set:caffe.ArgMaxParameter.top_k)
}

// optional int32 axis = 3;
inline bool ArgMaxParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ArgMaxParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ArgMaxParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ArgMaxParameter::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
inline ::google::protobuf::int32 ArgMaxParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ArgMaxParameter.axis)
  return axis_;
}
inline void ArgMaxParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ArgMaxParameter.axis)
}

// -------------------------------------------------------------------

// ConcatParameter

// optional int32 axis = 2 [default = 1];
inline bool ConcatParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConcatParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConcatParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConcatParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 ConcatParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ConcatParameter.axis)
  return axis_;
}
inline void ConcatParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConcatParameter.axis)
}

// optional uint32 concat_dim = 1 [default = 1];
inline bool ConcatParameter::has_concat_dim() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConcatParameter::set_has_concat_dim() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConcatParameter::clear_has_concat_dim() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConcatParameter::clear_concat_dim() {
  concat_dim_ = 1u;
  clear_has_concat_dim();
}
inline ::google::protobuf::uint32 ConcatParameter::concat_dim() const {
  // @@protoc_insertion_point(field_get:caffe.ConcatParameter.concat_dim)
  return concat_dim_;
}
inline void ConcatParameter::set_concat_dim(::google::protobuf::uint32 value) {
  set_has_concat_dim();
  concat_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConcatParameter.concat_dim)
}

// -------------------------------------------------------------------

// BatchNormParameter

// optional bool use_global_stats = 1 [default = false];
inline bool BatchNormParameter::has_use_global_stats() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BatchNormParameter::set_has_use_global_stats() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BatchNormParameter::clear_has_use_global_stats() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BatchNormParameter::clear_use_global_stats() {
  use_global_stats_ = false;
  clear_has_use_global_stats();
}
inline bool BatchNormParameter::use_global_stats() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.use_global_stats)
  return use_global_stats_;
}
inline void BatchNormParameter::set_use_global_stats(bool value) {
  set_has_use_global_stats();
  use_global_stats_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormParameter.use_global_stats)
}

// optional float moving_average_fraction = 2 [default = 0.999];
inline bool BatchNormParameter::has_moving_average_fraction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BatchNormParameter::set_has_moving_average_fraction() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BatchNormParameter::clear_has_moving_average_fraction() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BatchNormParameter::clear_moving_average_fraction() {
  moving_average_fraction_ = 0.999f;
  clear_has_moving_average_fraction();
}
inline float BatchNormParameter::moving_average_fraction() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.moving_average_fraction)
  return moving_average_fraction_;
}
inline void BatchNormParameter::set_moving_average_fraction(float value) {
  set_has_moving_average_fraction();
  moving_average_fraction_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormParameter.moving_average_fraction)
}

// optional float eps = 3 [default = 0.0001];
inline bool BatchNormParameter::has_eps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BatchNormParameter::set_has_eps() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BatchNormParameter::clear_has_eps() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BatchNormParameter::clear_eps() {
  eps_ = 0.0001f;
  clear_has_eps();
}
inline float BatchNormParameter::eps() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.eps)
  return eps_;
}
inline void BatchNormParameter::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormParameter.eps)
}

// optional .caffe.FillerParameter scale_filler = 5;
inline bool BatchNormParameter::has_scale_filler() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BatchNormParameter::set_has_scale_filler() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BatchNormParameter::clear_has_scale_filler() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BatchNormParameter::clear_scale_filler() {
  if (scale_filler_ != NULL) scale_filler_->::caffe::FillerParameter::Clear();
  clear_has_scale_filler();
}
inline const ::caffe::FillerParameter& BatchNormParameter::scale_filler() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.scale_filler)
  return scale_filler_ != NULL ? *scale_filler_ : *default_instance_->scale_filler_;
}
inline ::caffe::FillerParameter* BatchNormParameter::mutable_scale_filler() {
  set_has_scale_filler();
  if (scale_filler_ == NULL) scale_filler_ = new ::caffe::FillerParameter;
  // @@protoc_insertion_point(field_mutable:caffe.BatchNormParameter.scale_filler)
  return scale_filler_;
}
inline ::caffe::FillerParameter* BatchNormParameter::release_scale_filler() {
  clear_has_scale_filler();
  ::caffe::FillerParameter* temp = scale_filler_;
  scale_filler_ = NULL;
  return temp;
}
inline void BatchNormParameter::set_allocated_scale_filler(::caffe::FillerParameter* scale_filler) {
  delete scale_filler_;
  scale_filler_ = scale_filler;
  if (scale_filler) {
    set_has_scale_filler();
  } else {
    clear_has_scale_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.BatchNormParameter.scale_filler)
}

// optional .caffe.FillerParameter bias_filler = 6;
inline bool BatchNormParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BatchNormParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BatchNormParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BatchNormParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& BatchNormParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
inline ::caffe::FillerParameter* BatchNormParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) bias_filler_ = new ::caffe::FillerParameter;
  // @@protoc_insertion_point(field_mutable:caffe.BatchNormParameter.bias_filler)
  return bias_filler_;
}
inline ::caffe::FillerParameter* BatchNormParameter::release_bias_filler() {
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void BatchNormParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.BatchNormParameter.bias_filler)
}

// optional bool scale_bias = 7 [default = false];
inline bool BatchNormParameter::has_scale_bias() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BatchNormParameter::set_has_scale_bias() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BatchNormParameter::clear_has_scale_bias() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BatchNormParameter::clear_scale_bias() {
  scale_bias_ = false;
  clear_has_scale_bias();
}
inline bool BatchNormParameter::scale_bias() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.scale_bias)
  return scale_bias_;
}
inline void BatchNormParameter::set_scale_bias(bool value) {
  set_has_scale_bias();
  scale_bias_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormParameter.scale_bias)
}

// optional .caffe.BatchNormParameter.Engine engine = 15 [default = DEFAULT];
inline bool BatchNormParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BatchNormParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BatchNormParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BatchNormParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::BatchNormParameter_Engine BatchNormParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.engine)
  return static_cast< ::caffe::BatchNormParameter_Engine >(engine_);
}
inline void BatchNormParameter::set_engine(::caffe::BatchNormParameter_Engine value) {
  assert(::caffe::BatchNormParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormParameter.engine)
}

// -------------------------------------------------------------------

// BiasParameter

// optional int32 axis = 1 [default = 1];
inline bool BiasParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BiasParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BiasParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BiasParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 BiasParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.BiasParameter.axis)
  return axis_;
}
inline void BiasParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.BiasParameter.axis)
}

// optional int32 num_axes = 2 [default = 1];
inline bool BiasParameter::has_num_axes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BiasParameter::set_has_num_axes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BiasParameter::clear_has_num_axes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BiasParameter::clear_num_axes() {
  num_axes_ = 1;
  clear_has_num_axes();
}
inline ::google::protobuf::int32 BiasParameter::num_axes() const {
  // @@protoc_insertion_point(field_get:caffe.BiasParameter.num_axes)
  return num_axes_;
}
inline void BiasParameter::set_num_axes(::google::protobuf::int32 value) {
  set_has_num_axes();
  num_axes_ = value;
  // @@protoc_insertion_point(field_set:caffe.BiasParameter.num_axes)
}

// optional .caffe.FillerParameter filler = 3;
inline bool BiasParameter::has_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BiasParameter::set_has_filler() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BiasParameter::clear_has_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BiasParameter::clear_filler() {
  if (filler_ != NULL) filler_->::caffe::FillerParameter::Clear();
  clear_has_filler();
}
inline const ::caffe::FillerParameter& BiasParameter::filler() const {
  // @@protoc_insertion_point(field_get:caffe.BiasParameter.filler)
  return filler_ != NULL ? *filler_ : *default_instance_->filler_;
}
inline ::caffe::FillerParameter* BiasParameter::mutable_filler() {
  set_has_filler();
  if (filler_ == NULL) filler_ = new ::caffe::FillerParameter;
  // @@protoc_insertion_point(field_mutable:caffe.BiasParameter.filler)
  return filler_;
}
inline ::caffe::FillerParameter* BiasParameter::release_filler() {
  clear_has_filler();
  ::caffe::FillerParameter* temp = filler_;
  filler_ = NULL;
  return temp;
}
inline void BiasParameter::set_allocated_filler(::caffe::FillerParameter* filler) {
  delete filler_;
  filler_ = filler;
  if (filler) {
    set_has_filler();
  } else {
    clear_has_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.BiasParameter.filler)
}

// -------------------------------------------------------------------

// ContrastiveLossParameter

// optional float margin = 1 [default = 1];
inline bool ContrastiveLossParameter::has_margin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContrastiveLossParameter::set_has_margin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContrastiveLossParameter::clear_has_margin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContrastiveLossParameter::clear_margin() {
  margin_ = 1;
  clear_has_margin();
}
inline float ContrastiveLossParameter::margin() const {
  // @@protoc_insertion_point(field_get:caffe.ContrastiveLossParameter.margin)
  return margin_;
}
inline void ContrastiveLossParameter::set_margin(float value) {
  set_has_margin();
  margin_ = value;
  // @@protoc_insertion_point(field_set:caffe.ContrastiveLossParameter.margin)
}

// optional bool legacy_version = 2 [default = false];
inline bool ContrastiveLossParameter::has_legacy_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContrastiveLossParameter::set_has_legacy_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContrastiveLossParameter::clear_has_legacy_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContrastiveLossParameter::clear_legacy_version() {
  legacy_version_ = false;
  clear_has_legacy_version();
}
inline bool ContrastiveLossParameter::legacy_version() const {
  // @@protoc_insertion_point(field_get:caffe.ContrastiveLossParameter.legacy_version)
  return legacy_version_;
}
inline void ContrastiveLossParameter::set_legacy_version(bool value) {
  set_has_legacy_version();
  legacy_version_ = value;
  // @@protoc_insertion_point(field_set:caffe.ContrastiveLossParameter.legacy_version)
}

// -------------------------------------------------------------------

// ConvolutionParameter

// optional uint32 num_output = 1;
inline bool ConvolutionParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConvolutionParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConvolutionParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConvolutionParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 ConvolutionParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.num_output)
  return num_output_;
}
inline void ConvolutionParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
inline bool ConvolutionParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConvolutionParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConvolutionParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConvolutionParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
inline bool ConvolutionParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.bias_term)
  return bias_term_;
}
inline void ConvolutionParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.bias_term)
}

// repeated uint32 pad = 3;
inline int ConvolutionParameter::pad_size() const {
  return pad_.size();
}
inline void ConvolutionParameter::clear_pad() {
  pad_.Clear();
}
inline ::google::protobuf::uint32 ConvolutionParameter::pad(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.pad)
  return pad_.Get(index);
}
inline void ConvolutionParameter::set_pad(int index, ::google::protobuf::uint32 value) {
  pad_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.pad)
}
inline void ConvolutionParameter::add_pad(::google::protobuf::uint32 value) {
  pad_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.pad)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::pad() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.pad)
  return pad_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_pad() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.pad)
  return &pad_;
}

// repeated uint32 kernel_size = 4;
inline int ConvolutionParameter::kernel_size_size() const {
  return kernel_size_.size();
}
inline void ConvolutionParameter::clear_kernel_size() {
  kernel_size_.Clear();
}
inline ::google::protobuf::uint32 ConvolutionParameter::kernel_size(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.kernel_size)
  return kernel_size_.Get(index);
}
inline void ConvolutionParameter::set_kernel_size(int index, ::google::protobuf::uint32 value) {
  kernel_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.kernel_size)
}
inline void ConvolutionParameter::add_kernel_size(::google::protobuf::uint32 value) {
  kernel_size_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.kernel_size)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::kernel_size() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.kernel_size)
  return kernel_size_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_kernel_size() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.kernel_size)
  return &kernel_size_;
}

// repeated uint32 stride = 6;
inline int ConvolutionParameter::stride_size() const {
  return stride_.size();
}
inline void ConvolutionParameter::clear_stride() {
  stride_.Clear();
}
inline ::google::protobuf::uint32 ConvolutionParameter::stride(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.stride)
  return stride_.Get(index);
}
inline void ConvolutionParameter::set_stride(int index, ::google::protobuf::uint32 value) {
  stride_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.stride)
}
inline void ConvolutionParameter::add_stride(::google::protobuf::uint32 value) {
  stride_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.stride)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::stride() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.stride)
  return stride_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_stride() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.stride)
  return &stride_;
}

// repeated uint32 dilation = 18;
inline int ConvolutionParameter::dilation_size() const {
  return dilation_.size();
}
inline void ConvolutionParameter::clear_dilation() {
  dilation_.Clear();
}
inline ::google::protobuf::uint32 ConvolutionParameter::dilation(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.dilation)
  return dilation_.Get(index);
}
inline void ConvolutionParameter::set_dilation(int index, ::google::protobuf::uint32 value) {
  dilation_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.dilation)
}
inline void ConvolutionParameter::add_dilation(::google::protobuf::uint32 value) {
  dilation_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.dilation)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::dilation() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.dilation)
  return dilation_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_dilation() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.dilation)
  return &dilation_;
}

// optional uint32 pad_h = 9 [default = 0];
inline bool ConvolutionParameter::has_pad_h() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConvolutionParameter::set_has_pad_h() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConvolutionParameter::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConvolutionParameter::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
inline ::google::protobuf::uint32 ConvolutionParameter::pad_h() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.pad_h)
  return pad_h_;
}
inline void ConvolutionParameter::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.pad_h)
}

// optional uint32 pad_w = 10 [default = 0];
inline bool ConvolutionParameter::has_pad_w() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConvolutionParameter::set_has_pad_w() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConvolutionParameter::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConvolutionParameter::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
inline ::google::protobuf::uint32 ConvolutionParameter::pad_w() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.pad_w)
  return pad_w_;
}
inline void ConvolutionParameter::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.pad_w)
}

// optional uint32 kernel_h = 11;
inline bool ConvolutionParameter::has_kernel_h() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConvolutionParameter::set_has_kernel_h() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConvolutionParameter::clear_has_kernel_h() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConvolutionParameter::clear_kernel_h() {
  kernel_h_ = 0u;
  clear_has_kernel_h();
}
inline ::google::protobuf::uint32 ConvolutionParameter::kernel_h() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.kernel_h)
  return kernel_h_;
}
inline void ConvolutionParameter::set_kernel_h(::google::protobuf::uint32 value) {
  set_has_kernel_h();
  kernel_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.kernel_h)
}

// optional uint32 kernel_w = 12;
inline bool ConvolutionParameter::has_kernel_w() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConvolutionParameter::set_has_kernel_w() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConvolutionParameter::clear_has_kernel_w() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConvolutionParameter::clear_kernel_w() {
  kernel_w_ = 0u;
  clear_has_kernel_w();
}
inline ::google::protobuf::uint32 ConvolutionParameter::kernel_w() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.kernel_w)
  return kernel_w_;
}
inline void ConvolutionParameter::set_kernel_w(::google::protobuf::uint32 value) {
  set_has_kernel_w();
  kernel_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.kernel_w)
}

// optional uint32 stride_h = 13;
inline bool ConvolutionParameter::has_stride_h() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConvolutionParameter::set_has_stride_h() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConvolutionParameter::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConvolutionParameter::clear_stride_h() {
  stride_h_ = 0u;
  clear_has_stride_h();
}
inline ::google::protobuf::uint32 ConvolutionParameter::stride_h() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.stride_h)
  return stride_h_;
}
inline void ConvolutionParameter::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.stride_h)
}

// optional uint32 stride_w = 14;
inline bool ConvolutionParameter::has_stride_w() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConvolutionParameter::set_has_stride_w() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConvolutionParameter::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConvolutionParameter::clear_stride_w() {
  stride_w_ = 0u;
  clear_has_stride_w();
}
inline ::google::protobuf::uint32 ConvolutionParameter::stride_w() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.stride_w)
  return stride_w_;
}
inline void ConvolutionParameter::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.stride_w)
}

// optional uint32 group = 5 [default = 1];
inline bool ConvolutionParameter::has_group() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ConvolutionParameter::set_has_group() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ConvolutionParameter::clear_has_group() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ConvolutionParameter::clear_group() {
  group_ = 1u;
  clear_has_group();
}
inline ::google::protobuf::uint32 ConvolutionParameter::group() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.group)
  return group_;
}
inline void ConvolutionParameter::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.group)
}

// optional .caffe.FillerParameter weight_filler = 7;
inline bool ConvolutionParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ConvolutionParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ConvolutionParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ConvolutionParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& ConvolutionParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
inline ::caffe::FillerParameter* ConvolutionParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) weight_filler_ = new ::caffe::FillerParameter;
  // @@protoc_insertion_point(field_mutable:caffe.ConvolutionParameter.weight_filler)
  return weight_filler_;
}
inline ::caffe::FillerParameter* ConvolutionParameter::release_weight_filler() {
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void ConvolutionParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ConvolutionParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 8;
inline bool ConvolutionParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ConvolutionParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ConvolutionParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ConvolutionParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& ConvolutionParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
inline ::caffe::FillerParameter* ConvolutionParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) bias_filler_ = new ::caffe::FillerParameter;
  // @@protoc_insertion_point(field_mutable:caffe.ConvolutionParameter.bias_filler)
  return bias_filler_;
}
inline ::caffe::FillerParameter* ConvolutionParameter::release_bias_filler() {
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void ConvolutionParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ConvolutionParameter.bias_filler)
}

// optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
inline bool ConvolutionParameter::has_engine() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ConvolutionParameter::set_has_engine() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ConvolutionParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ConvolutionParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::ConvolutionParameter_Engine ConvolutionParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.engine)
  return static_cast< ::caffe::ConvolutionParameter_Engine >(engine_);
}
inline void ConvolutionParameter::set_engine(::caffe::ConvolutionParameter_Engine value) {
  assert(::caffe::ConvolutionParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.engine)
}

// optional int32 axis = 16 [default = 1];
inline bool ConvolutionParameter::has_axis() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ConvolutionParameter::set_has_axis() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ConvolutionParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ConvolutionParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 ConvolutionParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.axis)
  return axis_;
}
inline void ConvolutionParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.axis)
}

// optional bool force_nd_im2col = 17 [default = false];
inline bool ConvolutionParameter::has_force_nd_im2col() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ConvolutionParameter::set_has_force_nd_im2col() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ConvolutionParameter::clear_has_force_nd_im2col() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ConvolutionParameter::clear_force_nd_im2col() {
  force_nd_im2col_ = false;
  clear_has_force_nd_im2col();
}
inline bool ConvolutionParameter::force_nd_im2col() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.force_nd_im2col)
  return force_nd_im2col_;
}
inline void ConvolutionParameter::set_force_nd_im2col(bool value) {
  set_has_force_nd_im2col();
  force_nd_im2col_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.force_nd_im2col)
}

// optional .caffe.ConvolutionParameter.CuDNNConvolutionAlgorithmSeeker cudnn_convolution_algo_seeker = 19 [default = FINDEX];
inline bool ConvolutionParameter::has_cudnn_convolution_algo_seeker() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ConvolutionParameter::set_has_cudnn_convolution_algo_seeker() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ConvolutionParameter::clear_has_cudnn_convolution_algo_seeker() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ConvolutionParameter::clear_cudnn_convolution_algo_seeker() {
  cudnn_convolution_algo_seeker_ = 1;
  clear_has_cudnn_convolution_algo_seeker();
}
inline ::caffe::ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker ConvolutionParameter::cudnn_convolution_algo_seeker() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.cudnn_convolution_algo_seeker)
  return static_cast< ::caffe::ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker >(cudnn_convolution_algo_seeker_);
}
inline void ConvolutionParameter::set_cudnn_convolution_algo_seeker(::caffe::ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker value) {
  assert(::caffe::ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_IsValid(value));
  set_has_cudnn_convolution_algo_seeker();
  cudnn_convolution_algo_seeker_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.cudnn_convolution_algo_seeker)
}

// optional string conv_algos_override = 20 [default = "-1,-1,-1"];
inline bool ConvolutionParameter::has_conv_algos_override() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ConvolutionParameter::set_has_conv_algos_override() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ConvolutionParameter::clear_has_conv_algos_override() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ConvolutionParameter::clear_conv_algos_override() {
  if (conv_algos_override_ != _default_conv_algos_override_) {
    conv_algos_override_->assign(*_default_conv_algos_override_);
  }
  clear_has_conv_algos_override();
}
inline const ::std::string& ConvolutionParameter::conv_algos_override() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.conv_algos_override)
  return *conv_algos_override_;
}
inline void ConvolutionParameter::set_conv_algos_override(const ::std::string& value) {
  set_has_conv_algos_override();
  if (conv_algos_override_ == _default_conv_algos_override_) {
    conv_algos_override_ = new ::std::string;
  }
  conv_algos_override_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.conv_algos_override)
}
inline void ConvolutionParameter::set_conv_algos_override(const char* value) {
  set_has_conv_algos_override();
  if (conv_algos_override_ == _default_conv_algos_override_) {
    conv_algos_override_ = new ::std::string;
  }
  conv_algos_override_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.ConvolutionParameter.conv_algos_override)
}
inline void ConvolutionParameter::set_conv_algos_override(const char* value, size_t size) {
  set_has_conv_algos_override();
  if (conv_algos_override_ == _default_conv_algos_override_) {
    conv_algos_override_ = new ::std::string;
  }
  conv_algos_override_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.ConvolutionParameter.conv_algos_override)
}
inline ::std::string* ConvolutionParameter::mutable_conv_algos_override() {
  set_has_conv_algos_override();
  if (conv_algos_override_ == _default_conv_algos_override_) {
    conv_algos_override_ = new ::std::string(*_default_conv_algos_override_);
  }
  // @@protoc_insertion_point(field_mutable:caffe.ConvolutionParameter.conv_algos_override)
  return conv_algos_override_;
}
inline ::std::string* ConvolutionParameter::release_conv_algos_override() {
  clear_has_conv_algos_override();
  if (conv_algos_override_ == _default_conv_algos_override_) {
    return NULL;
  } else {
    ::std::string* temp = conv_algos_override_;
    conv_algos_override_ = const_cast< ::std::string*>(_default_conv_algos_override_);
    return temp;
  }
}
inline void ConvolutionParameter::set_allocated_conv_algos_override(::std::string* conv_algos_override) {
  if (conv_algos_override_ != _default_conv_algos_override_) {
    delete conv_algos_override_;
  }
  if (conv_algos_override) {
    set_has_conv_algos_override();
    conv_algos_override_ = conv_algos_override;
  } else {
    clear_has_conv_algos_override();
    conv_algos_override_ = const_cast< ::std::string*>(_default_conv_algos_override_);
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ConvolutionParameter.conv_algos_override)
}

// -------------------------------------------------------------------

// CropParameter

// optional int32 axis = 1 [default = 2];
inline bool CropParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CropParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CropParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CropParameter::clear_axis() {
  axis_ = 2;
  clear_has_axis();
}
inline ::google::protobuf::int32 CropParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.CropParameter.axis)
  return axis_;
}
inline void CropParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.CropParameter.axis)
}

// repeated uint32 offset = 2;
inline int CropParameter::offset_size() const {
  return offset_.size();
}
inline void CropParameter::clear_offset() {
  offset_.Clear();
}
inline ::google::protobuf::uint32 CropParameter::offset(int index) const {
  // @@protoc_insertion_point(field_get:caffe.CropParameter.offset)
  return offset_.Get(index);
}
inline void CropParameter::set_offset(int index, ::google::protobuf::uint32 value) {
  offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.CropParameter.offset)
}
inline void CropParameter::add_offset(::google::protobuf::uint32 value) {
  offset_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.CropParameter.offset)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CropParameter::offset() const {
  // @@protoc_insertion_point(field_list:caffe.CropParameter.offset)
  return offset_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CropParameter::mutable_offset() {
  // @@protoc_insertion_point(field_mutable_list:caffe.CropParameter.offset)
  return &offset_;
}

// -------------------------------------------------------------------

// DataParameter

// optional string source = 1;
inline bool DataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataParameter::clear_source() {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& DataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.source)
  return *source_;
}
inline void DataParameter::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.DataParameter.source)
}
inline void DataParameter::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.DataParameter.source)
}
inline void DataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.DataParameter.source)
}
inline ::std::string* DataParameter::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe.DataParameter.source)
  return source_;
}
inline ::std::string* DataParameter::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DataParameter::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.DataParameter.source)
}

// optional uint32 batch_size = 4;
inline bool DataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 DataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.batch_size)
  return batch_size_;
}
inline void DataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.batch_size)
}

// optional uint32 rand_skip = 7 [default = 0];
inline bool DataParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
inline ::google::protobuf::uint32 DataParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.rand_skip)
  return rand_skip_;
}
inline void DataParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.rand_skip)
}

// optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
inline bool DataParameter::has_backend() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataParameter::set_has_backend() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataParameter::clear_has_backend() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataParameter::clear_backend() {
  backend_ = 0;
  clear_has_backend();
}
inline ::caffe::DataParameter_DB DataParameter::backend() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.backend)
  return static_cast< ::caffe::DataParameter_DB >(backend_);
}
inline void DataParameter::set_backend(::caffe::DataParameter_DB value) {
  assert(::caffe::DataParameter_DB_IsValid(value));
  set_has_backend();
  backend_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.backend)
}

// optional float scale = 2 [default = 1];
inline bool DataParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DataParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DataParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DataParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float DataParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.scale)
  return scale_;
}
inline void DataParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.scale)
}

// optional string mean_file = 3;
inline bool DataParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DataParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DataParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DataParameter::clear_mean_file() {
  if (mean_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_->clear();
  }
  clear_has_mean_file();
}
inline const ::std::string& DataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.mean_file)
  return *mean_file_;
}
inline void DataParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.DataParameter.mean_file)
}
inline void DataParameter::set_mean_file(const char* value) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.DataParameter.mean_file)
}
inline void DataParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.DataParameter.mean_file)
}
inline ::std::string* DataParameter::mutable_mean_file() {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe.DataParameter.mean_file)
  return mean_file_;
}
inline ::std::string* DataParameter::release_mean_file() {
  clear_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mean_file_;
    mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DataParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mean_file_;
  }
  if (mean_file) {
    set_has_mean_file();
    mean_file_ = mean_file;
  } else {
    clear_has_mean_file();
    mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.DataParameter.mean_file)
}

// optional uint32 crop_size = 5 [default = 0];
inline bool DataParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DataParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DataParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DataParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
inline ::google::protobuf::uint32 DataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.crop_size)
  return crop_size_;
}
inline void DataParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
inline bool DataParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DataParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DataParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DataParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool DataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.mirror)
  return mirror_;
}
inline void DataParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.mirror)
}

// optional bool force_encoded_color = 9 [default = false];
inline bool DataParameter::has_force_encoded_color() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DataParameter::set_has_force_encoded_color() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DataParameter::clear_has_force_encoded_color() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DataParameter::clear_force_encoded_color() {
  force_encoded_color_ = false;
  clear_has_force_encoded_color();
}
inline bool DataParameter::force_encoded_color() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.force_encoded_color)
  return force_encoded_color_;
}
inline void DataParameter::set_force_encoded_color(bool value) {
  set_has_force_encoded_color();
  force_encoded_color_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.force_encoded_color)
}

// optional uint32 prefetch = 10 [default = 0];
inline bool DataParameter::has_prefetch() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DataParameter::set_has_prefetch() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DataParameter::clear_has_prefetch() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DataParameter::clear_prefetch() {
  prefetch_ = 0u;
  clear_has_prefetch();
}
inline ::google::protobuf::uint32 DataParameter::prefetch() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.prefetch)
  return prefetch_;
}
inline void DataParameter::set_prefetch(::google::protobuf::uint32 value) {
  set_has_prefetch();
  prefetch_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.prefetch)
}

// optional uint32 threads = 11 [default = 0];
inline bool DataParameter::has_threads() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DataParameter::set_has_threads() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DataParameter::clear_has_threads() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DataParameter::clear_threads() {
  threads_ = 0u;
  clear_has_threads();
}
inline ::google::protobuf::uint32 DataParameter::threads() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.threads)
  return threads_;
}
inline void DataParameter::set_threads(::google::protobuf::uint32 value) {
  set_has_threads();
  threads_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.threads)
}

// optional uint32 parser_threads = 12 [default = 0];
inline bool DataParameter::has_parser_threads() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DataParameter::set_has_parser_threads() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DataParameter::clear_has_parser_threads() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DataParameter::clear_parser_threads() {
  parser_threads_ = 0u;
  clear_has_parser_threads();
}
inline ::google::protobuf::uint32 DataParameter::parser_threads() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.parser_threads)
  return parser_threads_;
}
inline void DataParameter::set_parser_threads(::google::protobuf::uint32 value) {
  set_has_parser_threads();
  parser_threads_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.parser_threads)
}

// optional bool cache = 13 [default = false];
inline bool DataParameter::has_cache() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DataParameter::set_has_cache() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DataParameter::clear_has_cache() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DataParameter::clear_cache() {
  cache_ = false;
  clear_has_cache();
}
inline bool DataParameter::cache() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.cache)
  return cache_;
}
inline void DataParameter::set_cache(bool value) {
  set_has_cache();
  cache_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.cache)
}

// optional bool shuffle = 14 [default = false];
inline bool DataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DataParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
inline bool DataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.shuffle)
  return shuffle_;
}
inline void DataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.shuffle)
}

// -------------------------------------------------------------------

// DropoutParameter

// optional float dropout_ratio = 1 [default = 0.5];
inline bool DropoutParameter::has_dropout_ratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DropoutParameter::set_has_dropout_ratio() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DropoutParameter::clear_has_dropout_ratio() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DropoutParameter::clear_dropout_ratio() {
  dropout_ratio_ = 0.5f;
  clear_has_dropout_ratio();
}
inline float DropoutParameter::dropout_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.DropoutParameter.dropout_ratio)
  return dropout_ratio_;
}
inline void DropoutParameter::set_dropout_ratio(float value) {
  set_has_dropout_ratio();
  dropout_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.DropoutParameter.dropout_ratio)
}

// optional .caffe.DropoutParameter.Engine engine = 2 [default = DEFAULT];
inline bool DropoutParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DropoutParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DropoutParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DropoutParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::DropoutParameter_Engine DropoutParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.DropoutParameter.engine)
  return static_cast< ::caffe::DropoutParameter_Engine >(engine_);
}
inline void DropoutParameter::set_engine(::caffe::DropoutParameter_Engine value) {
  assert(::caffe::DropoutParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.DropoutParameter.engine)
}

// optional int64 random_seed = 3 [default = -1];
inline bool DropoutParameter::has_random_seed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DropoutParameter::set_has_random_seed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DropoutParameter::clear_has_random_seed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DropoutParameter::clear_random_seed() {
  random_seed_ = GOOGLE_LONGLONG(-1);
  clear_has_random_seed();
}
inline ::google::protobuf::int64 DropoutParameter::random_seed() const {
  // @@protoc_insertion_point(field_get:caffe.DropoutParameter.random_seed)
  return random_seed_;
}
inline void DropoutParameter::set_random_seed(::google::protobuf::int64 value) {
  set_has_random_seed();
  random_seed_ = value;
  // @@protoc_insertion_point(field_set:caffe.DropoutParameter.random_seed)
}

// -------------------------------------------------------------------

// DummyDataParameter

// repeated .caffe.FillerParameter data_filler = 1;
inline int DummyDataParameter::data_filler_size() const {
  return data_filler_.size();
}
inline void DummyDataParameter::clear_data_filler() {
  data_filler_.Clear();
}
inline const ::caffe::FillerParameter& DummyDataParameter::data_filler(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.data_filler)
  return data_filler_.Get(index);
}
inline ::caffe::FillerParameter* DummyDataParameter::mutable_data_filler(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.DummyDataParameter.data_filler)
  return data_filler_.Mutable(index);
}
inline ::caffe::FillerParameter* DummyDataParameter::add_data_filler() {
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.data_filler)
  return data_filler_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter >&
DummyDataParameter::data_filler() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.data_filler)
  return data_filler_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter >*
DummyDataParameter::mutable_data_filler() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.data_filler)
  return &data_filler_;
}

// repeated .caffe.BlobShape shape = 6;
inline int DummyDataParameter::shape_size() const {
  return shape_.size();
}
inline void DummyDataParameter::clear_shape() {
  shape_.Clear();
}
inline const ::caffe::BlobShape& DummyDataParameter::shape(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.shape)
  return shape_.Get(index);
}
inline ::caffe::BlobShape* DummyDataParameter::mutable_shape(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.DummyDataParameter.shape)
  return shape_.Mutable(index);
}
inline ::caffe::BlobShape* DummyDataParameter::add_shape() {
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.shape)
  return shape_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
DummyDataParameter::shape() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.shape)
  return shape_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
DummyDataParameter::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.shape)
  return &shape_;
}

// repeated uint32 num = 2;
inline int DummyDataParameter::num_size() const {
  return num_.size();
}
inline void DummyDataParameter::clear_num() {
  num_.Clear();
}
inline ::google::protobuf::uint32 DummyDataParameter::num(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.num)
  return num_.Get(index);
}
inline void DummyDataParameter::set_num(int index, ::google::protobuf::uint32 value) {
  num_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DummyDataParameter.num)
}
inline void DummyDataParameter::add_num(::google::protobuf::uint32 value) {
  num_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.num)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::num() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.num)
  return num_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_num() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.num)
  return &num_;
}

// repeated uint32 channels = 3;
inline int DummyDataParameter::channels_size() const {
  return channels_.size();
}
inline void DummyDataParameter::clear_channels() {
  channels_.Clear();
}
inline ::google::protobuf::uint32 DummyDataParameter::channels(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.channels)
  return channels_.Get(index);
}
inline void DummyDataParameter::set_channels(int index, ::google::protobuf::uint32 value) {
  channels_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DummyDataParameter.channels)
}
inline void DummyDataParameter::add_channels(::google::protobuf::uint32 value) {
  channels_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.channels)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::channels() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.channels)
  return channels_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.channels)
  return &channels_;
}

// repeated uint32 height = 4;
inline int DummyDataParameter::height_size() const {
  return height_.size();
}
inline void DummyDataParameter::clear_height() {
  height_.Clear();
}
inline ::google::protobuf::uint32 DummyDataParameter::height(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.height)
  return height_.Get(index);
}
inline void DummyDataParameter::set_height(int index, ::google::protobuf::uint32 value) {
  height_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DummyDataParameter.height)
}
inline void DummyDataParameter::add_height(::google::protobuf::uint32 value) {
  height_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.height)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::height() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.height)
  return height_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_height() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.height)
  return &height_;
}

// repeated uint32 width = 5;
inline int DummyDataParameter::width_size() const {
  return width_.size();
}
inline void DummyDataParameter::clear_width() {
  width_.Clear();
}
inline ::google::protobuf::uint32 DummyDataParameter::width(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.width)
  return width_.Get(index);
}
inline void DummyDataParameter::set_width(int index, ::google::protobuf::uint32 value) {
  width_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DummyDataParameter.width)
}
inline void DummyDataParameter::add_width(::google::protobuf::uint32 value) {
  width_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.width)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::width() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.width)
  return width_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_width() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.width)
  return &width_;
}

// -------------------------------------------------------------------

// EltwiseParameter

// optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
inline bool EltwiseParameter::has_operation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EltwiseParameter::set_has_operation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EltwiseParameter::clear_has_operation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EltwiseParameter::clear_operation() {
  operation_ = 1;
  clear_has_operation();
}
inline ::caffe::EltwiseParameter_EltwiseOp EltwiseParameter::operation() const {
  // @@protoc_insertion_point(field_get:caffe.EltwiseParameter.operation)
  return static_cast< ::caffe::EltwiseParameter_EltwiseOp >(operation_);
}
inline void EltwiseParameter::set_operation(::caffe::EltwiseParameter_EltwiseOp value) {
  assert(::caffe::EltwiseParameter_EltwiseOp_IsValid(value));
  set_has_operation();
  operation_ = value;
  // @@protoc_insertion_point(field_set:caffe.EltwiseParameter.operation)
}

// repeated float coeff = 2;
inline int EltwiseParameter::coeff_size() const {
  return coeff_.size();
}
inline void EltwiseParameter::clear_coeff() {
  coeff_.Clear();
}
inline float EltwiseParameter::coeff(int index) const {
  // @@protoc_insertion_point(field_get:caffe.EltwiseParameter.coeff)
  return coeff_.Get(index);
}
inline void EltwiseParameter::set_coeff(int index, float value) {
  coeff_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.EltwiseParameter.coeff)
}
inline void EltwiseParameter::add_coeff(float value) {
  coeff_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.EltwiseParameter.coeff)
}
inline const ::google::protobuf::RepeatedField< float >&
EltwiseParameter::coeff() const {
  // @@protoc_insertion_point(field_list:caffe.EltwiseParameter.coeff)
  return coeff_;
}
inline ::google::protobuf::RepeatedField< float >*
EltwiseParameter::mutable_coeff() {
  // @@protoc_insertion_point(field_mutable_list:caffe.EltwiseParameter.coeff)
  return &coeff_;
}

// optional bool stable_prod_grad = 3 [default = true];
inline bool EltwiseParameter::has_stable_prod_grad() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EltwiseParameter::set_has_stable_prod_grad() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EltwiseParameter::clear_has_stable_prod_grad() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EltwiseParameter::clear_stable_prod_grad() {
  stable_prod_grad_ = true;
  clear_has_stable_prod_grad();
}
inline bool EltwiseParameter::stable_prod_grad() const {
  // @@protoc_insertion_point(field_get:caffe.EltwiseParameter.stable_prod_grad)
  return stable_prod_grad_;
}
inline void EltwiseParameter::set_stable_prod_grad(bool value) {
  set_has_stable_prod_grad();
  stable_prod_grad_ = value;
  // @@protoc_insertion_point(field_set:caffe.EltwiseParameter.stable_prod_grad)
}

// -------------------------------------------------------------------

// ELUParameter

// optional float alpha = 1 [default = 1];
inline bool ELUParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ELUParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ELUParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ELUParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
inline float ELUParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.ELUParameter.alpha)
  return alpha_;
}
inline void ELUParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.ELUParameter.alpha)
}

// -------------------------------------------------------------------

// EmbedParameter

// optional uint32 num_output = 1;
inline bool EmbedParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmbedParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmbedParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmbedParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 EmbedParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.num_output)
  return num_output_;
}
inline void EmbedParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.EmbedParameter.num_output)
}

// optional uint32 input_dim = 2;
inline bool EmbedParameter::has_input_dim() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EmbedParameter::set_has_input_dim() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EmbedParameter::clear_has_input_dim() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EmbedParameter::clear_input_dim() {
  input_dim_ = 0u;
  clear_has_input_dim();
}
inline ::google::protobuf::uint32 EmbedParameter::input_dim() const {
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.input_dim)
  return input_dim_;
}
inline void EmbedParameter::set_input_dim(::google::protobuf::uint32 value) {
  set_has_input_dim();
  input_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.EmbedParameter.input_dim)
}

// optional bool bias_term = 3 [default = true];
inline bool EmbedParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EmbedParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EmbedParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EmbedParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
inline bool EmbedParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.bias_term)
  return bias_term_;
}
inline void EmbedParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.EmbedParameter.bias_term)
}

// optional .caffe.FillerParameter weight_filler = 4;
inline bool EmbedParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EmbedParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EmbedParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EmbedParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& EmbedParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
inline ::caffe::FillerParameter* EmbedParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) weight_filler_ = new ::caffe::FillerParameter;
  // @@protoc_insertion_point(field_mutable:caffe.EmbedParameter.weight_filler)
  return weight_filler_;
}
inline ::caffe::FillerParameter* EmbedParameter::release_weight_filler() {
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void EmbedParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.EmbedParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 5;
inline bool EmbedParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EmbedParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EmbedParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EmbedParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& EmbedParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
inline ::caffe::FillerParameter* EmbedParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) bias_filler_ = new ::caffe::FillerParameter;
  // @@protoc_insertion_point(field_mutable:caffe.EmbedParameter.bias_filler)
  return bias_filler_;
}
inline ::caffe::FillerParameter* EmbedParameter::release_bias_filler() {
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void EmbedParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.EmbedParameter.bias_filler)
}

// -------------------------------------------------------------------

// ExpParameter

// optional float base = 1 [default = -1];
inline bool ExpParameter::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExpParameter::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExpParameter::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExpParameter::clear_base() {
  base_ = -1;
  clear_has_base();
}
inline float ExpParameter::base() const {
  // @@protoc_insertion_point(field_get:caffe.ExpParameter.base)
  return base_;
}
inline void ExpParameter::set_base(float value) {
  set_has_base();
  base_ = value;
  // @@protoc_insertion_point(field_set:caffe.ExpParameter.base)
}

// optional float scale = 2 [default = 1];
inline bool ExpParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExpParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExpParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExpParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float ExpParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.ExpParameter.scale)
  return scale_;
}
inline void ExpParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ExpParameter.scale)
}

// optional float shift = 3 [default = 0];
inline bool ExpParameter::has_shift() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExpParameter::set_has_shift() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExpParameter::clear_has_shift() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExpParameter::clear_shift() {
  shift_ = 0;
  clear_has_shift();
}
inline float ExpParameter::shift() const {
  // @@protoc_insertion_point(field_get:caffe.ExpParameter.shift)
  return shift_;
}
inline void ExpParameter::set_shift(float value) {
  set_has_shift();
  shift_ = value;
  // @@protoc_insertion_point(field_set:caffe.ExpParameter.shift)
}

// -------------------------------------------------------------------

// FlattenParameter

// optional int32 axis = 1 [default = 1];
inline bool FlattenParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlattenParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlattenParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlattenParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 FlattenParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.FlattenParameter.axis)
  return axis_;
}
inline void FlattenParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.FlattenParameter.axis)
}

// optional int32 end_axis = 2 [default = -1];
inline bool FlattenParameter::has_end_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FlattenParameter::set_has_end_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FlattenParameter::clear_has_end_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FlattenParameter::clear_end_axis() {
  end_axis_ = -1;
  clear_has_end_axis();
}
inline ::google::protobuf::int32 FlattenParameter::end_axis() const {
  // @@protoc_insertion_point(field_get:caffe.FlattenParameter.end_axis)
  return end_axis_;
}
inline void FlattenParameter::set_end_axis(::google::protobuf::int32 value) {
  set_has_end_axis();
  end_axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.FlattenParameter.end_axis)
}

// -------------------------------------------------------------------

// HDF5DataParameter

// optional string source = 1;
inline bool HDF5DataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HDF5DataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HDF5DataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HDF5DataParameter::clear_source() {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& HDF5DataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5DataParameter.source)
  return *source_;
}
inline void HDF5DataParameter::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.HDF5DataParameter.source)
}
inline void HDF5DataParameter::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.HDF5DataParameter.source)
}
inline void HDF5DataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.HDF5DataParameter.source)
}
inline ::std::string* HDF5DataParameter::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe.HDF5DataParameter.source)
  return source_;
}
inline ::std::string* HDF5DataParameter::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HDF5DataParameter::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.HDF5DataParameter.source)
}

// optional uint32 batch_size = 2;
inline bool HDF5DataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HDF5DataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HDF5DataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HDF5DataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 HDF5DataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5DataParameter.batch_size)
  return batch_size_;
}
inline void HDF5DataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.HDF5DataParameter.batch_size)
}

// optional bool shuffle = 3 [default = false];
inline bool HDF5DataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HDF5DataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HDF5DataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HDF5DataParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
inline bool HDF5DataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5DataParameter.shuffle)
  return shuffle_;
}
inline void HDF5DataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe.HDF5DataParameter.shuffle)
}

// -------------------------------------------------------------------

// HDF5OutputParameter

// optional string file_name = 1;
inline bool HDF5OutputParameter::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HDF5OutputParameter::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HDF5OutputParameter::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HDF5OutputParameter::clear_file_name() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_->clear();
  }
  clear_has_file_name();
}
inline const ::std::string& HDF5OutputParameter::file_name() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5OutputParameter.file_name)
  return *file_name_;
}
inline void HDF5OutputParameter::set_file_name(const ::std::string& value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.HDF5OutputParameter.file_name)
}
inline void HDF5OutputParameter::set_file_name(const char* value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.HDF5OutputParameter.file_name)
}
inline void HDF5OutputParameter::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.HDF5OutputParameter.file_name)
}
inline ::std::string* HDF5OutputParameter::mutable_file_name() {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe.HDF5OutputParameter.file_name)
  return file_name_;
}
inline ::std::string* HDF5OutputParameter::release_file_name() {
  clear_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = file_name_;
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HDF5OutputParameter::set_allocated_file_name(::std::string* file_name) {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_name_;
  }
  if (file_name) {
    set_has_file_name();
    file_name_ = file_name;
  } else {
    clear_has_file_name();
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.HDF5OutputParameter.file_name)
}

// -------------------------------------------------------------------

// HingeLossParameter

// optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
inline bool HingeLossParameter::has_norm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HingeLossParameter::set_has_norm() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HingeLossParameter::clear_has_norm() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HingeLossParameter::clear_norm() {
  norm_ = 1;
  clear_has_norm();
}
inline ::caffe::HingeLossParameter_Norm HingeLossParameter::norm() const {
  // @@protoc_insertion_point(field_get:caffe.HingeLossParameter.norm)
  return static_cast< ::caffe::HingeLossParameter_Norm >(norm_);
}
inline void HingeLossParameter::set_norm(::caffe::HingeLossParameter_Norm value) {
  assert(::caffe::HingeLossParameter_Norm_IsValid(value));
  set_has_norm();
  norm_ = value;
  // @@protoc_insertion_point(field_set:caffe.HingeLossParameter.norm)
}

// -------------------------------------------------------------------

// ImageDataParameter

// optional string source = 1;
inline bool ImageDataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageDataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageDataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageDataParameter::clear_source() {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& ImageDataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.source)
  return *source_;
}
inline void ImageDataParameter::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.source)
}
inline void ImageDataParameter::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataParameter.source)
}
inline void ImageDataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataParameter.source)
}
inline ::std::string* ImageDataParameter::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataParameter.source)
  return source_;
}
inline ::std::string* ImageDataParameter::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ImageDataParameter::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataParameter.source)
}

// optional uint32 batch_size = 4 [default = 1];
inline bool ImageDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageDataParameter::clear_batch_size() {
  batch_size_ = 1u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 ImageDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.batch_size)
  return batch_size_;
}
inline void ImageDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.batch_size)
}

// optional uint32 rand_skip = 7 [default = 0];
inline bool ImageDataParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageDataParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImageDataParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImageDataParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
inline ::google::protobuf::uint32 ImageDataParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.rand_skip)
  return rand_skip_;
}
inline void ImageDataParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.rand_skip)
}

// optional bool shuffle = 8 [default = false];
inline bool ImageDataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImageDataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImageDataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImageDataParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
inline bool ImageDataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.shuffle)
  return shuffle_;
}
inline void ImageDataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.shuffle)
}

// optional uint32 new_height = 9 [default = 0];
inline bool ImageDataParameter::has_new_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ImageDataParameter::set_has_new_height() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ImageDataParameter::clear_has_new_height() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ImageDataParameter::clear_new_height() {
  new_height_ = 0u;
  clear_has_new_height();
}
inline ::google::protobuf::uint32 ImageDataParameter::new_height() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.new_height)
  return new_height_;
}
inline void ImageDataParameter::set_new_height(::google::protobuf::uint32 value) {
  set_has_new_height();
  new_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.new_height)
}

// optional uint32 new_width = 10 [default = 0];
inline bool ImageDataParameter::has_new_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ImageDataParameter::set_has_new_width() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ImageDataParameter::clear_has_new_width() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ImageDataParameter::clear_new_width() {
  new_width_ = 0u;
  clear_has_new_width();
}
inline ::google::protobuf::uint32 ImageDataParameter::new_width() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.new_width)
  return new_width_;
}
inline void ImageDataParameter::set_new_width(::google::protobuf::uint32 value) {
  set_has_new_width();
  new_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.new_width)
}

// optional bool is_color = 11 [default = true];
inline bool ImageDataParameter::has_is_color() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ImageDataParameter::set_has_is_color() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ImageDataParameter::clear_has_is_color() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ImageDataParameter::clear_is_color() {
  is_color_ = true;
  clear_has_is_color();
}
inline bool ImageDataParameter::is_color() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.is_color)
  return is_color_;
}
inline void ImageDataParameter::set_is_color(bool value) {
  set_has_is_color();
  is_color_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.is_color)
}

// optional float scale = 2 [default = 1];
inline bool ImageDataParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ImageDataParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ImageDataParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ImageDataParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float ImageDataParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.scale)
  return scale_;
}
inline void ImageDataParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.scale)
}

// optional string mean_file = 3;
inline bool ImageDataParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ImageDataParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ImageDataParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ImageDataParameter::clear_mean_file() {
  if (mean_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_->clear();
  }
  clear_has_mean_file();
}
inline const ::std::string& ImageDataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.mean_file)
  return *mean_file_;
}
inline void ImageDataParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.mean_file)
}
inline void ImageDataParameter::set_mean_file(const char* value) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataParameter.mean_file)
}
inline void ImageDataParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataParameter.mean_file)
}
inline ::std::string* ImageDataParameter::mutable_mean_file() {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataParameter.mean_file)
  return mean_file_;
}
inline ::std::string* ImageDataParameter::release_mean_file() {
  clear_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mean_file_;
    mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ImageDataParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mean_file_;
  }
  if (mean_file) {
    set_has_mean_file();
    mean_file_ = mean_file;
  } else {
    clear_has_mean_file();
    mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataParameter.mean_file)
}

// optional uint32 crop_size = 5 [default = 0];
inline bool ImageDataParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ImageDataParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ImageDataParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ImageDataParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
inline ::google::protobuf::uint32 ImageDataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.crop_size)
  return crop_size_;
}
inline void ImageDataParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
inline bool ImageDataParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ImageDataParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ImageDataParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ImageDataParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool ImageDataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.mirror)
  return mirror_;
}
inline void ImageDataParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.mirror)
}

// optional string root_folder = 12 [default = ""];
inline bool ImageDataParameter::has_root_folder() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ImageDataParameter::set_has_root_folder() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ImageDataParameter::clear_has_root_folder() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ImageDataParameter::clear_root_folder() {
  if (root_folder_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    root_folder_->clear();
  }
  clear_has_root_folder();
}
inline const ::std::string& ImageDataParameter::root_folder() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.root_folder)
  return *root_folder_;
}
inline void ImageDataParameter::set_root_folder(const ::std::string& value) {
  set_has_root_folder();
  if (root_folder_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    root_folder_ = new ::std::string;
  }
  root_folder_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.root_folder)
}
inline void ImageDataParameter::set_root_folder(const char* value) {
  set_has_root_folder();
  if (root_folder_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    root_folder_ = new ::std::string;
  }
  root_folder_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataParameter.root_folder)
}
inline void ImageDataParameter::set_root_folder(const char* value, size_t size) {
  set_has_root_folder();
  if (root_folder_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    root_folder_ = new ::std::string;
  }
  root_folder_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataParameter.root_folder)
}
inline ::std::string* ImageDataParameter::mutable_root_folder() {
  set_has_root_folder();
  if (root_folder_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    root_folder_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataParameter.root_folder)
  return root_folder_;
}
inline ::std::string* ImageDataParameter::release_root_folder() {
  clear_has_root_folder();
  if (root_folder_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = root_folder_;
    root_folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ImageDataParameter::set_allocated_root_folder(::std::string* root_folder) {
  if (root_folder_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete root_folder_;
  }
  if (root_folder) {
    set_has_root_folder();
    root_folder_ = root_folder;
  } else {
    clear_has_root_folder();
    root_folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataParameter.root_folder)
}

// -------------------------------------------------------------------

// InfogainLossParameter

// optional string source = 1;
inline bool InfogainLossParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InfogainLossParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InfogainLossParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InfogainLossParameter::clear_source() {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& InfogainLossParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.InfogainLossParameter.source)
  return *source_;
}
inline void InfogainLossParameter::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.InfogainLossParameter.source)
}
inline void InfogainLossParameter::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.InfogainLossParameter.source)
}
inline void InfogainLossParameter::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.InfogainLossParameter.source)
}
inline ::std::string* InfogainLossParameter::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe.InfogainLossParameter.source)
  return source_;
}
inline ::std::string* InfogainLossParameter::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void InfogainLossParameter::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.InfogainLossParameter.source)
}

// -------------------------------------------------------------------

// InnerProductParameter

// optional uint32 num_output = 1;
inline bool InnerProductParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InnerProductParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InnerProductParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InnerProductParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 InnerProductParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.num_output)
  return num_output_;
}
inline void InnerProductParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
inline bool InnerProductParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InnerProductParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InnerProductParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InnerProductParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
inline bool InnerProductParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.bias_term)
  return bias_term_;
}
inline void InnerProductParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.bias_term)
}

// optional .caffe.FillerParameter weight_filler = 3;
inline bool InnerProductParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InnerProductParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InnerProductParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InnerProductParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& InnerProductParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
inline ::caffe::FillerParameter* InnerProductParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) weight_filler_ = new ::caffe::FillerParameter;
  // @@protoc_insertion_point(field_mutable:caffe.InnerProductParameter.weight_filler)
  return weight_filler_;
}
inline ::caffe::FillerParameter* InnerProductParameter::release_weight_filler() {
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void InnerProductParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.InnerProductParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 4;
inline bool InnerProductParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InnerProductParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InnerProductParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InnerProductParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& InnerProductParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
inline ::caffe::FillerParameter* InnerProductParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) bias_filler_ = new ::caffe::FillerParameter;
  // @@protoc_insertion_point(field_mutable:caffe.InnerProductParameter.bias_filler)
  return bias_filler_;
}
inline ::caffe::FillerParameter* InnerProductParameter::release_bias_filler() {
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void InnerProductParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.InnerProductParameter.bias_filler)
}

// optional int32 axis = 5 [default = 1];
inline bool InnerProductParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InnerProductParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InnerProductParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InnerProductParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 InnerProductParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.axis)
  return axis_;
}
inline void InnerProductParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.axis)
}

// optional bool transpose = 6 [default = false];
inline bool InnerProductParameter::has_transpose() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InnerProductParameter::set_has_transpose() {
  _has_bits_[0] |= 0x00000020u;
}
inline void InnerProductParameter::clear_has_transpose() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void InnerProductParameter::clear_transpose() {
  transpose_ = false;
  clear_has_transpose();
}
inline bool InnerProductParameter::transpose() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.transpose)
  return transpose_;
}
inline void InnerProductParameter::set_transpose(bool value) {
  set_has_transpose();
  transpose_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.transpose)
}

// -------------------------------------------------------------------

// InputParameter

// repeated .caffe.BlobShape shape = 1;
inline int InputParameter::shape_size() const {
  return shape_.size();
}
inline void InputParameter::clear_shape() {
  shape_.Clear();
}
inline const ::caffe::BlobShape& InputParameter::shape(int index) const {
  // @@protoc_insertion_point(field_get:caffe.InputParameter.shape)
  return shape_.Get(index);
}
inline ::caffe::BlobShape* InputParameter::mutable_shape(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.InputParameter.shape)
  return shape_.Mutable(index);
}
inline ::caffe::BlobShape* InputParameter::add_shape() {
  // @@protoc_insertion_point(field_add:caffe.InputParameter.shape)
  return shape_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
InputParameter::shape() const {
  // @@protoc_insertion_point(field_list:caffe.InputParameter.shape)
  return shape_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
InputParameter::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:caffe.InputParameter.shape)
  return &shape_;
}

// -------------------------------------------------------------------

// LogParameter

// optional float base = 1 [default = -1];
inline bool LogParameter::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogParameter::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogParameter::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogParameter::clear_base() {
  base_ = -1;
  clear_has_base();
}
inline float LogParameter::base() const {
  // @@protoc_insertion_point(field_get:caffe.LogParameter.base)
  return base_;
}
inline void LogParameter::set_base(float value) {
  set_has_base();
  base_ = value;
  // @@protoc_insertion_point(field_set:caffe.LogParameter.base)
}

// optional float scale = 2 [default = 1];
inline bool LogParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float LogParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.LogParameter.scale)
  return scale_;
}
inline void LogParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.LogParameter.scale)
}

// optional float shift = 3 [default = 0];
inline bool LogParameter::has_shift() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogParameter::set_has_shift() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogParameter::clear_has_shift() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogParameter::clear_shift() {
  shift_ = 0;
  clear_has_shift();
}
inline float LogParameter::shift() const {
  // @@protoc_insertion_point(field_get:caffe.LogParameter.shift)
  return shift_;
}
inline void LogParameter::set_shift(float value) {
  set_has_shift();
  shift_ = value;
  // @@protoc_insertion_point(field_set:caffe.LogParameter.shift)
}

// -------------------------------------------------------------------

// LRNParameter

// optional uint32 local_size = 1 [default = 5];
inline bool LRNParameter::has_local_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LRNParameter::set_has_local_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LRNParameter::clear_has_local_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LRNParameter::clear_local_size() {
  local_size_ = 5u;
  clear_has_local_size();
}
inline ::google::protobuf::uint32 LRNParameter::local_size() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.local_size)
  return local_size_;
}
inline void LRNParameter::set_local_size(::google::protobuf::uint32 value) {
  set_has_local_size();
  local_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.local_size)
}

// optional float alpha = 2 [default = 1];
inline bool LRNParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LRNParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LRNParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LRNParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
inline float LRNParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.alpha)
  return alpha_;
}
inline void LRNParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.alpha)
}

// optional float beta = 3 [default = 0.75];
inline bool LRNParameter::has_beta() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LRNParameter::set_has_beta() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LRNParameter::clear_has_beta() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LRNParameter::clear_beta() {
  beta_ = 0.75f;
  clear_has_beta();
}
inline float LRNParameter::beta() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.beta)
  return beta_;
}
inline void LRNParameter::set_beta(float value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.beta)
}

// optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
inline bool LRNParameter::has_norm_region() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LRNParameter::set_has_norm_region() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LRNParameter::clear_has_norm_region() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LRNParameter::clear_norm_region() {
  norm_region_ = 0;
  clear_has_norm_region();
}
inline ::caffe::LRNParameter_NormRegion LRNParameter::norm_region() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.norm_region)
  return static_cast< ::caffe::LRNParameter_NormRegion >(norm_region_);
}
inline void LRNParameter::set_norm_region(::caffe::LRNParameter_NormRegion value) {
  assert(::caffe::LRNParameter_NormRegion_IsValid(value));
  set_has_norm_region();
  norm_region_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.norm_region)
}

// optional float k = 5 [default = 1];
inline bool LRNParameter::has_k() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LRNParameter::set_has_k() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LRNParameter::clear_has_k() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LRNParameter::clear_k() {
  k_ = 1;
  clear_has_k();
}
inline float LRNParameter::k() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.k)
  return k_;
}
inline void LRNParameter::set_k(float value) {
  set_has_k();
  k_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.k)
}

// optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
inline bool LRNParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LRNParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LRNParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LRNParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::LRNParameter_Engine LRNParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.engine)
  return static_cast< ::caffe::LRNParameter_Engine >(engine_);
}
inline void LRNParameter::set_engine(::caffe::LRNParameter_Engine value) {
  assert(::caffe::LRNParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.engine)
}

// -------------------------------------------------------------------

// MemoryDataParameter

// optional uint32 batch_size = 1;
inline bool MemoryDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemoryDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MemoryDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MemoryDataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 MemoryDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.batch_size)
  return batch_size_;
}
inline void MemoryDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.batch_size)
}

// optional uint32 channels = 2;
inline bool MemoryDataParameter::has_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemoryDataParameter::set_has_channels() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MemoryDataParameter::clear_has_channels() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MemoryDataParameter::clear_channels() {
  channels_ = 0u;
  clear_has_channels();
}
inline ::google::protobuf::uint32 MemoryDataParameter::channels() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.channels)
  return channels_;
}
inline void MemoryDataParameter::set_channels(::google::protobuf::uint32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.channels)
}

// optional uint32 height = 3;
inline bool MemoryDataParameter::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MemoryDataParameter::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MemoryDataParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MemoryDataParameter::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 MemoryDataParameter::height() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.height)
  return height_;
}
inline void MemoryDataParameter::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.height)
}

// optional uint32 width = 4;
inline bool MemoryDataParameter::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MemoryDataParameter::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MemoryDataParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MemoryDataParameter::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 MemoryDataParameter::width() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.width)
  return width_;
}
inline void MemoryDataParameter::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.width)
}

// -------------------------------------------------------------------

// MultiBoxLossParameter

// optional .caffe.MultiBoxLossParameter.LocLossType loc_loss_type = 1 [default = SMOOTH_L1];
inline bool MultiBoxLossParameter::has_loc_loss_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MultiBoxLossParameter::set_has_loc_loss_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MultiBoxLossParameter::clear_has_loc_loss_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MultiBoxLossParameter::clear_loc_loss_type() {
  loc_loss_type_ = 1;
  clear_has_loc_loss_type();
}
inline ::caffe::MultiBoxLossParameter_LocLossType MultiBoxLossParameter::loc_loss_type() const {
  // @@protoc_insertion_point(field_get:caffe.MultiBoxLossParameter.loc_loss_type)
  return static_cast< ::caffe::MultiBoxLossParameter_LocLossType >(loc_loss_type_);
}
inline void MultiBoxLossParameter::set_loc_loss_type(::caffe::MultiBoxLossParameter_LocLossType value) {
  assert(::caffe::MultiBoxLossParameter_LocLossType_IsValid(value));
  set_has_loc_loss_type();
  loc_loss_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiBoxLossParameter.loc_loss_type)
}

// optional .caffe.MultiBoxLossParameter.ConfLossType conf_loss_type = 2 [default = SOFTMAX];
inline bool MultiBoxLossParameter::has_conf_loss_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MultiBoxLossParameter::set_has_conf_loss_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MultiBoxLossParameter::clear_has_conf_loss_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MultiBoxLossParameter::clear_conf_loss_type() {
  conf_loss_type_ = 0;
  clear_has_conf_loss_type();
}
inline ::caffe::MultiBoxLossParameter_ConfLossType MultiBoxLossParameter::conf_loss_type() const {
  // @@protoc_insertion_point(field_get:caffe.MultiBoxLossParameter.conf_loss_type)
  return static_cast< ::caffe::MultiBoxLossParameter_ConfLossType >(conf_loss_type_);
}
inline void MultiBoxLossParameter::set_conf_loss_type(::caffe::MultiBoxLossParameter_ConfLossType value) {
  assert(::caffe::MultiBoxLossParameter_ConfLossType_IsValid(value));
  set_has_conf_loss_type();
  conf_loss_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiBoxLossParameter.conf_loss_type)
}

// optional float loc_weight = 3 [default = 1];
inline bool MultiBoxLossParameter::has_loc_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MultiBoxLossParameter::set_has_loc_weight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MultiBoxLossParameter::clear_has_loc_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MultiBoxLossParameter::clear_loc_weight() {
  loc_weight_ = 1;
  clear_has_loc_weight();
}
inline float MultiBoxLossParameter::loc_weight() const {
  // @@protoc_insertion_point(field_get:caffe.MultiBoxLossParameter.loc_weight)
  return loc_weight_;
}
inline void MultiBoxLossParameter::set_loc_weight(float value) {
  set_has_loc_weight();
  loc_weight_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiBoxLossParameter.loc_weight)
}

// optional uint32 num_classes = 4;
inline bool MultiBoxLossParameter::has_num_classes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MultiBoxLossParameter::set_has_num_classes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MultiBoxLossParameter::clear_has_num_classes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MultiBoxLossParameter::clear_num_classes() {
  num_classes_ = 0u;
  clear_has_num_classes();
}
inline ::google::protobuf::uint32 MultiBoxLossParameter::num_classes() const {
  // @@protoc_insertion_point(field_get:caffe.MultiBoxLossParameter.num_classes)
  return num_classes_;
}
inline void MultiBoxLossParameter::set_num_classes(::google::protobuf::uint32 value) {
  set_has_num_classes();
  num_classes_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiBoxLossParameter.num_classes)
}

// optional bool share_location = 5 [default = true];
inline bool MultiBoxLossParameter::has_share_location() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MultiBoxLossParameter::set_has_share_location() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MultiBoxLossParameter::clear_has_share_location() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MultiBoxLossParameter::clear_share_location() {
  share_location_ = true;
  clear_has_share_location();
}
inline bool MultiBoxLossParameter::share_location() const {
  // @@protoc_insertion_point(field_get:caffe.MultiBoxLossParameter.share_location)
  return share_location_;
}
inline void MultiBoxLossParameter::set_share_location(bool value) {
  set_has_share_location();
  share_location_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiBoxLossParameter.share_location)
}

// optional .caffe.MultiBoxLossParameter.MatchType match_type = 6 [default = PER_PREDICTION];
inline bool MultiBoxLossParameter::has_match_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MultiBoxLossParameter::set_has_match_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MultiBoxLossParameter::clear_has_match_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MultiBoxLossParameter::clear_match_type() {
  match_type_ = 1;
  clear_has_match_type();
}
inline ::caffe::MultiBoxLossParameter_MatchType MultiBoxLossParameter::match_type() const {
  // @@protoc_insertion_point(field_get:caffe.MultiBoxLossParameter.match_type)
  return static_cast< ::caffe::MultiBoxLossParameter_MatchType >(match_type_);
}
inline void MultiBoxLossParameter::set_match_type(::caffe::MultiBoxLossParameter_MatchType value) {
  assert(::caffe::MultiBoxLossParameter_MatchType_IsValid(value));
  set_has_match_type();
  match_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiBoxLossParameter.match_type)
}

// optional float overlap_threshold = 7 [default = 0.5];
inline bool MultiBoxLossParameter::has_overlap_threshold() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MultiBoxLossParameter::set_has_overlap_threshold() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MultiBoxLossParameter::clear_has_overlap_threshold() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MultiBoxLossParameter::clear_overlap_threshold() {
  overlap_threshold_ = 0.5f;
  clear_has_overlap_threshold();
}
inline float MultiBoxLossParameter::overlap_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.MultiBoxLossParameter.overlap_threshold)
  return overlap_threshold_;
}
inline void MultiBoxLossParameter::set_overlap_threshold(float value) {
  set_has_overlap_threshold();
  overlap_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiBoxLossParameter.overlap_threshold)
}

// optional bool use_prior_for_matching = 8 [default = true];
inline bool MultiBoxLossParameter::has_use_prior_for_matching() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MultiBoxLossParameter::set_has_use_prior_for_matching() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MultiBoxLossParameter::clear_has_use_prior_for_matching() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MultiBoxLossParameter::clear_use_prior_for_matching() {
  use_prior_for_matching_ = true;
  clear_has_use_prior_for_matching();
}
inline bool MultiBoxLossParameter::use_prior_for_matching() const {
  // @@protoc_insertion_point(field_get:caffe.MultiBoxLossParameter.use_prior_for_matching)
  return use_prior_for_matching_;
}
inline void MultiBoxLossParameter::set_use_prior_for_matching(bool value) {
  set_has_use_prior_for_matching();
  use_prior_for_matching_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiBoxLossParameter.use_prior_for_matching)
}

// optional uint32 background_label_id = 9 [default = 0];
inline bool MultiBoxLossParameter::has_background_label_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MultiBoxLossParameter::set_has_background_label_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MultiBoxLossParameter::clear_has_background_label_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MultiBoxLossParameter::clear_background_label_id() {
  background_label_id_ = 0u;
  clear_has_background_label_id();
}
inline ::google::protobuf::uint32 MultiBoxLossParameter::background_label_id() const {
  // @@protoc_insertion_point(field_get:caffe.MultiBoxLossParameter.background_label_id)
  return background_label_id_;
}
inline void MultiBoxLossParameter::set_background_label_id(::google::protobuf::uint32 value) {
  set_has_background_label_id();
  background_label_id_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiBoxLossParameter.background_label_id)
}

// optional bool use_difficult_gt = 10 [default = true];
inline bool MultiBoxLossParameter::has_use_difficult_gt() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MultiBoxLossParameter::set_has_use_difficult_gt() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MultiBoxLossParameter::clear_has_use_difficult_gt() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MultiBoxLossParameter::clear_use_difficult_gt() {
  use_difficult_gt_ = true;
  clear_has_use_difficult_gt();
}
inline bool MultiBoxLossParameter::use_difficult_gt() const {
  // @@protoc_insertion_point(field_get:caffe.MultiBoxLossParameter.use_difficult_gt)
  return use_difficult_gt_;
}
inline void MultiBoxLossParameter::set_use_difficult_gt(bool value) {
  set_has_use_difficult_gt();
  use_difficult_gt_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiBoxLossParameter.use_difficult_gt)
}

// optional bool do_neg_mining = 11;
inline bool MultiBoxLossParameter::has_do_neg_mining() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MultiBoxLossParameter::set_has_do_neg_mining() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MultiBoxLossParameter::clear_has_do_neg_mining() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MultiBoxLossParameter::clear_do_neg_mining() {
  do_neg_mining_ = false;
  clear_has_do_neg_mining();
}
inline bool MultiBoxLossParameter::do_neg_mining() const {
  // @@protoc_insertion_point(field_get:caffe.MultiBoxLossParameter.do_neg_mining)
  return do_neg_mining_;
}
inline void MultiBoxLossParameter::set_do_neg_mining(bool value) {
  set_has_do_neg_mining();
  do_neg_mining_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiBoxLossParameter.do_neg_mining)
}

// optional float neg_pos_ratio = 12 [default = 3];
inline bool MultiBoxLossParameter::has_neg_pos_ratio() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MultiBoxLossParameter::set_has_neg_pos_ratio() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MultiBoxLossParameter::clear_has_neg_pos_ratio() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MultiBoxLossParameter::clear_neg_pos_ratio() {
  neg_pos_ratio_ = 3;
  clear_has_neg_pos_ratio();
}
inline float MultiBoxLossParameter::neg_pos_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.MultiBoxLossParameter.neg_pos_ratio)
  return neg_pos_ratio_;
}
inline void MultiBoxLossParameter::set_neg_pos_ratio(float value) {
  set_has_neg_pos_ratio();
  neg_pos_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiBoxLossParameter.neg_pos_ratio)
}

// optional float neg_overlap = 13 [default = 0.5];
inline bool MultiBoxLossParameter::has_neg_overlap() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MultiBoxLossParameter::set_has_neg_overlap() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MultiBoxLossParameter::clear_has_neg_overlap() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MultiBoxLossParameter::clear_neg_overlap() {
  neg_overlap_ = 0.5f;
  clear_has_neg_overlap();
}
inline float MultiBoxLossParameter::neg_overlap() const {
  // @@protoc_insertion_point(field_get:caffe.MultiBoxLossParameter.neg_overlap)
  return neg_overlap_;
}
inline void MultiBoxLossParameter::set_neg_overlap(float value) {
  set_has_neg_overlap();
  neg_overlap_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiBoxLossParameter.neg_overlap)
}

// optional .caffe.PriorBoxParameter.CodeType code_type = 14 [default = CORNER];
inline bool MultiBoxLossParameter::has_code_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MultiBoxLossParameter::set_has_code_type() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MultiBoxLossParameter::clear_has_code_type() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MultiBoxLossParameter::clear_code_type() {
  code_type_ = 1;
  clear_has_code_type();
}
inline ::caffe::PriorBoxParameter_CodeType MultiBoxLossParameter::code_type() const {
  // @@protoc_insertion_point(field_get:caffe.MultiBoxLossParameter.code_type)
  return static_cast< ::caffe::PriorBoxParameter_CodeType >(code_type_);
}
inline void MultiBoxLossParameter::set_code_type(::caffe::PriorBoxParameter_CodeType value) {
  assert(::caffe::PriorBoxParameter_CodeType_IsValid(value));
  set_has_code_type();
  code_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiBoxLossParameter.code_type)
}

// optional bool encode_variance_in_target = 16 [default = false];
inline bool MultiBoxLossParameter::has_encode_variance_in_target() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MultiBoxLossParameter::set_has_encode_variance_in_target() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MultiBoxLossParameter::clear_has_encode_variance_in_target() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MultiBoxLossParameter::clear_encode_variance_in_target() {
  encode_variance_in_target_ = false;
  clear_has_encode_variance_in_target();
}
inline bool MultiBoxLossParameter::encode_variance_in_target() const {
  // @@protoc_insertion_point(field_get:caffe.MultiBoxLossParameter.encode_variance_in_target)
  return encode_variance_in_target_;
}
inline void MultiBoxLossParameter::set_encode_variance_in_target(bool value) {
  set_has_encode_variance_in_target();
  encode_variance_in_target_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiBoxLossParameter.encode_variance_in_target)
}

// optional bool map_object_to_agnostic = 17 [default = false];
inline bool MultiBoxLossParameter::has_map_object_to_agnostic() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MultiBoxLossParameter::set_has_map_object_to_agnostic() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MultiBoxLossParameter::clear_has_map_object_to_agnostic() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MultiBoxLossParameter::clear_map_object_to_agnostic() {
  map_object_to_agnostic_ = false;
  clear_has_map_object_to_agnostic();
}
inline bool MultiBoxLossParameter::map_object_to_agnostic() const {
  // @@protoc_insertion_point(field_get:caffe.MultiBoxLossParameter.map_object_to_agnostic)
  return map_object_to_agnostic_;
}
inline void MultiBoxLossParameter::set_map_object_to_agnostic(bool value) {
  set_has_map_object_to_agnostic();
  map_object_to_agnostic_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiBoxLossParameter.map_object_to_agnostic)
}

// optional bool ignore_cross_boundary_bbox = 18 [default = false];
inline bool MultiBoxLossParameter::has_ignore_cross_boundary_bbox() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MultiBoxLossParameter::set_has_ignore_cross_boundary_bbox() {
  _has_bits_[0] |= 0x00010000u;
}
inline void MultiBoxLossParameter::clear_has_ignore_cross_boundary_bbox() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void MultiBoxLossParameter::clear_ignore_cross_boundary_bbox() {
  ignore_cross_boundary_bbox_ = false;
  clear_has_ignore_cross_boundary_bbox();
}
inline bool MultiBoxLossParameter::ignore_cross_boundary_bbox() const {
  // @@protoc_insertion_point(field_get:caffe.MultiBoxLossParameter.ignore_cross_boundary_bbox)
  return ignore_cross_boundary_bbox_;
}
inline void MultiBoxLossParameter::set_ignore_cross_boundary_bbox(bool value) {
  set_has_ignore_cross_boundary_bbox();
  ignore_cross_boundary_bbox_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiBoxLossParameter.ignore_cross_boundary_bbox)
}

// optional bool bp_inside = 19 [default = false];
inline bool MultiBoxLossParameter::has_bp_inside() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void MultiBoxLossParameter::set_has_bp_inside() {
  _has_bits_[0] |= 0x00020000u;
}
inline void MultiBoxLossParameter::clear_has_bp_inside() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void MultiBoxLossParameter::clear_bp_inside() {
  bp_inside_ = false;
  clear_has_bp_inside();
}
inline bool MultiBoxLossParameter::bp_inside() const {
  // @@protoc_insertion_point(field_get:caffe.MultiBoxLossParameter.bp_inside)
  return bp_inside_;
}
inline void MultiBoxLossParameter::set_bp_inside(bool value) {
  set_has_bp_inside();
  bp_inside_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiBoxLossParameter.bp_inside)
}

// optional .caffe.MultiBoxLossParameter.MiningType mining_type = 20 [default = MAX_NEGATIVE];
inline bool MultiBoxLossParameter::has_mining_type() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void MultiBoxLossParameter::set_has_mining_type() {
  _has_bits_[0] |= 0x00040000u;
}
inline void MultiBoxLossParameter::clear_has_mining_type() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void MultiBoxLossParameter::clear_mining_type() {
  mining_type_ = 1;
  clear_has_mining_type();
}
inline ::caffe::MultiBoxLossParameter_MiningType MultiBoxLossParameter::mining_type() const {
  // @@protoc_insertion_point(field_get:caffe.MultiBoxLossParameter.mining_type)
  return static_cast< ::caffe::MultiBoxLossParameter_MiningType >(mining_type_);
}
inline void MultiBoxLossParameter::set_mining_type(::caffe::MultiBoxLossParameter_MiningType value) {
  assert(::caffe::MultiBoxLossParameter_MiningType_IsValid(value));
  set_has_mining_type();
  mining_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiBoxLossParameter.mining_type)
}

// optional .caffe.NonMaximumSuppressionParameter nms_param = 21;
inline bool MultiBoxLossParameter::has_nms_param() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void MultiBoxLossParameter::set_has_nms_param() {
  _has_bits_[0] |= 0x00080000u;
}
inline void MultiBoxLossParameter::clear_has_nms_param() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void MultiBoxLossParameter::clear_nms_param() {
  if (nms_param_ != NULL) nms_param_->::caffe::NonMaximumSuppressionParameter::Clear();
  clear_has_nms_param();
}
inline const ::caffe::NonMaximumSuppressionParameter& MultiBoxLossParameter::nms_param() const {
  // @@protoc_insertion_point(field_get:caffe.MultiBoxLossParameter.nms_param)
  return nms_param_ != NULL ? *nms_param_ : *default_instance_->nms_param_;
}
inline ::caffe::NonMaximumSuppressionParameter* MultiBoxLossParameter::mutable_nms_param() {
  set_has_nms_param();
  if (nms_param_ == NULL) nms_param_ = new ::caffe::NonMaximumSuppressionParameter;
  // @@protoc_insertion_point(field_mutable:caffe.MultiBoxLossParameter.nms_param)
  return nms_param_;
}
inline ::caffe::NonMaximumSuppressionParameter* MultiBoxLossParameter::release_nms_param() {
  clear_has_nms_param();
  ::caffe::NonMaximumSuppressionParameter* temp = nms_param_;
  nms_param_ = NULL;
  return temp;
}
inline void MultiBoxLossParameter::set_allocated_nms_param(::caffe::NonMaximumSuppressionParameter* nms_param) {
  delete nms_param_;
  nms_param_ = nms_param;
  if (nms_param) {
    set_has_nms_param();
  } else {
    clear_has_nms_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.MultiBoxLossParameter.nms_param)
}

// optional int32 sample_size = 22 [default = 64];
inline bool MultiBoxLossParameter::has_sample_size() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void MultiBoxLossParameter::set_has_sample_size() {
  _has_bits_[0] |= 0x00100000u;
}
inline void MultiBoxLossParameter::clear_has_sample_size() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void MultiBoxLossParameter::clear_sample_size() {
  sample_size_ = 64;
  clear_has_sample_size();
}
inline ::google::protobuf::int32 MultiBoxLossParameter::sample_size() const {
  // @@protoc_insertion_point(field_get:caffe.MultiBoxLossParameter.sample_size)
  return sample_size_;
}
inline void MultiBoxLossParameter::set_sample_size(::google::protobuf::int32 value) {
  set_has_sample_size();
  sample_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiBoxLossParameter.sample_size)
}

// optional bool use_prior_for_nms = 23 [default = false];
inline bool MultiBoxLossParameter::has_use_prior_for_nms() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void MultiBoxLossParameter::set_has_use_prior_for_nms() {
  _has_bits_[0] |= 0x00200000u;
}
inline void MultiBoxLossParameter::clear_has_use_prior_for_nms() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void MultiBoxLossParameter::clear_use_prior_for_nms() {
  use_prior_for_nms_ = false;
  clear_has_use_prior_for_nms();
}
inline bool MultiBoxLossParameter::use_prior_for_nms() const {
  // @@protoc_insertion_point(field_get:caffe.MultiBoxLossParameter.use_prior_for_nms)
  return use_prior_for_nms_;
}
inline void MultiBoxLossParameter::set_use_prior_for_nms(bool value) {
  set_has_use_prior_for_nms();
  use_prior_for_nms_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiBoxLossParameter.use_prior_for_nms)
}

// -------------------------------------------------------------------

// NonMaximumSuppressionParameter

// optional float nms_threshold = 1 [default = 0.3];
inline bool NonMaximumSuppressionParameter::has_nms_threshold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NonMaximumSuppressionParameter::set_has_nms_threshold() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NonMaximumSuppressionParameter::clear_has_nms_threshold() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NonMaximumSuppressionParameter::clear_nms_threshold() {
  nms_threshold_ = 0.3f;
  clear_has_nms_threshold();
}
inline float NonMaximumSuppressionParameter::nms_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.NonMaximumSuppressionParameter.nms_threshold)
  return nms_threshold_;
}
inline void NonMaximumSuppressionParameter::set_nms_threshold(float value) {
  set_has_nms_threshold();
  nms_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.NonMaximumSuppressionParameter.nms_threshold)
}

// optional int32 top_k = 2;
inline bool NonMaximumSuppressionParameter::has_top_k() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NonMaximumSuppressionParameter::set_has_top_k() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NonMaximumSuppressionParameter::clear_has_top_k() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NonMaximumSuppressionParameter::clear_top_k() {
  top_k_ = 0;
  clear_has_top_k();
}
inline ::google::protobuf::int32 NonMaximumSuppressionParameter::top_k() const {
  // @@protoc_insertion_point(field_get:caffe.NonMaximumSuppressionParameter.top_k)
  return top_k_;
}
inline void NonMaximumSuppressionParameter::set_top_k(::google::protobuf::int32 value) {
  set_has_top_k();
  top_k_ = value;
  // @@protoc_insertion_point(field_set:caffe.NonMaximumSuppressionParameter.top_k)
}

// optional float eta = 3 [default = 1];
inline bool NonMaximumSuppressionParameter::has_eta() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NonMaximumSuppressionParameter::set_has_eta() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NonMaximumSuppressionParameter::clear_has_eta() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NonMaximumSuppressionParameter::clear_eta() {
  eta_ = 1;
  clear_has_eta();
}
inline float NonMaximumSuppressionParameter::eta() const {
  // @@protoc_insertion_point(field_get:caffe.NonMaximumSuppressionParameter.eta)
  return eta_;
}
inline void NonMaximumSuppressionParameter::set_eta(float value) {
  set_has_eta();
  eta_ = value;
  // @@protoc_insertion_point(field_set:caffe.NonMaximumSuppressionParameter.eta)
}

// -------------------------------------------------------------------

// MVNParameter

// optional bool normalize_variance = 1 [default = true];
inline bool MVNParameter::has_normalize_variance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MVNParameter::set_has_normalize_variance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MVNParameter::clear_has_normalize_variance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MVNParameter::clear_normalize_variance() {
  normalize_variance_ = true;
  clear_has_normalize_variance();
}
inline bool MVNParameter::normalize_variance() const {
  // @@protoc_insertion_point(field_get:caffe.MVNParameter.normalize_variance)
  return normalize_variance_;
}
inline void MVNParameter::set_normalize_variance(bool value) {
  set_has_normalize_variance();
  normalize_variance_ = value;
  // @@protoc_insertion_point(field_set:caffe.MVNParameter.normalize_variance)
}

// optional bool across_channels = 2 [default = false];
inline bool MVNParameter::has_across_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MVNParameter::set_has_across_channels() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MVNParameter::clear_has_across_channels() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MVNParameter::clear_across_channels() {
  across_channels_ = false;
  clear_has_across_channels();
}
inline bool MVNParameter::across_channels() const {
  // @@protoc_insertion_point(field_get:caffe.MVNParameter.across_channels)
  return across_channels_;
}
inline void MVNParameter::set_across_channels(bool value) {
  set_has_across_channels();
  across_channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.MVNParameter.across_channels)
}

// optional float eps = 3 [default = 1e-09];
inline bool MVNParameter::has_eps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MVNParameter::set_has_eps() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MVNParameter::clear_has_eps() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MVNParameter::clear_eps() {
  eps_ = 1e-09f;
  clear_has_eps();
}
inline float MVNParameter::eps() const {
  // @@protoc_insertion_point(field_get:caffe.MVNParameter.eps)
  return eps_;
}
inline void MVNParameter::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:caffe.MVNParameter.eps)
}

// -------------------------------------------------------------------

// NormalizeParameter

// optional bool across_spatial = 1 [default = true];
inline bool NormalizeParameter::has_across_spatial() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NormalizeParameter::set_has_across_spatial() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NormalizeParameter::clear_has_across_spatial() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NormalizeParameter::clear_across_spatial() {
  across_spatial_ = true;
  clear_has_across_spatial();
}
inline bool NormalizeParameter::across_spatial() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizeParameter.across_spatial)
  return across_spatial_;
}
inline void NormalizeParameter::set_across_spatial(bool value) {
  set_has_across_spatial();
  across_spatial_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizeParameter.across_spatial)
}

// optional .caffe.FillerParameter scale_filler = 2;
inline bool NormalizeParameter::has_scale_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NormalizeParameter::set_has_scale_filler() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NormalizeParameter::clear_has_scale_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NormalizeParameter::clear_scale_filler() {
  if (scale_filler_ != NULL) scale_filler_->::caffe::FillerParameter::Clear();
  clear_has_scale_filler();
}
inline const ::caffe::FillerParameter& NormalizeParameter::scale_filler() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizeParameter.scale_filler)
  return scale_filler_ != NULL ? *scale_filler_ : *default_instance_->scale_filler_;
}
inline ::caffe::FillerParameter* NormalizeParameter::mutable_scale_filler() {
  set_has_scale_filler();
  if (scale_filler_ == NULL) scale_filler_ = new ::caffe::FillerParameter;
  // @@protoc_insertion_point(field_mutable:caffe.NormalizeParameter.scale_filler)
  return scale_filler_;
}
inline ::caffe::FillerParameter* NormalizeParameter::release_scale_filler() {
  clear_has_scale_filler();
  ::caffe::FillerParameter* temp = scale_filler_;
  scale_filler_ = NULL;
  return temp;
}
inline void NormalizeParameter::set_allocated_scale_filler(::caffe::FillerParameter* scale_filler) {
  delete scale_filler_;
  scale_filler_ = scale_filler;
  if (scale_filler) {
    set_has_scale_filler();
  } else {
    clear_has_scale_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.NormalizeParameter.scale_filler)
}

// optional bool channel_shared = 3 [default = true];
inline bool NormalizeParameter::has_channel_shared() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NormalizeParameter::set_has_channel_shared() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NormalizeParameter::clear_has_channel_shared() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NormalizeParameter::clear_channel_shared() {
  channel_shared_ = true;
  clear_has_channel_shared();
}
inline bool NormalizeParameter::channel_shared() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizeParameter.channel_shared)
  return channel_shared_;
}
inline void NormalizeParameter::set_channel_shared(bool value) {
  set_has_channel_shared();
  channel_shared_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizeParameter.channel_shared)
}

// optional float eps = 4 [default = 1e-10];
inline bool NormalizeParameter::has_eps() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NormalizeParameter::set_has_eps() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NormalizeParameter::clear_has_eps() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NormalizeParameter::clear_eps() {
  eps_ = 1e-10f;
  clear_has_eps();
}
inline float NormalizeParameter::eps() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizeParameter.eps)
  return eps_;
}
inline void NormalizeParameter::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizeParameter.eps)
}

// -------------------------------------------------------------------

// ParameterParameter

// optional .caffe.BlobShape shape = 1;
inline bool ParameterParameter::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParameterParameter::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParameterParameter::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParameterParameter::clear_shape() {
  if (shape_ != NULL) shape_->::caffe::BlobShape::Clear();
  clear_has_shape();
}
inline const ::caffe::BlobShape& ParameterParameter::shape() const {
  // @@protoc_insertion_point(field_get:caffe.ParameterParameter.shape)
  return shape_ != NULL ? *shape_ : *default_instance_->shape_;
}
inline ::caffe::BlobShape* ParameterParameter::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) shape_ = new ::caffe::BlobShape;
  // @@protoc_insertion_point(field_mutable:caffe.ParameterParameter.shape)
  return shape_;
}
inline ::caffe::BlobShape* ParameterParameter::release_shape() {
  clear_has_shape();
  ::caffe::BlobShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline void ParameterParameter::set_allocated_shape(::caffe::BlobShape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ParameterParameter.shape)
}

// -------------------------------------------------------------------

// PermuteParameter

// repeated uint32 order = 1;
inline int PermuteParameter::order_size() const {
  return order_.size();
}
inline void PermuteParameter::clear_order() {
  order_.Clear();
}
inline ::google::protobuf::uint32 PermuteParameter::order(int index) const {
  // @@protoc_insertion_point(field_get:caffe.PermuteParameter.order)
  return order_.Get(index);
}
inline void PermuteParameter::set_order(int index, ::google::protobuf::uint32 value) {
  order_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.PermuteParameter.order)
}
inline void PermuteParameter::add_order(::google::protobuf::uint32 value) {
  order_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.PermuteParameter.order)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PermuteParameter::order() const {
  // @@protoc_insertion_point(field_list:caffe.PermuteParameter.order)
  return order_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PermuteParameter::mutable_order() {
  // @@protoc_insertion_point(field_mutable_list:caffe.PermuteParameter.order)
  return &order_;
}

// -------------------------------------------------------------------

// PoolingParameter

// optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
inline bool PoolingParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PoolingParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PoolingParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PoolingParameter::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
inline ::caffe::PoolingParameter_PoolMethod PoolingParameter::pool() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pool)
  return static_cast< ::caffe::PoolingParameter_PoolMethod >(pool_);
}
inline void PoolingParameter::set_pool(::caffe::PoolingParameter_PoolMethod value) {
  assert(::caffe::PoolingParameter_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pool)
}

// optional uint32 pad = 4 [default = 0];
inline bool PoolingParameter::has_pad() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PoolingParameter::set_has_pad() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PoolingParameter::clear_has_pad() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PoolingParameter::clear_pad() {
  pad_ = 0u;
  clear_has_pad();
}
inline ::google::protobuf::uint32 PoolingParameter::pad() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pad)
  return pad_;
}
inline void PoolingParameter::set_pad(::google::protobuf::uint32 value) {
  set_has_pad();
  pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pad)
}

// optional uint32 pad_h = 9 [default = 0];
inline bool PoolingParameter::has_pad_h() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PoolingParameter::set_has_pad_h() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PoolingParameter::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PoolingParameter::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
inline ::google::protobuf::uint32 PoolingParameter::pad_h() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pad_h)
  return pad_h_;
}
inline void PoolingParameter::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pad_h)
}

// optional uint32 pad_w = 10 [default = 0];
inline bool PoolingParameter::has_pad_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PoolingParameter::set_has_pad_w() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PoolingParameter::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PoolingParameter::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
inline ::google::protobuf::uint32 PoolingParameter::pad_w() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pad_w)
  return pad_w_;
}
inline void PoolingParameter::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pad_w)
}

// optional uint32 kernel_size = 2;
inline bool PoolingParameter::has_kernel_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PoolingParameter::set_has_kernel_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PoolingParameter::clear_has_kernel_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PoolingParameter::clear_kernel_size() {
  kernel_size_ = 0u;
  clear_has_kernel_size();
}
inline ::google::protobuf::uint32 PoolingParameter::kernel_size() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.kernel_size)
  return kernel_size_;
}
inline void PoolingParameter::set_kernel_size(::google::protobuf::uint32 value) {
  set_has_kernel_size();
  kernel_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.kernel_size)
}

// optional uint32 kernel_h = 5;
inline bool PoolingParameter::has_kernel_h() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PoolingParameter::set_has_kernel_h() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PoolingParameter::clear_has_kernel_h() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PoolingParameter::clear_kernel_h() {
  kernel_h_ = 0u;
  clear_has_kernel_h();
}
inline ::google::protobuf::uint32 PoolingParameter::kernel_h() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.kernel_h)
  return kernel_h_;
}
inline void PoolingParameter::set_kernel_h(::google::protobuf::uint32 value) {
  set_has_kernel_h();
  kernel_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.kernel_h)
}

// optional uint32 kernel_w = 6;
inline bool PoolingParameter::has_kernel_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PoolingParameter::set_has_kernel_w() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PoolingParameter::clear_has_kernel_w() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PoolingParameter::clear_kernel_w() {
  kernel_w_ = 0u;
  clear_has_kernel_w();
}
inline ::google::protobuf::uint32 PoolingParameter::kernel_w() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.kernel_w)
  return kernel_w_;
}
inline void PoolingParameter::set_kernel_w(::google::protobuf::uint32 value) {
  set_has_kernel_w();
  kernel_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.kernel_w)
}

// optional uint32 stride = 3 [default = 1];
inline bool PoolingParameter::has_stride() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PoolingParameter::set_has_stride() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PoolingParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PoolingParameter::clear_stride() {
  stride_ = 1u;
  clear_has_stride();
}
inline ::google::protobuf::uint32 PoolingParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.stride)
  return stride_;
}
inline void PoolingParameter::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.stride)
}

// optional uint32 stride_h = 7;
inline bool PoolingParameter::has_stride_h() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PoolingParameter::set_has_stride_h() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PoolingParameter::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PoolingParameter::clear_stride_h() {
  stride_h_ = 0u;
  clear_has_stride_h();
}
inline ::google::protobuf::uint32 PoolingParameter::stride_h() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.stride_h)
  return stride_h_;
}
inline void PoolingParameter::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.stride_h)
}

// optional uint32 stride_w = 8;
inline bool PoolingParameter::has_stride_w() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PoolingParameter::set_has_stride_w() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PoolingParameter::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PoolingParameter::clear_stride_w() {
  stride_w_ = 0u;
  clear_has_stride_w();
}
inline ::google::protobuf::uint32 PoolingParameter::stride_w() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.stride_w)
  return stride_w_;
}
inline void PoolingParameter::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.stride_w)
}

// optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
inline bool PoolingParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PoolingParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PoolingParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PoolingParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::PoolingParameter_Engine PoolingParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.engine)
  return static_cast< ::caffe::PoolingParameter_Engine >(engine_);
}
inline void PoolingParameter::set_engine(::caffe::PoolingParameter_Engine value) {
  assert(::caffe::PoolingParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.engine)
}

// optional bool global_pooling = 12 [default = false];
inline bool PoolingParameter::has_global_pooling() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PoolingParameter::set_has_global_pooling() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PoolingParameter::clear_has_global_pooling() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PoolingParameter::clear_global_pooling() {
  global_pooling_ = false;
  clear_has_global_pooling();
}
inline bool PoolingParameter::global_pooling() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.global_pooling)
  return global_pooling_;
}
inline void PoolingParameter::set_global_pooling(bool value) {
  set_has_global_pooling();
  global_pooling_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.global_pooling)
}

// -------------------------------------------------------------------

// PowerParameter

// optional float power = 1 [default = 1];
inline bool PowerParameter::has_power() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PowerParameter::set_has_power() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PowerParameter::clear_has_power() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PowerParameter::clear_power() {
  power_ = 1;
  clear_has_power();
}
inline float PowerParameter::power() const {
  // @@protoc_insertion_point(field_get:caffe.PowerParameter.power)
  return power_;
}
inline void PowerParameter::set_power(float value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:caffe.PowerParameter.power)
}

// optional float scale = 2 [default = 1];
inline bool PowerParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PowerParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PowerParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PowerParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float PowerParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.PowerParameter.scale)
  return scale_;
}
inline void PowerParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.PowerParameter.scale)
}

// optional float shift = 3 [default = 0];
inline bool PowerParameter::has_shift() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PowerParameter::set_has_shift() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PowerParameter::clear_has_shift() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PowerParameter::clear_shift() {
  shift_ = 0;
  clear_has_shift();
}
inline float PowerParameter::shift() const {
  // @@protoc_insertion_point(field_get:caffe.PowerParameter.shift)
  return shift_;
}
inline void PowerParameter::set_shift(float value) {
  set_has_shift();
  shift_ = value;
  // @@protoc_insertion_point(field_set:caffe.PowerParameter.shift)
}

// -------------------------------------------------------------------

// PriorBoxParameter

// repeated float min_size = 1;
inline int PriorBoxParameter::min_size_size() const {
  return min_size_.size();
}
inline void PriorBoxParameter::clear_min_size() {
  min_size_.Clear();
}
inline float PriorBoxParameter::min_size(int index) const {
  // @@protoc_insertion_point(field_get:caffe.PriorBoxParameter.min_size)
  return min_size_.Get(index);
}
inline void PriorBoxParameter::set_min_size(int index, float value) {
  min_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.PriorBoxParameter.min_size)
}
inline void PriorBoxParameter::add_min_size(float value) {
  min_size_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.PriorBoxParameter.min_size)
}
inline const ::google::protobuf::RepeatedField< float >&
PriorBoxParameter::min_size() const {
  // @@protoc_insertion_point(field_list:caffe.PriorBoxParameter.min_size)
  return min_size_;
}
inline ::google::protobuf::RepeatedField< float >*
PriorBoxParameter::mutable_min_size() {
  // @@protoc_insertion_point(field_mutable_list:caffe.PriorBoxParameter.min_size)
  return &min_size_;
}

// repeated float max_size = 2;
inline int PriorBoxParameter::max_size_size() const {
  return max_size_.size();
}
inline void PriorBoxParameter::clear_max_size() {
  max_size_.Clear();
}
inline float PriorBoxParameter::max_size(int index) const {
  // @@protoc_insertion_point(field_get:caffe.PriorBoxParameter.max_size)
  return max_size_.Get(index);
}
inline void PriorBoxParameter::set_max_size(int index, float value) {
  max_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.PriorBoxParameter.max_size)
}
inline void PriorBoxParameter::add_max_size(float value) {
  max_size_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.PriorBoxParameter.max_size)
}
inline const ::google::protobuf::RepeatedField< float >&
PriorBoxParameter::max_size() const {
  // @@protoc_insertion_point(field_list:caffe.PriorBoxParameter.max_size)
  return max_size_;
}
inline ::google::protobuf::RepeatedField< float >*
PriorBoxParameter::mutable_max_size() {
  // @@protoc_insertion_point(field_mutable_list:caffe.PriorBoxParameter.max_size)
  return &max_size_;
}

// repeated float aspect_ratio = 3;
inline int PriorBoxParameter::aspect_ratio_size() const {
  return aspect_ratio_.size();
}
inline void PriorBoxParameter::clear_aspect_ratio() {
  aspect_ratio_.Clear();
}
inline float PriorBoxParameter::aspect_ratio(int index) const {
  // @@protoc_insertion_point(field_get:caffe.PriorBoxParameter.aspect_ratio)
  return aspect_ratio_.Get(index);
}
inline void PriorBoxParameter::set_aspect_ratio(int index, float value) {
  aspect_ratio_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.PriorBoxParameter.aspect_ratio)
}
inline void PriorBoxParameter::add_aspect_ratio(float value) {
  aspect_ratio_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.PriorBoxParameter.aspect_ratio)
}
inline const ::google::protobuf::RepeatedField< float >&
PriorBoxParameter::aspect_ratio() const {
  // @@protoc_insertion_point(field_list:caffe.PriorBoxParameter.aspect_ratio)
  return aspect_ratio_;
}
inline ::google::protobuf::RepeatedField< float >*
PriorBoxParameter::mutable_aspect_ratio() {
  // @@protoc_insertion_point(field_mutable_list:caffe.PriorBoxParameter.aspect_ratio)
  return &aspect_ratio_;
}

// optional bool flip = 4 [default = true];
inline bool PriorBoxParameter::has_flip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PriorBoxParameter::set_has_flip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PriorBoxParameter::clear_has_flip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PriorBoxParameter::clear_flip() {
  flip_ = true;
  clear_has_flip();
}
inline bool PriorBoxParameter::flip() const {
  // @@protoc_insertion_point(field_get:caffe.PriorBoxParameter.flip)
  return flip_;
}
inline void PriorBoxParameter::set_flip(bool value) {
  set_has_flip();
  flip_ = value;
  // @@protoc_insertion_point(field_set:caffe.PriorBoxParameter.flip)
}

// optional bool clip = 5 [default = false];
inline bool PriorBoxParameter::has_clip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PriorBoxParameter::set_has_clip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PriorBoxParameter::clear_has_clip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PriorBoxParameter::clear_clip() {
  clip_ = false;
  clear_has_clip();
}
inline bool PriorBoxParameter::clip() const {
  // @@protoc_insertion_point(field_get:caffe.PriorBoxParameter.clip)
  return clip_;
}
inline void PriorBoxParameter::set_clip(bool value) {
  set_has_clip();
  clip_ = value;
  // @@protoc_insertion_point(field_set:caffe.PriorBoxParameter.clip)
}

// repeated float variance = 6;
inline int PriorBoxParameter::variance_size() const {
  return variance_.size();
}
inline void PriorBoxParameter::clear_variance() {
  variance_.Clear();
}
inline float PriorBoxParameter::variance(int index) const {
  // @@protoc_insertion_point(field_get:caffe.PriorBoxParameter.variance)
  return variance_.Get(index);
}
inline void PriorBoxParameter::set_variance(int index, float value) {
  variance_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.PriorBoxParameter.variance)
}
inline void PriorBoxParameter::add_variance(float value) {
  variance_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.PriorBoxParameter.variance)
}
inline const ::google::protobuf::RepeatedField< float >&
PriorBoxParameter::variance() const {
  // @@protoc_insertion_point(field_list:caffe.PriorBoxParameter.variance)
  return variance_;
}
inline ::google::protobuf::RepeatedField< float >*
PriorBoxParameter::mutable_variance() {
  // @@protoc_insertion_point(field_mutable_list:caffe.PriorBoxParameter.variance)
  return &variance_;
}

// optional uint32 img_size = 7;
inline bool PriorBoxParameter::has_img_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PriorBoxParameter::set_has_img_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PriorBoxParameter::clear_has_img_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PriorBoxParameter::clear_img_size() {
  img_size_ = 0u;
  clear_has_img_size();
}
inline ::google::protobuf::uint32 PriorBoxParameter::img_size() const {
  // @@protoc_insertion_point(field_get:caffe.PriorBoxParameter.img_size)
  return img_size_;
}
inline void PriorBoxParameter::set_img_size(::google::protobuf::uint32 value) {
  set_has_img_size();
  img_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.PriorBoxParameter.img_size)
}

// optional uint32 img_h = 8;
inline bool PriorBoxParameter::has_img_h() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PriorBoxParameter::set_has_img_h() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PriorBoxParameter::clear_has_img_h() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PriorBoxParameter::clear_img_h() {
  img_h_ = 0u;
  clear_has_img_h();
}
inline ::google::protobuf::uint32 PriorBoxParameter::img_h() const {
  // @@protoc_insertion_point(field_get:caffe.PriorBoxParameter.img_h)
  return img_h_;
}
inline void PriorBoxParameter::set_img_h(::google::protobuf::uint32 value) {
  set_has_img_h();
  img_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PriorBoxParameter.img_h)
}

// optional uint32 img_w = 9;
inline bool PriorBoxParameter::has_img_w() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PriorBoxParameter::set_has_img_w() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PriorBoxParameter::clear_has_img_w() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PriorBoxParameter::clear_img_w() {
  img_w_ = 0u;
  clear_has_img_w();
}
inline ::google::protobuf::uint32 PriorBoxParameter::img_w() const {
  // @@protoc_insertion_point(field_get:caffe.PriorBoxParameter.img_w)
  return img_w_;
}
inline void PriorBoxParameter::set_img_w(::google::protobuf::uint32 value) {
  set_has_img_w();
  img_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PriorBoxParameter.img_w)
}

// optional float step = 10;
inline bool PriorBoxParameter::has_step() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PriorBoxParameter::set_has_step() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PriorBoxParameter::clear_has_step() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PriorBoxParameter::clear_step() {
  step_ = 0;
  clear_has_step();
}
inline float PriorBoxParameter::step() const {
  // @@protoc_insertion_point(field_get:caffe.PriorBoxParameter.step)
  return step_;
}
inline void PriorBoxParameter::set_step(float value) {
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:caffe.PriorBoxParameter.step)
}

// optional float step_h = 11;
inline bool PriorBoxParameter::has_step_h() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PriorBoxParameter::set_has_step_h() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PriorBoxParameter::clear_has_step_h() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PriorBoxParameter::clear_step_h() {
  step_h_ = 0;
  clear_has_step_h();
}
inline float PriorBoxParameter::step_h() const {
  // @@protoc_insertion_point(field_get:caffe.PriorBoxParameter.step_h)
  return step_h_;
}
inline void PriorBoxParameter::set_step_h(float value) {
  set_has_step_h();
  step_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PriorBoxParameter.step_h)
}

// optional float step_w = 12;
inline bool PriorBoxParameter::has_step_w() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PriorBoxParameter::set_has_step_w() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PriorBoxParameter::clear_has_step_w() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PriorBoxParameter::clear_step_w() {
  step_w_ = 0;
  clear_has_step_w();
}
inline float PriorBoxParameter::step_w() const {
  // @@protoc_insertion_point(field_get:caffe.PriorBoxParameter.step_w)
  return step_w_;
}
inline void PriorBoxParameter::set_step_w(float value) {
  set_has_step_w();
  step_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PriorBoxParameter.step_w)
}

// optional float offset = 13 [default = 0.5];
inline bool PriorBoxParameter::has_offset() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PriorBoxParameter::set_has_offset() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PriorBoxParameter::clear_has_offset() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PriorBoxParameter::clear_offset() {
  offset_ = 0.5f;
  clear_has_offset();
}
inline float PriorBoxParameter::offset() const {
  // @@protoc_insertion_point(field_get:caffe.PriorBoxParameter.offset)
  return offset_;
}
inline void PriorBoxParameter::set_offset(float value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:caffe.PriorBoxParameter.offset)
}

// -------------------------------------------------------------------

// PythonParameter

// optional string module = 1;
inline bool PythonParameter::has_module() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PythonParameter::set_has_module() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PythonParameter::clear_has_module() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PythonParameter::clear_module() {
  if (module_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    module_->clear();
  }
  clear_has_module();
}
inline const ::std::string& PythonParameter::module() const {
  // @@protoc_insertion_point(field_get:caffe.PythonParameter.module)
  return *module_;
}
inline void PythonParameter::set_module(const ::std::string& value) {
  set_has_module();
  if (module_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    module_ = new ::std::string;
  }
  module_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.PythonParameter.module)
}
inline void PythonParameter::set_module(const char* value) {
  set_has_module();
  if (module_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    module_ = new ::std::string;
  }
  module_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.PythonParameter.module)
}
inline void PythonParameter::set_module(const char* value, size_t size) {
  set_has_module();
  if (module_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    module_ = new ::std::string;
  }
  module_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.PythonParameter.module)
}
inline ::std::string* PythonParameter::mutable_module() {
  set_has_module();
  if (module_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    module_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe.PythonParameter.module)
  return module_;
}
inline ::std::string* PythonParameter::release_module() {
  clear_has_module();
  if (module_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = module_;
    module_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PythonParameter::set_allocated_module(::std::string* module) {
  if (module_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete module_;
  }
  if (module) {
    set_has_module();
    module_ = module;
  } else {
    clear_has_module();
    module_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.PythonParameter.module)
}

// optional string layer = 2;
inline bool PythonParameter::has_layer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PythonParameter::set_has_layer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PythonParameter::clear_has_layer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PythonParameter::clear_layer() {
  if (layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_->clear();
  }
  clear_has_layer();
}
inline const ::std::string& PythonParameter::layer() const {
  // @@protoc_insertion_point(field_get:caffe.PythonParameter.layer)
  return *layer_;
}
inline void PythonParameter::set_layer(const ::std::string& value) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.PythonParameter.layer)
}
inline void PythonParameter::set_layer(const char* value) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.PythonParameter.layer)
}
inline void PythonParameter::set_layer(const char* value, size_t size) {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  layer_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.PythonParameter.layer)
}
inline ::std::string* PythonParameter::mutable_layer() {
  set_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    layer_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe.PythonParameter.layer)
  return layer_;
}
inline ::std::string* PythonParameter::release_layer() {
  clear_has_layer();
  if (layer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = layer_;
    layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PythonParameter::set_allocated_layer(::std::string* layer) {
  if (layer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete layer_;
  }
  if (layer) {
    set_has_layer();
    layer_ = layer;
  } else {
    clear_has_layer();
    layer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.PythonParameter.layer)
}

// optional string param_str = 3 [default = ""];
inline bool PythonParameter::has_param_str() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PythonParameter::set_has_param_str() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PythonParameter::clear_has_param_str() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PythonParameter::clear_param_str() {
  if (param_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param_str_->clear();
  }
  clear_has_param_str();
}
inline const ::std::string& PythonParameter::param_str() const {
  // @@protoc_insertion_point(field_get:caffe.PythonParameter.param_str)
  return *param_str_;
}
inline void PythonParameter::set_param_str(const ::std::string& value) {
  set_has_param_str();
  if (param_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param_str_ = new ::std::string;
  }
  param_str_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.PythonParameter.param_str)
}
inline void PythonParameter::set_param_str(const char* value) {
  set_has_param_str();
  if (param_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param_str_ = new ::std::string;
  }
  param_str_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.PythonParameter.param_str)
}
inline void PythonParameter::set_param_str(const char* value, size_t size) {
  set_has_param_str();
  if (param_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param_str_ = new ::std::string;
  }
  param_str_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.PythonParameter.param_str)
}
inline ::std::string* PythonParameter::mutable_param_str() {
  set_has_param_str();
  if (param_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    param_str_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe.PythonParameter.param_str)
  return param_str_;
}
inline ::std::string* PythonParameter::release_param_str() {
  clear_has_param_str();
  if (param_str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = param_str_;
    param_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PythonParameter::set_allocated_param_str(::std::string* param_str) {
  if (param_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete param_str_;
  }
  if (param_str) {
    set_has_param_str();
    param_str_ = param_str;
  } else {
    clear_has_param_str();
    param_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.PythonParameter.param_str)
}

// optional bool share_in_parallel = 4 [default = false];
inline bool PythonParameter::has_share_in_parallel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PythonParameter::set_has_share_in_parallel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PythonParameter::clear_has_share_in_parallel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PythonParameter::clear_share_in_parallel() {
  share_in_parallel_ = false;
  clear_has_share_in_parallel();
}
inline bool PythonParameter::share_in_parallel() const {
  // @@protoc_insertion_point(field_get:caffe.PythonParameter.share_in_parallel)
  return share_in_parallel_;
}
inline void PythonParameter::set_share_in_parallel(bool value) {
  set_has_share_in_parallel();
  share_in_parallel_ = value;
  // @@protoc_insertion_point(field_set:caffe.PythonParameter.share_in_parallel)
}

// -------------------------------------------------------------------

// ReductionParameter

// optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
inline bool ReductionParameter::has_operation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReductionParameter::set_has_operation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReductionParameter::clear_has_operation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReductionParameter::clear_operation() {
  operation_ = 1;
  clear_has_operation();
}
inline ::caffe::ReductionParameter_ReductionOp ReductionParameter::operation() const {
  // @@protoc_insertion_point(field_get:caffe.ReductionParameter.operation)
  return static_cast< ::caffe::ReductionParameter_ReductionOp >(operation_);
}
inline void ReductionParameter::set_operation(::caffe::ReductionParameter_ReductionOp value) {
  assert(::caffe::ReductionParameter_ReductionOp_IsValid(value));
  set_has_operation();
  operation_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReductionParameter.operation)
}

// optional int32 axis = 2 [default = 0];
inline bool ReductionParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReductionParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReductionParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReductionParameter::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
inline ::google::protobuf::int32 ReductionParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ReductionParameter.axis)
  return axis_;
}
inline void ReductionParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReductionParameter.axis)
}

// optional float coeff = 3 [default = 1];
inline bool ReductionParameter::has_coeff() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReductionParameter::set_has_coeff() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReductionParameter::clear_has_coeff() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReductionParameter::clear_coeff() {
  coeff_ = 1;
  clear_has_coeff();
}
inline float ReductionParameter::coeff() const {
  // @@protoc_insertion_point(field_get:caffe.ReductionParameter.coeff)
  return coeff_;
}
inline void ReductionParameter::set_coeff(float value) {
  set_has_coeff();
  coeff_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReductionParameter.coeff)
}

// -------------------------------------------------------------------

// ReLUParameter

// optional float negative_slope = 1 [default = 0];
inline bool ReLUParameter::has_negative_slope() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReLUParameter::set_has_negative_slope() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReLUParameter::clear_has_negative_slope() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReLUParameter::clear_negative_slope() {
  negative_slope_ = 0;
  clear_has_negative_slope();
}
inline float ReLUParameter::negative_slope() const {
  // @@protoc_insertion_point(field_get:caffe.ReLUParameter.negative_slope)
  return negative_slope_;
}
inline void ReLUParameter::set_negative_slope(float value) {
  set_has_negative_slope();
  negative_slope_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReLUParameter.negative_slope)
}

// optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
inline bool ReLUParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReLUParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReLUParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReLUParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::ReLUParameter_Engine ReLUParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.ReLUParameter.engine)
  return static_cast< ::caffe::ReLUParameter_Engine >(engine_);
}
inline void ReLUParameter::set_engine(::caffe::ReLUParameter_Engine value) {
  assert(::caffe::ReLUParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReLUParameter.engine)
}

// -------------------------------------------------------------------

// ReshapeParameter

// optional .caffe.BlobShape shape = 1;
inline bool ReshapeParameter::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReshapeParameter::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReshapeParameter::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReshapeParameter::clear_shape() {
  if (shape_ != NULL) shape_->::caffe::BlobShape::Clear();
  clear_has_shape();
}
inline const ::caffe::BlobShape& ReshapeParameter::shape() const {
  // @@protoc_insertion_point(field_get:caffe.ReshapeParameter.shape)
  return shape_ != NULL ? *shape_ : *default_instance_->shape_;
}
inline ::caffe::BlobShape* ReshapeParameter::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) shape_ = new ::caffe::BlobShape;
  // @@protoc_insertion_point(field_mutable:caffe.ReshapeParameter.shape)
  return shape_;
}
inline ::caffe::BlobShape* ReshapeParameter::release_shape() {
  clear_has_shape();
  ::caffe::BlobShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline void ReshapeParameter::set_allocated_shape(::caffe::BlobShape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ReshapeParameter.shape)
}

// optional int32 axis = 2 [default = 0];
inline bool ReshapeParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReshapeParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReshapeParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReshapeParameter::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
inline ::google::protobuf::int32 ReshapeParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ReshapeParameter.axis)
  return axis_;
}
inline void ReshapeParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReshapeParameter.axis)
}

// optional int32 num_axes = 3 [default = -1];
inline bool ReshapeParameter::has_num_axes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReshapeParameter::set_has_num_axes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReshapeParameter::clear_has_num_axes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReshapeParameter::clear_num_axes() {
  num_axes_ = -1;
  clear_has_num_axes();
}
inline ::google::protobuf::int32 ReshapeParameter::num_axes() const {
  // @@protoc_insertion_point(field_get:caffe.ReshapeParameter.num_axes)
  return num_axes_;
}
inline void ReshapeParameter::set_num_axes(::google::protobuf::int32 value) {
  set_has_num_axes();
  num_axes_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReshapeParameter.num_axes)
}

// -------------------------------------------------------------------

// ScaleParameter

// optional int32 axis = 1 [default = 1];
inline bool ScaleParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScaleParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScaleParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScaleParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 ScaleParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.axis)
  return axis_;
}
inline void ScaleParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ScaleParameter.axis)
}

// optional int32 num_axes = 2 [default = 1];
inline bool ScaleParameter::has_num_axes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScaleParameter::set_has_num_axes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScaleParameter::clear_has_num_axes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScaleParameter::clear_num_axes() {
  num_axes_ = 1;
  clear_has_num_axes();
}
inline ::google::protobuf::int32 ScaleParameter::num_axes() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.num_axes)
  return num_axes_;
}
inline void ScaleParameter::set_num_axes(::google::protobuf::int32 value) {
  set_has_num_axes();
  num_axes_ = value;
  // @@protoc_insertion_point(field_set:caffe.ScaleParameter.num_axes)
}

// optional .caffe.FillerParameter filler = 3;
inline bool ScaleParameter::has_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScaleParameter::set_has_filler() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScaleParameter::clear_has_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScaleParameter::clear_filler() {
  if (filler_ != NULL) filler_->::caffe::FillerParameter::Clear();
  clear_has_filler();
}
inline const ::caffe::FillerParameter& ScaleParameter::filler() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.filler)
  return filler_ != NULL ? *filler_ : *default_instance_->filler_;
}
inline ::caffe::FillerParameter* ScaleParameter::mutable_filler() {
  set_has_filler();
  if (filler_ == NULL) filler_ = new ::caffe::FillerParameter;
  // @@protoc_insertion_point(field_mutable:caffe.ScaleParameter.filler)
  return filler_;
}
inline ::caffe::FillerParameter* ScaleParameter::release_filler() {
  clear_has_filler();
  ::caffe::FillerParameter* temp = filler_;
  filler_ = NULL;
  return temp;
}
inline void ScaleParameter::set_allocated_filler(::caffe::FillerParameter* filler) {
  delete filler_;
  filler_ = filler;
  if (filler) {
    set_has_filler();
  } else {
    clear_has_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ScaleParameter.filler)
}

// optional bool bias_term = 4 [default = false];
inline bool ScaleParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ScaleParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ScaleParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ScaleParameter::clear_bias_term() {
  bias_term_ = false;
  clear_has_bias_term();
}
inline bool ScaleParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.bias_term)
  return bias_term_;
}
inline void ScaleParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.ScaleParameter.bias_term)
}

// optional .caffe.FillerParameter bias_filler = 5;
inline bool ScaleParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ScaleParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ScaleParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ScaleParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& ScaleParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
inline ::caffe::FillerParameter* ScaleParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) bias_filler_ = new ::caffe::FillerParameter;
  // @@protoc_insertion_point(field_mutable:caffe.ScaleParameter.bias_filler)
  return bias_filler_;
}
inline ::caffe::FillerParameter* ScaleParameter::release_bias_filler() {
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void ScaleParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ScaleParameter.bias_filler)
}

// -------------------------------------------------------------------

// SigmoidParameter

// optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
inline bool SigmoidParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SigmoidParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SigmoidParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SigmoidParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::SigmoidParameter_Engine SigmoidParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.SigmoidParameter.engine)
  return static_cast< ::caffe::SigmoidParameter_Engine >(engine_);
}
inline void SigmoidParameter::set_engine(::caffe::SigmoidParameter_Engine value) {
  assert(::caffe::SigmoidParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.SigmoidParameter.engine)
}

// -------------------------------------------------------------------

// SliceParameter

// optional int32 axis = 3 [default = 1];
inline bool SliceParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SliceParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SliceParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SliceParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 SliceParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.SliceParameter.axis)
  return axis_;
}
inline void SliceParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.SliceParameter.axis)
}

// repeated uint32 slice_point = 2;
inline int SliceParameter::slice_point_size() const {
  return slice_point_.size();
}
inline void SliceParameter::clear_slice_point() {
  slice_point_.Clear();
}
inline ::google::protobuf::uint32 SliceParameter::slice_point(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SliceParameter.slice_point)
  return slice_point_.Get(index);
}
inline void SliceParameter::set_slice_point(int index, ::google::protobuf::uint32 value) {
  slice_point_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SliceParameter.slice_point)
}
inline void SliceParameter::add_slice_point(::google::protobuf::uint32 value) {
  slice_point_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SliceParameter.slice_point)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SliceParameter::slice_point() const {
  // @@protoc_insertion_point(field_list:caffe.SliceParameter.slice_point)
  return slice_point_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SliceParameter::mutable_slice_point() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SliceParameter.slice_point)
  return &slice_point_;
}

// optional uint32 slice_dim = 1 [default = 1];
inline bool SliceParameter::has_slice_dim() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SliceParameter::set_has_slice_dim() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SliceParameter::clear_has_slice_dim() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SliceParameter::clear_slice_dim() {
  slice_dim_ = 1u;
  clear_has_slice_dim();
}
inline ::google::protobuf::uint32 SliceParameter::slice_dim() const {
  // @@protoc_insertion_point(field_get:caffe.SliceParameter.slice_dim)
  return slice_dim_;
}
inline void SliceParameter::set_slice_dim(::google::protobuf::uint32 value) {
  set_has_slice_dim();
  slice_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.SliceParameter.slice_dim)
}

// -------------------------------------------------------------------

// SoftmaxParameter

// optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
inline bool SoftmaxParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SoftmaxParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SoftmaxParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SoftmaxParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::SoftmaxParameter_Engine SoftmaxParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.SoftmaxParameter.engine)
  return static_cast< ::caffe::SoftmaxParameter_Engine >(engine_);
}
inline void SoftmaxParameter::set_engine(::caffe::SoftmaxParameter_Engine value) {
  assert(::caffe::SoftmaxParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftmaxParameter.engine)
}

// optional int32 axis = 2 [default = 1];
inline bool SoftmaxParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SoftmaxParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SoftmaxParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SoftmaxParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 SoftmaxParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.SoftmaxParameter.axis)
  return axis_;
}
inline void SoftmaxParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftmaxParameter.axis)
}

// -------------------------------------------------------------------

// TanHParameter

// optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
inline bool TanHParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TanHParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TanHParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TanHParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::TanHParameter_Engine TanHParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.TanHParameter.engine)
  return static_cast< ::caffe::TanHParameter_Engine >(engine_);
}
inline void TanHParameter::set_engine(::caffe::TanHParameter_Engine value) {
  assert(::caffe::TanHParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.TanHParameter.engine)
}

// -------------------------------------------------------------------

// TileParameter

// optional int32 axis = 1 [default = 1];
inline bool TileParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TileParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TileParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TileParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 TileParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.TileParameter.axis)
  return axis_;
}
inline void TileParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.TileParameter.axis)
}

// optional int32 tiles = 2;
inline bool TileParameter::has_tiles() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TileParameter::set_has_tiles() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TileParameter::clear_has_tiles() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TileParameter::clear_tiles() {
  tiles_ = 0;
  clear_has_tiles();
}
inline ::google::protobuf::int32 TileParameter::tiles() const {
  // @@protoc_insertion_point(field_get:caffe.TileParameter.tiles)
  return tiles_;
}
inline void TileParameter::set_tiles(::google::protobuf::int32 value) {
  set_has_tiles();
  tiles_ = value;
  // @@protoc_insertion_point(field_set:caffe.TileParameter.tiles)
}

// -------------------------------------------------------------------

// ThresholdParameter

// optional float threshold = 1 [default = 0];
inline bool ThresholdParameter::has_threshold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ThresholdParameter::set_has_threshold() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ThresholdParameter::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ThresholdParameter::clear_threshold() {
  threshold_ = 0;
  clear_has_threshold();
}
inline float ThresholdParameter::threshold() const {
  // @@protoc_insertion_point(field_get:caffe.ThresholdParameter.threshold)
  return threshold_;
}
inline void ThresholdParameter::set_threshold(float value) {
  set_has_threshold();
  threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.ThresholdParameter.threshold)
}

// -------------------------------------------------------------------

// WindowDataParameter

// optional string source = 1;
inline bool WindowDataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WindowDataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WindowDataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WindowDataParameter::clear_source() {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& WindowDataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.source)
  return *source_;
}
inline void WindowDataParameter::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.source)
}
inline void WindowDataParameter::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.source)
}
inline void WindowDataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.source)
}
inline ::std::string* WindowDataParameter::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.source)
  return source_;
}
inline ::std::string* WindowDataParameter::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WindowDataParameter::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.source)
}

// optional float scale = 2 [default = 1];
inline bool WindowDataParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WindowDataParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WindowDataParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WindowDataParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float WindowDataParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.scale)
  return scale_;
}
inline void WindowDataParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.scale)
}

// optional string mean_file = 3;
inline bool WindowDataParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WindowDataParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WindowDataParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WindowDataParameter::clear_mean_file() {
  if (mean_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_->clear();
  }
  clear_has_mean_file();
}
inline const ::std::string& WindowDataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.mean_file)
  return *mean_file_;
}
inline void WindowDataParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.mean_file)
}
inline void WindowDataParameter::set_mean_file(const char* value) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.mean_file)
}
inline void WindowDataParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  mean_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.mean_file)
}
inline ::std::string* WindowDataParameter::mutable_mean_file() {
  set_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mean_file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.mean_file)
  return mean_file_;
}
inline ::std::string* WindowDataParameter::release_mean_file() {
  clear_has_mean_file();
  if (mean_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mean_file_;
    mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WindowDataParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mean_file_;
  }
  if (mean_file) {
    set_has_mean_file();
    mean_file_ = mean_file;
  } else {
    clear_has_mean_file();
    mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.mean_file)
}

// optional uint32 batch_size = 4;
inline bool WindowDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WindowDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WindowDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WindowDataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 WindowDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.batch_size)
  return batch_size_;
}
inline void WindowDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.batch_size)
}

// optional uint32 crop_size = 5 [default = 0];
inline bool WindowDataParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WindowDataParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WindowDataParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WindowDataParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
inline ::google::protobuf::uint32 WindowDataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.crop_size)
  return crop_size_;
}
inline void WindowDataParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
inline bool WindowDataParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WindowDataParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WindowDataParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WindowDataParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool WindowDataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.mirror)
  return mirror_;
}
inline void WindowDataParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.mirror)
}

// optional float fg_threshold = 7 [default = 0.5];
inline bool WindowDataParameter::has_fg_threshold() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WindowDataParameter::set_has_fg_threshold() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WindowDataParameter::clear_has_fg_threshold() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WindowDataParameter::clear_fg_threshold() {
  fg_threshold_ = 0.5f;
  clear_has_fg_threshold();
}
inline float WindowDataParameter::fg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.fg_threshold)
  return fg_threshold_;
}
inline void WindowDataParameter::set_fg_threshold(float value) {
  set_has_fg_threshold();
  fg_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.fg_threshold)
}

// optional float bg_threshold = 8 [default = 0.5];
inline bool WindowDataParameter::has_bg_threshold() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WindowDataParameter::set_has_bg_threshold() {
  _has_bits_[0] |= 0x00000080u;
}
inline void WindowDataParameter::clear_has_bg_threshold() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void WindowDataParameter::clear_bg_threshold() {
  bg_threshold_ = 0.5f;
  clear_has_bg_threshold();
}
inline float WindowDataParameter::bg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.bg_threshold)
  return bg_threshold_;
}
inline void WindowDataParameter::set_bg_threshold(float value) {
  set_has_bg_threshold();
  bg_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.bg_threshold)
}

// optional float fg_fraction = 9 [default = 0.25];
inline bool WindowDataParameter::has_fg_fraction() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void WindowDataParameter::set_has_fg_fraction() {
  _has_bits_[0] |= 0x00000100u;
}
inline void WindowDataParameter::clear_has_fg_fraction() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void WindowDataParameter::clear_fg_fraction() {
  fg_fraction_ = 0.25f;
  clear_has_fg_fraction();
}
inline float WindowDataParameter::fg_fraction() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.fg_fraction)
  return fg_fraction_;
}
inline void WindowDataParameter::set_fg_fraction(float value) {
  set_has_fg_fraction();
  fg_fraction_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.fg_fraction)
}

// optional uint32 context_pad = 10 [default = 0];
inline bool WindowDataParameter::has_context_pad() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void WindowDataParameter::set_has_context_pad() {
  _has_bits_[0] |= 0x00000200u;
}
inline void WindowDataParameter::clear_has_context_pad() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void WindowDataParameter::clear_context_pad() {
  context_pad_ = 0u;
  clear_has_context_pad();
}
inline ::google::protobuf::uint32 WindowDataParameter::context_pad() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.context_pad)
  return context_pad_;
}
inline void WindowDataParameter::set_context_pad(::google::protobuf::uint32 value) {
  set_has_context_pad();
  context_pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.context_pad)
}

// optional string crop_mode = 11 [default = "warp"];
inline bool WindowDataParameter::has_crop_mode() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void WindowDataParameter::set_has_crop_mode() {
  _has_bits_[0] |= 0x00000400u;
}
inline void WindowDataParameter::clear_has_crop_mode() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void WindowDataParameter::clear_crop_mode() {
  if (crop_mode_ != _default_crop_mode_) {
    crop_mode_->assign(*_default_crop_mode_);
  }
  clear_has_crop_mode();
}
inline const ::std::string& WindowDataParameter::crop_mode() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.crop_mode)
  return *crop_mode_;
}
inline void WindowDataParameter::set_crop_mode(const ::std::string& value) {
  set_has_crop_mode();
  if (crop_mode_ == _default_crop_mode_) {
    crop_mode_ = new ::std::string;
  }
  crop_mode_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.crop_mode)
}
inline void WindowDataParameter::set_crop_mode(const char* value) {
  set_has_crop_mode();
  if (crop_mode_ == _default_crop_mode_) {
    crop_mode_ = new ::std::string;
  }
  crop_mode_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.crop_mode)
}
inline void WindowDataParameter::set_crop_mode(const char* value, size_t size) {
  set_has_crop_mode();
  if (crop_mode_ == _default_crop_mode_) {
    crop_mode_ = new ::std::string;
  }
  crop_mode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.crop_mode)
}
inline ::std::string* WindowDataParameter::mutable_crop_mode() {
  set_has_crop_mode();
  if (crop_mode_ == _default_crop_mode_) {
    crop_mode_ = new ::std::string(*_default_crop_mode_);
  }
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.crop_mode)
  return crop_mode_;
}
inline ::std::string* WindowDataParameter::release_crop_mode() {
  clear_has_crop_mode();
  if (crop_mode_ == _default_crop_mode_) {
    return NULL;
  } else {
    ::std::string* temp = crop_mode_;
    crop_mode_ = const_cast< ::std::string*>(_default_crop_mode_);
    return temp;
  }
}
inline void WindowDataParameter::set_allocated_crop_mode(::std::string* crop_mode) {
  if (crop_mode_ != _default_crop_mode_) {
    delete crop_mode_;
  }
  if (crop_mode) {
    set_has_crop_mode();
    crop_mode_ = crop_mode;
  } else {
    clear_has_crop_mode();
    crop_mode_ = const_cast< ::std::string*>(_default_crop_mode_);
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.crop_mode)
}

// optional bool cache_images = 12 [default = false];
inline bool WindowDataParameter::has_cache_images() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void WindowDataParameter::set_has_cache_images() {
  _has_bits_[0] |= 0x00000800u;
}
inline void WindowDataParameter::clear_has_cache_images() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void WindowDataParameter::clear_cache_images() {
  cache_images_ = false;
  clear_has_cache_images();
}
inline bool WindowDataParameter::cache_images() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.cache_images)
  return cache_images_;
}
inline void WindowDataParameter::set_cache_images(bool value) {
  set_has_cache_images();
  cache_images_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.cache_images)
}

// optional string root_folder = 13 [default = ""];
inline bool WindowDataParameter::has_root_folder() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void WindowDataParameter::set_has_root_folder() {
  _has_bits_[0] |= 0x00001000u;
}
inline void WindowDataParameter::clear_has_root_folder() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void WindowDataParameter::clear_root_folder() {
  if (root_folder_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    root_folder_->clear();
  }
  clear_has_root_folder();
}
inline const ::std::string& WindowDataParameter::root_folder() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.root_folder)
  return *root_folder_;
}
inline void WindowDataParameter::set_root_folder(const ::std::string& value) {
  set_has_root_folder();
  if (root_folder_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    root_folder_ = new ::std::string;
  }
  root_folder_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.root_folder)
}
inline void WindowDataParameter::set_root_folder(const char* value) {
  set_has_root_folder();
  if (root_folder_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    root_folder_ = new ::std::string;
  }
  root_folder_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.root_folder)
}
inline void WindowDataParameter::set_root_folder(const char* value, size_t size) {
  set_has_root_folder();
  if (root_folder_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    root_folder_ = new ::std::string;
  }
  root_folder_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.root_folder)
}
inline ::std::string* WindowDataParameter::mutable_root_folder() {
  set_has_root_folder();
  if (root_folder_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    root_folder_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.root_folder)
  return root_folder_;
}
inline ::std::string* WindowDataParameter::release_root_folder() {
  clear_has_root_folder();
  if (root_folder_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = root_folder_;
    root_folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WindowDataParameter::set_allocated_root_folder(::std::string* root_folder) {
  if (root_folder_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete root_folder_;
  }
  if (root_folder) {
    set_has_root_folder();
    root_folder_ = root_folder;
  } else {
    clear_has_root_folder();
    root_folder_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.root_folder)
}

// -------------------------------------------------------------------

// SPPParameter

// optional uint32 pyramid_height = 1;
inline bool SPPParameter::has_pyramid_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SPPParameter::set_has_pyramid_height() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SPPParameter::clear_has_pyramid_height() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SPPParameter::clear_pyramid_height() {
  pyramid_height_ = 0u;
  clear_has_pyramid_height();
}
inline ::google::protobuf::uint32 SPPParameter::pyramid_height() const {
  // @@protoc_insertion_point(field_get:caffe.SPPParameter.pyramid_height)
  return pyramid_height_;
}
inline void SPPParameter::set_pyramid_height(::google::protobuf::uint32 value) {
  set_has_pyramid_height();
  pyramid_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.SPPParameter.pyramid_height)
}

// optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
inline bool SPPParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SPPParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SPPParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SPPParameter::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
inline ::caffe::SPPParameter_PoolMethod SPPParameter::pool() const {
  // @@protoc_insertion_point(field_get:caffe.SPPParameter.pool)
  return static_cast< ::caffe::SPPParameter_PoolMethod >(pool_);
}
inline void SPPParameter::set_pool(::caffe::SPPParameter_PoolMethod value) {
  assert(::caffe::SPPParameter_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
  // @@protoc_insertion_point(field_set:caffe.SPPParameter.pool)
}

// optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
inline bool SPPParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SPPParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SPPParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SPPParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::SPPParameter_Engine SPPParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.SPPParameter.engine)
  return static_cast< ::caffe::SPPParameter_Engine >(engine_);
}
inline void SPPParameter::set_engine(::caffe::SPPParameter_Engine value) {
  assert(::caffe::SPPParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.SPPParameter.engine)
}

// -------------------------------------------------------------------

// V1LayerParameter

// repeated string bottom = 2;
inline int V1LayerParameter::bottom_size() const {
  return bottom_.size();
}
inline void V1LayerParameter::clear_bottom() {
  bottom_.Clear();
}
inline const ::std::string& V1LayerParameter::bottom(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.bottom)
  return bottom_.Get(index);
}
inline ::std::string* V1LayerParameter::mutable_bottom(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.bottom)
  return bottom_.Mutable(index);
}
inline void V1LayerParameter::set_bottom(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.bottom)
  bottom_.Mutable(index)->assign(value);
}
inline void V1LayerParameter::set_bottom(int index, const char* value) {
  bottom_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.V1LayerParameter.bottom)
}
inline void V1LayerParameter::set_bottom(int index, const char* value, size_t size) {
  bottom_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.V1LayerParameter.bottom)
}
inline ::std::string* V1LayerParameter::add_bottom() {
  return bottom_.Add();
}
inline void V1LayerParameter::add_bottom(const ::std::string& value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.bottom)
}
inline void V1LayerParameter::add_bottom(const char* value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.V1LayerParameter.bottom)
}
inline void V1LayerParameter::add_bottom(const char* value, size_t size) {
  bottom_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.V1LayerParameter.bottom)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
V1LayerParameter::bottom() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.bottom)
  return bottom_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
V1LayerParameter::mutable_bottom() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.bottom)
  return &bottom_;
}

// repeated string top = 3;
inline int V1LayerParameter::top_size() const {
  return top_.size();
}
inline void V1LayerParameter::clear_top() {
  top_.Clear();
}
inline const ::std::string& V1LayerParameter::top(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.top)
  return top_.Get(index);
}
inline ::std::string* V1LayerParameter::mutable_top(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.top)
  return top_.Mutable(index);
}
inline void V1LayerParameter::set_top(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.top)
  top_.Mutable(index)->assign(value);
}
inline void V1LayerParameter::set_top(int index, const char* value) {
  top_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.V1LayerParameter.top)
}
inline void V1LayerParameter::set_top(int index, const char* value, size_t size) {
  top_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.V1LayerParameter.top)
}
inline ::std::string* V1LayerParameter::add_top() {
  return top_.Add();
}
inline void V1LayerParameter::add_top(const ::std::string& value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.top)
}
inline void V1LayerParameter::add_top(const char* value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.V1LayerParameter.top)
}
inline void V1LayerParameter::add_top(const char* value, size_t size) {
  top_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.V1LayerParameter.top)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
V1LayerParameter::top() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.top)
  return top_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
V1LayerParameter::mutable_top() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.top)
  return &top_;
}

// optional string name = 4;
inline bool V1LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void V1LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void V1LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void V1LayerParameter::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& V1LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.name)
  return *name_;
}
inline void V1LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.name)
}
inline void V1LayerParameter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.V1LayerParameter.name)
}
inline void V1LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.V1LayerParameter.name)
}
inline ::std::string* V1LayerParameter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.name)
  return name_;
}
inline ::std::string* V1LayerParameter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void V1LayerParameter::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.name)
}

// repeated .caffe.NetStateRule include = 32;
inline int V1LayerParameter::include_size() const {
  return include_.size();
}
inline void V1LayerParameter::clear_include() {
  include_.Clear();
}
inline const ::caffe::NetStateRule& V1LayerParameter::include(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.include)
  return include_.Get(index);
}
inline ::caffe::NetStateRule* V1LayerParameter::mutable_include(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.include)
  return include_.Mutable(index);
}
inline ::caffe::NetStateRule* V1LayerParameter::add_include() {
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.include)
  return include_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
V1LayerParameter::include() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.include)
  return include_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
V1LayerParameter::mutable_include() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.include)
  return &include_;
}

// repeated .caffe.NetStateRule exclude = 33;
inline int V1LayerParameter::exclude_size() const {
  return exclude_.size();
}
inline void V1LayerParameter::clear_exclude() {
  exclude_.Clear();
}
inline const ::caffe::NetStateRule& V1LayerParameter::exclude(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.exclude)
  return exclude_.Get(index);
}
inline ::caffe::NetStateRule* V1LayerParameter::mutable_exclude(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.exclude)
  return exclude_.Mutable(index);
}
inline ::caffe::NetStateRule* V1LayerParameter::add_exclude() {
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.exclude)
  return exclude_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
V1LayerParameter::exclude() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.exclude)
  return exclude_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
V1LayerParameter::mutable_exclude() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.exclude)
  return &exclude_;
}

// optional .caffe.V1LayerParameter.LayerType type = 5;
inline bool V1LayerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void V1LayerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void V1LayerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void V1LayerParameter::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::caffe::V1LayerParameter_LayerType V1LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.type)
  return static_cast< ::caffe::V1LayerParameter_LayerType >(type_);
}
inline void V1LayerParameter::set_type(::caffe::V1LayerParameter_LayerType value) {
  assert(::caffe::V1LayerParameter_LayerType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.type)
}

// repeated .caffe.BlobProto blobs = 6;
inline int V1LayerParameter::blobs_size() const {
  return blobs_.size();
}
inline void V1LayerParameter::clear_blobs() {
  blobs_.Clear();
}
inline const ::caffe::BlobProto& V1LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.blobs)
  return blobs_.Get(index);
}
inline ::caffe::BlobProto* V1LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.blobs)
  return blobs_.Mutable(index);
}
inline ::caffe::BlobProto* V1LayerParameter::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.blobs)
  return blobs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
V1LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.blobs)
  return blobs_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
V1LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.blobs)
  return &blobs_;
}

// repeated string param = 1001;
inline int V1LayerParameter::param_size() const {
  return param_.size();
}
inline void V1LayerParameter::clear_param() {
  param_.Clear();
}
inline const ::std::string& V1LayerParameter::param(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.param)
  return param_.Get(index);
}
inline ::std::string* V1LayerParameter::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.param)
  return param_.Mutable(index);
}
inline void V1LayerParameter::set_param(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.param)
  param_.Mutable(index)->assign(value);
}
inline void V1LayerParameter::set_param(int index, const char* value) {
  param_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.V1LayerParameter.param)
}
inline void V1LayerParameter::set_param(int index, const char* value, size_t size) {
  param_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.V1LayerParameter.param)
}
inline ::std::string* V1LayerParameter::add_param() {
  return param_.Add();
}
inline void V1LayerParameter::add_param(const ::std::string& value) {
  param_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.param)
}
inline void V1LayerParameter::add_param(const char* value) {
  param_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.V1LayerParameter.param)
}
inline void V1LayerParameter::add_param(const char* value, size_t size) {
  param_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.V1LayerParameter.param)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
V1LayerParameter::param() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.param)
  return param_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
V1LayerParameter::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.param)
  return &param_;
}

// repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
inline int V1LayerParameter::blob_share_mode_size() const {
  return blob_share_mode_.size();
}
inline void V1LayerParameter::clear_blob_share_mode() {
  blob_share_mode_.Clear();
}
inline ::caffe::V1LayerParameter_DimCheckMode V1LayerParameter::blob_share_mode(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.blob_share_mode)
  return static_cast< ::caffe::V1LayerParameter_DimCheckMode >(blob_share_mode_.Get(index));
}
inline void V1LayerParameter::set_blob_share_mode(int index, ::caffe::V1LayerParameter_DimCheckMode value) {
  assert(::caffe::V1LayerParameter_DimCheckMode_IsValid(value));
  blob_share_mode_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.blob_share_mode)
}
inline void V1LayerParameter::add_blob_share_mode(::caffe::V1LayerParameter_DimCheckMode value) {
  assert(::caffe::V1LayerParameter_DimCheckMode_IsValid(value));
  blob_share_mode_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.blob_share_mode)
}
inline const ::google::protobuf::RepeatedField<int>&
V1LayerParameter::blob_share_mode() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.blob_share_mode)
  return blob_share_mode_;
}
inline ::google::protobuf::RepeatedField<int>*
V1LayerParameter::mutable_blob_share_mode() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.blob_share_mode)
  return &blob_share_mode_;
}

// repeated float blobs_lr = 7;
inline int V1LayerParameter::blobs_lr_size() const {
  return blobs_lr_.size();
}
inline void V1LayerParameter::clear_blobs_lr() {
  blobs_lr_.Clear();
}
inline float V1LayerParameter::blobs_lr(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.blobs_lr)
  return blobs_lr_.Get(index);
}
inline void V1LayerParameter::set_blobs_lr(int index, float value) {
  blobs_lr_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.blobs_lr)
}
inline void V1LayerParameter::add_blobs_lr(float value) {
  blobs_lr_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.blobs_lr)
}
inline const ::google::protobuf::RepeatedField< float >&
V1LayerParameter::blobs_lr() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.blobs_lr)
  return blobs_lr_;
}
inline ::google::protobuf::RepeatedField< float >*
V1LayerParameter::mutable_blobs_lr() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.blobs_lr)
  return &blobs_lr_;
}

// repeated float weight_decay = 8;
inline int V1LayerParameter::weight_decay_size() const {
  return weight_decay_.size();
}
inline void V1LayerParameter::clear_weight_decay() {
  weight_decay_.Clear();
}
inline float V1LayerParameter::weight_decay(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.weight_decay)
  return weight_decay_.Get(index);
}
inline void V1LayerParameter::set_weight_decay(int index, float value) {
  weight_decay_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.weight_decay)
}
inline void V1LayerParameter::add_weight_decay(float value) {
  weight_decay_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.weight_decay)
}
inline const ::google::protobuf::RepeatedField< float >&
V1LayerParameter::weight_decay() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.weight_decay)
  return weight_decay_;
}
inline ::google::protobuf::RepeatedField< float >*
V1LayerParameter::mutable_weight_decay() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.weight_decay)
  return &weight_decay_;
}

// repeated float loss_weight = 35;
inline int V1LayerParameter::loss_weight_size() const {
  return loss_weight_.size();
}
inline void V1LayerParameter::clear_loss_weight() {
  loss_weight_.Clear();
}
inline float V1LayerParameter::loss_weight(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.loss_weight)
  return loss_weight_.Get(index);
}
inline void V1LayerParameter::set_loss_weight(int index, float value) {
  loss_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.loss_weight)
}
inline void V1LayerParameter::add_loss_weight(float value) {
  loss_weight_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.loss_weight)
}
inline const ::google::protobuf::RepeatedField< float >&
V1LayerParameter::loss_weight() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.loss_weight)
  return loss_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
V1LayerParameter::mutable_loss_weight() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.loss_weight)
  return &loss_weight_;
}

// optional .caffe.AccuracyParameter accuracy_param = 27;
inline bool V1LayerParameter::has_accuracy_param() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void V1LayerParameter::set_has_accuracy_param() {
  _has_bits_[0] |= 0x00001000u;
}
inline void V1LayerParameter::clear_has_accuracy_param() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void V1LayerParameter::clear_accuracy_param() {
  if (accuracy_param_ != NULL) accuracy_param_->::caffe::AccuracyParameter::Clear();
  clear_has_accuracy_param();
}
inline const ::caffe::AccuracyParameter& V1LayerParameter::accuracy_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.accuracy_param)
  return accuracy_param_ != NULL ? *accuracy_param_ : *default_instance_->accuracy_param_;
}
inline ::caffe::AccuracyParameter* V1LayerParameter::mutable_accuracy_param() {
  set_has_accuracy_param();
  if (accuracy_param_ == NULL) accuracy_param_ = new ::caffe::AccuracyParameter;
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.accuracy_param)
  return accuracy_param_;
}
inline ::caffe::AccuracyParameter* V1LayerParameter::release_accuracy_param() {
  clear_has_accuracy_param();
  ::caffe::AccuracyParameter* temp = accuracy_param_;
  accuracy_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_accuracy_param(::caffe::AccuracyParameter* accuracy_param) {
  delete accuracy_param_;
  accuracy_param_ = accuracy_param;
  if (accuracy_param) {
    set_has_accuracy_param();
  } else {
    clear_has_accuracy_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.accuracy_param)
}

// optional .caffe.ArgMaxParameter argmax_param = 23;
inline bool V1LayerParameter::has_argmax_param() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void V1LayerParameter::set_has_argmax_param() {
  _has_bits_[0] |= 0x00002000u;
}
inline void V1LayerParameter::clear_has_argmax_param() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void V1LayerParameter::clear_argmax_param() {
  if (argmax_param_ != NULL) argmax_param_->::caffe::ArgMaxParameter::Clear();
  clear_has_argmax_param();
}
inline const ::caffe::ArgMaxParameter& V1LayerParameter::argmax_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.argmax_param)
  return argmax_param_ != NULL ? *argmax_param_ : *default_instance_->argmax_param_;
}
inline ::caffe::ArgMaxParameter* V1LayerParameter::mutable_argmax_param() {
  set_has_argmax_param();
  if (argmax_param_ == NULL) argmax_param_ = new ::caffe::ArgMaxParameter;
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.argmax_param)
  return argmax_param_;
}
inline ::caffe::ArgMaxParameter* V1LayerParameter::release_argmax_param() {
  clear_has_argmax_param();
  ::caffe::ArgMaxParameter* temp = argmax_param_;
  argmax_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_argmax_param(::caffe::ArgMaxParameter* argmax_param) {
  delete argmax_param_;
  argmax_param_ = argmax_param;
  if (argmax_param) {
    set_has_argmax_param();
  } else {
    clear_has_argmax_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.argmax_param)
}

// optional .caffe.ConcatParameter concat_param = 9;
inline bool V1LayerParameter::has_concat_param() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void V1LayerParameter::set_has_concat_param() {
  _has_bits_[0] |= 0x00004000u;
}
inline void V1LayerParameter::clear_has_concat_param() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void V1LayerParameter::clear_concat_param() {
  if (concat_param_ != NULL) concat_param_->::caffe::ConcatParameter::Clear();
  clear_has_concat_param();
}
inline const ::caffe::ConcatParameter& V1LayerParameter::concat_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.concat_param)
  return concat_param_ != NULL ? *concat_param_ : *default_instance_->concat_param_;
}
inline ::caffe::ConcatParameter* V1LayerParameter::mutable_concat_param() {
  set_has_concat_param();
  if (concat_param_ == NULL) concat_param_ = new ::caffe::ConcatParameter;
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.concat_param)
  return concat_param_;
}
inline ::caffe::ConcatParameter* V1LayerParameter::release_concat_param() {
  clear_has_concat_param();
  ::caffe::ConcatParameter* temp = concat_param_;
  concat_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_concat_param(::caffe::ConcatParameter* concat_param) {
  delete concat_param_;
  concat_param_ = concat_param;
  if (concat_param) {
    set_has_concat_param();
  } else {
    clear_has_concat_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.concat_param)
}

// optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
inline bool V1LayerParameter::has_contrastive_loss_param() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void V1LayerParameter::set_has_contrastive_loss_param() {
  _has_bits_[0] |= 0x00008000u;
}
inline void V1LayerParameter::clear_has_contrastive_loss_param() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void V1LayerParameter::clear_contrastive_loss_param() {
  if (contrastive_loss_param_ != NULL) contrastive_loss_param_->::caffe::ContrastiveLossParameter::Clear();
  clear_has_contrastive_loss_param();
}
inline const ::caffe::ContrastiveLossParameter& V1LayerParameter::contrastive_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.contrastive_loss_param)
  return contrastive_loss_param_ != NULL ? *contrastive_loss_param_ : *default_instance_->contrastive_loss_param_;
}
inline ::caffe::ContrastiveLossParameter* V1LayerParameter::mutable_contrastive_loss_param() {
  set_has_contrastive_loss_param();
  if (contrastive_loss_param_ == NULL) contrastive_loss_param_ = new ::caffe::ContrastiveLossParameter;
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.contrastive_loss_param)
  return contrastive_loss_param_;
}
inline ::caffe::ContrastiveLossParameter* V1LayerParameter::release_contrastive_loss_param() {
  clear_has_contrastive_loss_param();
  ::caffe::ContrastiveLossParameter* temp = contrastive_loss_param_;
  contrastive_loss_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_contrastive_loss_param(::caffe::ContrastiveLossParameter* contrastive_loss_param) {
  delete contrastive_loss_param_;
  contrastive_loss_param_ = contrastive_loss_param;
  if (contrastive_loss_param) {
    set_has_contrastive_loss_param();
  } else {
    clear_has_contrastive_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.contrastive_loss_param)
}

// optional .caffe.ConvolutionParameter convolution_param = 10;
inline bool V1LayerParameter::has_convolution_param() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void V1LayerParameter::set_has_convolution_param() {
  _has_bits_[0] |= 0x00010000u;
}
inline void V1LayerParameter::clear_has_convolution_param() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void V1LayerParameter::clear_convolution_param() {
  if (convolution_param_ != NULL) convolution_param_->::caffe::ConvolutionParameter::Clear();
  clear_has_convolution_param();
}
inline const ::caffe::ConvolutionParameter& V1LayerParameter::convolution_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.convolution_param)
  return convolution_param_ != NULL ? *convolution_param_ : *default_instance_->convolution_param_;
}
inline ::caffe::ConvolutionParameter* V1LayerParameter::mutable_convolution_param() {
  set_has_convolution_param();
  if (convolution_param_ == NULL) convolution_param_ = new ::caffe::ConvolutionParameter;
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.convolution_param)
  return convolution_param_;
}
inline ::caffe::ConvolutionParameter* V1LayerParameter::release_convolution_param() {
  clear_has_convolution_param();
  ::caffe::ConvolutionParameter* temp = convolution_param_;
  convolution_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_convolution_param(::caffe::ConvolutionParameter* convolution_param) {
  delete convolution_param_;
  convolution_param_ = convolution_param;
  if (convolution_param) {
    set_has_convolution_param();
  } else {
    clear_has_convolution_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.convolution_param)
}

// optional .caffe.DataParameter data_param = 11;
inline bool V1LayerParameter::has_data_param() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void V1LayerParameter::set_has_data_param() {
  _has_bits_[0] |= 0x00020000u;
}
inline void V1LayerParameter::clear_has_data_param() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void V1LayerParameter::clear_data_param() {
  if (data_param_ != NULL) data_param_->::caffe::DataParameter::Clear();
  clear_has_data_param();
}
inline const ::caffe::DataParameter& V1LayerParameter::data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.data_param)
  return data_param_ != NULL ? *data_param_ : *default_instance_->data_param_;
}
inline ::caffe::DataParameter* V1LayerParameter::mutable_data_param() {
  set_has_data_param();
  if (data_param_ == NULL) data_param_ = new ::caffe::DataParameter;
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.data_param)
  return data_param_;
}
inline ::caffe::DataParameter* V1LayerParameter::release_data_param() {
  clear_has_data_param();
  ::caffe::DataParameter* temp = data_param_;
  data_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_data_param(::caffe::DataParameter* data_param) {
  delete data_param_;
  data_param_ = data_param;
  if (data_param) {
    set_has_data_param();
  } else {
    clear_has_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.data_param)
}

// optional .caffe.DropoutParameter dropout_param = 12;
inline bool V1LayerParameter::has_dropout_param() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void V1LayerParameter::set_has_dropout_param() {
  _has_bits_[0] |= 0x00040000u;
}
inline void V1LayerParameter::clear_has_dropout_param() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void V1LayerParameter::clear_dropout_param() {
  if (dropout_param_ != NULL) dropout_param_->::caffe::DropoutParameter::Clear();
  clear_has_dropout_param();
}
inline const ::caffe::DropoutParameter& V1LayerParameter::dropout_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.dropout_param)
  return dropout_param_ != NULL ? *dropout_param_ : *default_instance_->dropout_param_;
}
inline ::caffe::DropoutParameter* V1LayerParameter::mutable_dropout_param() {
  set_has_dropout_param();
  if (dropout_param_ == NULL) dropout_param_ = new ::caffe::DropoutParameter;
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.dropout_param)
  return dropout_param_;
}
inline ::caffe::DropoutParameter* V1LayerParameter::release_dropout_param() {
  clear_has_dropout_param();
  ::caffe::DropoutParameter* temp = dropout_param_;
  dropout_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_dropout_param(::caffe::DropoutParameter* dropout_param) {
  delete dropout_param_;
  dropout_param_ = dropout_param;
  if (dropout_param) {
    set_has_dropout_param();
  } else {
    clear_has_dropout_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.dropout_param)
}

// optional .caffe.DummyDataParameter dummy_data_param = 26;
inline bool V1LayerParameter::has_dummy_data_param() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void V1LayerParameter::set_has_dummy_data_param() {
  _has_bits_[0] |= 0x00080000u;
}
inline void V1LayerParameter::clear_has_dummy_data_param() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void V1LayerParameter::clear_dummy_data_param() {
  if (dummy_data_param_ != NULL) dummy_data_param_->::caffe::DummyDataParameter::Clear();
  clear_has_dummy_data_param();
}
inline const ::caffe::DummyDataParameter& V1LayerParameter::dummy_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.dummy_data_param)
  return dummy_data_param_ != NULL ? *dummy_data_param_ : *default_instance_->dummy_data_param_;
}
inline ::caffe::DummyDataParameter* V1LayerParameter::mutable_dummy_data_param() {
  set_has_dummy_data_param();
  if (dummy_data_param_ == NULL) dummy_data_param_ = new ::caffe::DummyDataParameter;
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.dummy_data_param)
  return dummy_data_param_;
}
inline ::caffe::DummyDataParameter* V1LayerParameter::release_dummy_data_param() {
  clear_has_dummy_data_param();
  ::caffe::DummyDataParameter* temp = dummy_data_param_;
  dummy_data_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_dummy_data_param(::caffe::DummyDataParameter* dummy_data_param) {
  delete dummy_data_param_;
  dummy_data_param_ = dummy_data_param;
  if (dummy_data_param) {
    set_has_dummy_data_param();
  } else {
    clear_has_dummy_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.dummy_data_param)
}

// optional .caffe.EltwiseParameter eltwise_param = 24;
inline bool V1LayerParameter::has_eltwise_param() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void V1LayerParameter::set_has_eltwise_param() {
  _has_bits_[0] |= 0x00100000u;
}
inline void V1LayerParameter::clear_has_eltwise_param() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void V1LayerParameter::clear_eltwise_param() {
  if (eltwise_param_ != NULL) eltwise_param_->::caffe::EltwiseParameter::Clear();
  clear_has_eltwise_param();
}
inline const ::caffe::EltwiseParameter& V1LayerParameter::eltwise_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.eltwise_param)
  return eltwise_param_ != NULL ? *eltwise_param_ : *default_instance_->eltwise_param_;
}
inline ::caffe::EltwiseParameter* V1LayerParameter::mutable_eltwise_param() {
  set_has_eltwise_param();
  if (eltwise_param_ == NULL) eltwise_param_ = new ::caffe::EltwiseParameter;
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.eltwise_param)
  return eltwise_param_;
}
inline ::caffe::EltwiseParameter* V1LayerParameter::release_eltwise_param() {
  clear_has_eltwise_param();
  ::caffe::EltwiseParameter* temp = eltwise_param_;
  eltwise_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_eltwise_param(::caffe::EltwiseParameter* eltwise_param) {
  delete eltwise_param_;
  eltwise_param_ = eltwise_param;
  if (eltwise_param) {
    set_has_eltwise_param();
  } else {
    clear_has_eltwise_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.eltwise_param)
}

// optional .caffe.ExpParameter exp_param = 41;
inline bool V1LayerParameter::has_exp_param() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void V1LayerParameter::set_has_exp_param() {
  _has_bits_[0] |= 0x00200000u;
}
inline void V1LayerParameter::clear_has_exp_param() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void V1LayerParameter::clear_exp_param() {
  if (exp_param_ != NULL) exp_param_->::caffe::ExpParameter::Clear();
  clear_has_exp_param();
}
inline const ::caffe::ExpParameter& V1LayerParameter::exp_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.exp_param)
  return exp_param_ != NULL ? *exp_param_ : *default_instance_->exp_param_;
}
inline ::caffe::ExpParameter* V1LayerParameter::mutable_exp_param() {
  set_has_exp_param();
  if (exp_param_ == NULL) exp_param_ = new ::caffe::ExpParameter;
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.exp_param)
  return exp_param_;
}
inline ::caffe::ExpParameter* V1LayerParameter::release_exp_param() {
  clear_has_exp_param();
  ::caffe::ExpParameter* temp = exp_param_;
  exp_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_exp_param(::caffe::ExpParameter* exp_param) {
  delete exp_param_;
  exp_param_ = exp_param;
  if (exp_param) {
    set_has_exp_param();
  } else {
    clear_has_exp_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.exp_param)
}

// optional .caffe.HDF5DataParameter hdf5_data_param = 13;
inline bool V1LayerParameter::has_hdf5_data_param() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void V1LayerParameter::set_has_hdf5_data_param() {
  _has_bits_[0] |= 0x00400000u;
}
inline void V1LayerParameter::clear_has_hdf5_data_param() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void V1LayerParameter::clear_hdf5_data_param() {
  if (hdf5_data_param_ != NULL) hdf5_data_param_->::caffe::HDF5DataParameter::Clear();
  clear_has_hdf5_data_param();
}
inline const ::caffe::HDF5DataParameter& V1LayerParameter::hdf5_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.hdf5_data_param)
  return hdf5_data_param_ != NULL ? *hdf5_data_param_ : *default_instance_->hdf5_data_param_;
}
inline ::caffe::HDF5DataParameter* V1LayerParameter::mutable_hdf5_data_param() {
  set_has_hdf5_data_param();
  if (hdf5_data_param_ == NULL) hdf5_data_param_ = new ::caffe::HDF5DataParameter;
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.hdf5_data_param)
  return hdf5_data_param_;
}
inline ::caffe::HDF5DataParameter* V1LayerParameter::release_hdf5_data_param() {
  clear_has_hdf5_data_param();
  ::caffe::HDF5DataParameter* temp = hdf5_data_param_;
  hdf5_data_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_hdf5_data_param(::caffe::HDF5DataParameter* hdf5_data_param) {
  delete hdf5_data_param_;
  hdf5_data_param_ = hdf5_data_param;
  if (hdf5_data_param) {
    set_has_hdf5_data_param();
  } else {
    clear_has_hdf5_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.hdf5_data_param)
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
inline bool V1LayerParameter::has_hdf5_output_param() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void V1LayerParameter::set_has_hdf5_output_param() {
  _has_bits_[0] |= 0x00800000u;
}
inline void V1LayerParameter::clear_has_hdf5_output_param() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void V1LayerParameter::clear_hdf5_output_param() {
  if (hdf5_output_param_ != NULL) hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
  clear_has_hdf5_output_param();
}
inline const ::caffe::HDF5OutputParameter& V1LayerParameter::hdf5_output_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.hdf5_output_param)
  return hdf5_output_param_ != NULL ? *hdf5_output_param_ : *default_instance_->hdf5_output_param_;
}
inline ::caffe::HDF5OutputParameter* V1LayerParameter::mutable_hdf5_output_param() {
  set_has_hdf5_output_param();
  if (hdf5_output_param_ == NULL) hdf5_output_param_ = new ::caffe::HDF5OutputParameter;
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.hdf5_output_param)
  return hdf5_output_param_;
}
inline ::caffe::HDF5OutputParameter* V1LayerParameter::release_hdf5_output_param() {
  clear_has_hdf5_output_param();
  ::caffe::HDF5OutputParameter* temp = hdf5_output_param_;
  hdf5_output_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param) {
  delete hdf5_output_param_;
  hdf5_output_param_ = hdf5_output_param;
  if (hdf5_output_param) {
    set_has_hdf5_output_param();
  } else {
    clear_has_hdf5_output_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.hdf5_output_param)
}

// optional .caffe.HingeLossParameter hinge_loss_param = 29;
inline bool V1LayerParameter::has_hinge_loss_param() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void V1LayerParameter::set_has_hinge_loss_param() {
  _has_bits_[0] |= 0x01000000u;
}
inline void V1LayerParameter::clear_has_hinge_loss_param() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void V1LayerParameter::clear_hinge_loss_param() {
  if (hinge_loss_param_ != NULL) hinge_loss_param_->::caffe::HingeLossParameter::Clear();
  clear_has_hinge_loss_param();
}
inline const ::caffe::HingeLossParameter& V1LayerParameter::hinge_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.hinge_loss_param)
  return hinge_loss_param_ != NULL ? *hinge_loss_param_ : *default_instance_->hinge_loss_param_;
}
inline ::caffe::HingeLossParameter* V1LayerParameter::mutable_hinge_loss_param() {
  set_has_hinge_loss_param();
  if (hinge_loss_param_ == NULL) hinge_loss_param_ = new ::caffe::HingeLossParameter;
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.hinge_loss_param)
  return hinge_loss_param_;
}
inline ::caffe::HingeLossParameter* V1LayerParameter::release_hinge_loss_param() {
  clear_has_hinge_loss_param();
  ::caffe::HingeLossParameter* temp = hinge_loss_param_;
  hinge_loss_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_hinge_loss_param(::caffe::HingeLossParameter* hinge_loss_param) {
  delete hinge_loss_param_;
  hinge_loss_param_ = hinge_loss_param;
  if (hinge_loss_param) {
    set_has_hinge_loss_param();
  } else {
    clear_has_hinge_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.hinge_loss_param)
}

// optional .caffe.ImageDataParameter image_data_param = 15;
inline bool V1LayerParameter::has_image_data_param() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void V1LayerParameter::set_has_image_data_param() {
  _has_bits_[0] |= 0x02000000u;
}
inline void V1LayerParameter::clear_has_image_data_param() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void V1LayerParameter::clear_image_data_param() {
  if (image_data_param_ != NULL) image_data_param_->::caffe::ImageDataParameter::Clear();
  clear_has_image_data_param();
}
inline const ::caffe::ImageDataParameter& V1LayerParameter::image_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.image_data_param)
  return image_data_param_ != NULL ? *image_data_param_ : *default_instance_->image_data_param_;
}
inline ::caffe::ImageDataParameter* V1LayerParameter::mutable_image_data_param() {
  set_has_image_data_param();
  if (image_data_param_ == NULL) image_data_param_ = new ::caffe::ImageDataParameter;
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.image_data_param)
  return image_data_param_;
}
inline ::caffe::ImageDataParameter* V1LayerParameter::release_image_data_param() {
  clear_has_image_data_param();
  ::caffe::ImageDataParameter* temp = image_data_param_;
  image_data_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_image_data_param(::caffe::ImageDataParameter* image_data_param) {
  delete image_data_param_;
  image_data_param_ = image_data_param;
  if (image_data_param) {
    set_has_image_data_param();
  } else {
    clear_has_image_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.image_data_param)
}

// optional .caffe.InfogainLossParameter infogain_loss_param = 16;
inline bool V1LayerParameter::has_infogain_loss_param() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void V1LayerParameter::set_has_infogain_loss_param() {
  _has_bits_[0] |= 0x04000000u;
}
inline void V1LayerParameter::clear_has_infogain_loss_param() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void V1LayerParameter::clear_infogain_loss_param() {
  if (infogain_loss_param_ != NULL) infogain_loss_param_->::caffe::InfogainLossParameter::Clear();
  clear_has_infogain_loss_param();
}
inline const ::caffe::InfogainLossParameter& V1LayerParameter::infogain_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.infogain_loss_param)
  return infogain_loss_param_ != NULL ? *infogain_loss_param_ : *default_instance_->infogain_loss_param_;
}
inline ::caffe::InfogainLossParameter* V1LayerParameter::mutable_infogain_loss_param() {
  set_has_infogain_loss_param();
  if (infogain_loss_param_ == NULL) infogain_loss_param_ = new ::caffe::InfogainLossParameter;
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.infogain_loss_param)
  return infogain_loss_param_;
}
inline ::caffe::InfogainLossParameter* V1LayerParameter::release_infogain_loss_param() {
  clear_has_infogain_loss_param();
  ::caffe::InfogainLossParameter* temp = infogain_loss_param_;
  infogain_loss_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_infogain_loss_param(::caffe::InfogainLossParameter* infogain_loss_param) {
  delete infogain_loss_param_;
  infogain_loss_param_ = infogain_loss_param;
  if (infogain_loss_param) {
    set_has_infogain_loss_param();
  } else {
    clear_has_infogain_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.infogain_loss_param)
}

// optional .caffe.InnerProductParameter inner_product_param = 17;
inline bool V1LayerParameter::has_inner_product_param() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void V1LayerParameter::set_has_inner_product_param() {
  _has_bits_[0] |= 0x08000000u;
}
inline void V1LayerParameter::clear_has_inner_product_param() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void V1LayerParameter::clear_inner_product_param() {
  if (inner_product_param_ != NULL) inner_product_param_->::caffe::InnerProductParameter::Clear();
  clear_has_inner_product_param();
}
inline const ::caffe::InnerProductParameter& V1LayerParameter::inner_product_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.inner_product_param)
  return inner_product_param_ != NULL ? *inner_product_param_ : *default_instance_->inner_product_param_;
}
inline ::caffe::InnerProductParameter* V1LayerParameter::mutable_inner_product_param() {
  set_has_inner_product_param();
  if (inner_product_param_ == NULL) inner_product_param_ = new ::caffe::InnerProductParameter;
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.inner_product_param)
  return inner_product_param_;
}
inline ::caffe::InnerProductParameter* V1LayerParameter::release_inner_product_param() {
  clear_has_inner_product_param();
  ::caffe::InnerProductParameter* temp = inner_product_param_;
  inner_product_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_inner_product_param(::caffe::InnerProductParameter* inner_product_param) {
  delete inner_product_param_;
  inner_product_param_ = inner_product_param;
  if (inner_product_param) {
    set_has_inner_product_param();
  } else {
    clear_has_inner_product_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.inner_product_param)
}

// optional .caffe.LRNParameter lrn_param = 18;
inline bool V1LayerParameter::has_lrn_param() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void V1LayerParameter::set_has_lrn_param() {
  _has_bits_[0] |= 0x10000000u;
}
inline void V1LayerParameter::clear_has_lrn_param() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void V1LayerParameter::clear_lrn_param() {
  if (lrn_param_ != NULL) lrn_param_->::caffe::LRNParameter::Clear();
  clear_has_lrn_param();
}
inline const ::caffe::LRNParameter& V1LayerParameter::lrn_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.lrn_param)
  return lrn_param_ != NULL ? *lrn_param_ : *default_instance_->lrn_param_;
}
inline ::caffe::LRNParameter* V1LayerParameter::mutable_lrn_param() {
  set_has_lrn_param();
  if (lrn_param_ == NULL) lrn_param_ = new ::caffe::LRNParameter;
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.lrn_param)
  return lrn_param_;
}
inline ::caffe::LRNParameter* V1LayerParameter::release_lrn_param() {
  clear_has_lrn_param();
  ::caffe::LRNParameter* temp = lrn_param_;
  lrn_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_lrn_param(::caffe::LRNParameter* lrn_param) {
  delete lrn_param_;
  lrn_param_ = lrn_param;
  if (lrn_param) {
    set_has_lrn_param();
  } else {
    clear_has_lrn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.lrn_param)
}

// optional .caffe.MemoryDataParameter memory_data_param = 22;
inline bool V1LayerParameter::has_memory_data_param() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void V1LayerParameter::set_has_memory_data_param() {
  _has_bits_[0] |= 0x20000000u;
}
inline void V1LayerParameter::clear_has_memory_data_param() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void V1LayerParameter::clear_memory_data_param() {
  if (memory_data_param_ != NULL) memory_data_param_->::caffe::MemoryDataParameter::Clear();
  clear_has_memory_data_param();
}
inline const ::caffe::MemoryDataParameter& V1LayerParameter::memory_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.memory_data_param)
  return memory_data_param_ != NULL ? *memory_data_param_ : *default_instance_->memory_data_param_;
}
inline ::caffe::MemoryDataParameter* V1LayerParameter::mutable_memory_data_param() {
  set_has_memory_data_param();
  if (memory_data_param_ == NULL) memory_data_param_ = new ::caffe::MemoryDataParameter;
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.memory_data_param)
  return memory_data_param_;
}
inline ::caffe::MemoryDataParameter* V1LayerParameter::release_memory_data_param() {
  clear_has_memory_data_param();
  ::caffe::MemoryDataParameter* temp = memory_data_param_;
  memory_data_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_memory_data_param(::caffe::MemoryDataParameter* memory_data_param) {
  delete memory_data_param_;
  memory_data_param_ = memory_data_param;
  if (memory_data_param) {
    set_has_memory_data_param();
  } else {
    clear_has_memory_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.memory_data_param)
}

// optional .caffe.MVNParameter mvn_param = 34;
inline bool V1LayerParameter::has_mvn_param() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void V1LayerParameter::set_has_mvn_param() {
  _has_bits_[0] |= 0x40000000u;
}
inline void V1LayerParameter::clear_has_mvn_param() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void V1LayerParameter::clear_mvn_param() {
  if (mvn_param_ != NULL) mvn_param_->::caffe::MVNParameter::Clear();
  clear_has_mvn_param();
}
inline const ::caffe::MVNParameter& V1LayerParameter::mvn_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.mvn_param)
  return mvn_param_ != NULL ? *mvn_param_ : *default_instance_->mvn_param_;
}
inline ::caffe::MVNParameter* V1LayerParameter::mutable_mvn_param() {
  set_has_mvn_param();
  if (mvn_param_ == NULL) mvn_param_ = new ::caffe::MVNParameter;
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.mvn_param)
  return mvn_param_;
}
inline ::caffe::MVNParameter* V1LayerParameter::release_mvn_param() {
  clear_has_mvn_param();
  ::caffe::MVNParameter* temp = mvn_param_;
  mvn_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_mvn_param(::caffe::MVNParameter* mvn_param) {
  delete mvn_param_;
  mvn_param_ = mvn_param;
  if (mvn_param) {
    set_has_mvn_param();
  } else {
    clear_has_mvn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.mvn_param)
}

// optional .caffe.ParameterParameter parameter_param = 145;
inline bool V1LayerParameter::has_parameter_param() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void V1LayerParameter::set_has_parameter_param() {
  _has_bits_[0] |= 0x80000000u;
}
inline void V1LayerParameter::clear_has_parameter_param() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void V1LayerParameter::clear_parameter_param() {
  if (parameter_param_ != NULL) parameter_param_->::caffe::ParameterParameter::Clear();
  clear_has_parameter_param();
}
inline const ::caffe::ParameterParameter& V1LayerParameter::parameter_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.parameter_param)
  return parameter_param_ != NULL ? *parameter_param_ : *default_instance_->parameter_param_;
}
inline ::caffe::ParameterParameter* V1LayerParameter::mutable_parameter_param() {
  set_has_parameter_param();
  if (parameter_param_ == NULL) parameter_param_ = new ::caffe::ParameterParameter;
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.parameter_param)
  return parameter_param_;
}
inline ::caffe::ParameterParameter* V1LayerParameter::release_parameter_param() {
  clear_has_parameter_param();
  ::caffe::ParameterParameter* temp = parameter_param_;
  parameter_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_parameter_param(::caffe::ParameterParameter* parameter_param) {
  delete parameter_param_;
  parameter_param_ = parameter_param;
  if (parameter_param) {
    set_has_parameter_param();
  } else {
    clear_has_parameter_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.parameter_param)
}

// optional .caffe.PoolingParameter pooling_param = 19;
inline bool V1LayerParameter::has_pooling_param() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void V1LayerParameter::set_has_pooling_param() {
  _has_bits_[1] |= 0x00000001u;
}
inline void V1LayerParameter::clear_has_pooling_param() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void V1LayerParameter::clear_pooling_param() {
  if (pooling_param_ != NULL) pooling_param_->::caffe::PoolingParameter::Clear();
  clear_has_pooling_param();
}
inline const ::caffe::PoolingParameter& V1LayerParameter::pooling_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.pooling_param)
  return pooling_param_ != NULL ? *pooling_param_ : *default_instance_->pooling_param_;
}
inline ::caffe::PoolingParameter* V1LayerParameter::mutable_pooling_param() {
  set_has_pooling_param();
  if (pooling_param_ == NULL) pooling_param_ = new ::caffe::PoolingParameter;
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.pooling_param)
  return pooling_param_;
}
inline ::caffe::PoolingParameter* V1LayerParameter::release_pooling_param() {
  clear_has_pooling_param();
  ::caffe::PoolingParameter* temp = pooling_param_;
  pooling_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_pooling_param(::caffe::PoolingParameter* pooling_param) {
  delete pooling_param_;
  pooling_param_ = pooling_param;
  if (pooling_param) {
    set_has_pooling_param();
  } else {
    clear_has_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.pooling_param)
}

// optional .caffe.PowerParameter power_param = 21;
inline bool V1LayerParameter::has_power_param() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void V1LayerParameter::set_has_power_param() {
  _has_bits_[1] |= 0x00000002u;
}
inline void V1LayerParameter::clear_has_power_param() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void V1LayerParameter::clear_power_param() {
  if (power_param_ != NULL) power_param_->::caffe::PowerParameter::Clear();
  clear_has_power_param();
}
inline const ::caffe::PowerParameter& V1LayerParameter::power_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.power_param)
  return power_param_ != NULL ? *power_param_ : *default_instance_->power_param_;
}
inline ::caffe::PowerParameter* V1LayerParameter::mutable_power_param() {
  set_has_power_param();
  if (power_param_ == NULL) power_param_ = new ::caffe::PowerParameter;
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.power_param)
  return power_param_;
}
inline ::caffe::PowerParameter* V1LayerParameter::release_power_param() {
  clear_has_power_param();
  ::caffe::PowerParameter* temp = power_param_;
  power_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_power_param(::caffe::PowerParameter* power_param) {
  delete power_param_;
  power_param_ = power_param;
  if (power_param) {
    set_has_power_param();
  } else {
    clear_has_power_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.power_param)
}

// optional .caffe.ReLUParameter relu_param = 30;
inline bool V1LayerParameter::has_relu_param() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void V1LayerParameter::set_has_relu_param() {
  _has_bits_[1] |= 0x00000004u;
}
inline void V1LayerParameter::clear_has_relu_param() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void V1LayerParameter::clear_relu_param() {
  if (relu_param_ != NULL) relu_param_->::caffe::ReLUParameter::Clear();
  clear_has_relu_param();
}
inline const ::caffe::ReLUParameter& V1LayerParameter::relu_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.relu_param)
  return relu_param_ != NULL ? *relu_param_ : *default_instance_->relu_param_;
}
inline ::caffe::ReLUParameter* V1LayerParameter::mutable_relu_param() {
  set_has_relu_param();
  if (relu_param_ == NULL) relu_param_ = new ::caffe::ReLUParameter;
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.relu_param)
  return relu_param_;
}
inline ::caffe::ReLUParameter* V1LayerParameter::release_relu_param() {
  clear_has_relu_param();
  ::caffe::ReLUParameter* temp = relu_param_;
  relu_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_relu_param(::caffe::ReLUParameter* relu_param) {
  delete relu_param_;
  relu_param_ = relu_param;
  if (relu_param) {
    set_has_relu_param();
  } else {
    clear_has_relu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.relu_param)
}

// optional .caffe.SigmoidParameter sigmoid_param = 38;
inline bool V1LayerParameter::has_sigmoid_param() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void V1LayerParameter::set_has_sigmoid_param() {
  _has_bits_[1] |= 0x00000008u;
}
inline void V1LayerParameter::clear_has_sigmoid_param() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void V1LayerParameter::clear_sigmoid_param() {
  if (sigmoid_param_ != NULL) sigmoid_param_->::caffe::SigmoidParameter::Clear();
  clear_has_sigmoid_param();
}
inline const ::caffe::SigmoidParameter& V1LayerParameter::sigmoid_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.sigmoid_param)
  return sigmoid_param_ != NULL ? *sigmoid_param_ : *default_instance_->sigmoid_param_;
}
inline ::caffe::SigmoidParameter* V1LayerParameter::mutable_sigmoid_param() {
  set_has_sigmoid_param();
  if (sigmoid_param_ == NULL) sigmoid_param_ = new ::caffe::SigmoidParameter;
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.sigmoid_param)
  return sigmoid_param_;
}
inline ::caffe::SigmoidParameter* V1LayerParameter::release_sigmoid_param() {
  clear_has_sigmoid_param();
  ::caffe::SigmoidParameter* temp = sigmoid_param_;
  sigmoid_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_sigmoid_param(::caffe::SigmoidParameter* sigmoid_param) {
  delete sigmoid_param_;
  sigmoid_param_ = sigmoid_param;
  if (sigmoid_param) {
    set_has_sigmoid_param();
  } else {
    clear_has_sigmoid_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.sigmoid_param)
}

// optional .caffe.SoftmaxParameter softmax_param = 39;
inline bool V1LayerParameter::has_softmax_param() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void V1LayerParameter::set_has_softmax_param() {
  _has_bits_[1] |= 0x00000010u;
}
inline void V1LayerParameter::clear_has_softmax_param() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void V1LayerParameter::clear_softmax_param() {
  if (softmax_param_ != NULL) softmax_param_->::caffe::SoftmaxParameter::Clear();
  clear_has_softmax_param();
}
inline const ::caffe::SoftmaxParameter& V1LayerParameter::softmax_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.softmax_param)
  return softmax_param_ != NULL ? *softmax_param_ : *default_instance_->softmax_param_;
}
inline ::caffe::SoftmaxParameter* V1LayerParameter::mutable_softmax_param() {
  set_has_softmax_param();
  if (softmax_param_ == NULL) softmax_param_ = new ::caffe::SoftmaxParameter;
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.softmax_param)
  return softmax_param_;
}
inline ::caffe::SoftmaxParameter* V1LayerParameter::release_softmax_param() {
  clear_has_softmax_param();
  ::caffe::SoftmaxParameter* temp = softmax_param_;
  softmax_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_softmax_param(::caffe::SoftmaxParameter* softmax_param) {
  delete softmax_param_;
  softmax_param_ = softmax_param;
  if (softmax_param) {
    set_has_softmax_param();
  } else {
    clear_has_softmax_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.softmax_param)
}

// optional .caffe.SliceParameter slice_param = 31;
inline bool V1LayerParameter::has_slice_param() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void V1LayerParameter::set_has_slice_param() {
  _has_bits_[1] |= 0x00000020u;
}
inline void V1LayerParameter::clear_has_slice_param() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void V1LayerParameter::clear_slice_param() {
  if (slice_param_ != NULL) slice_param_->::caffe::SliceParameter::Clear();
  clear_has_slice_param();
}
inline const ::caffe::SliceParameter& V1LayerParameter::slice_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.slice_param)
  return slice_param_ != NULL ? *slice_param_ : *default_instance_->slice_param_;
}
inline ::caffe::SliceParameter* V1LayerParameter::mutable_slice_param() {
  set_has_slice_param();
  if (slice_param_ == NULL) slice_param_ = new ::caffe::SliceParameter;
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.slice_param)
  return slice_param_;
}
inline ::caffe::SliceParameter* V1LayerParameter::release_slice_param() {
  clear_has_slice_param();
  ::caffe::SliceParameter* temp = slice_param_;
  slice_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_slice_param(::caffe::SliceParameter* slice_param) {
  delete slice_param_;
  slice_param_ = slice_param;
  if (slice_param) {
    set_has_slice_param();
  } else {
    clear_has_slice_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.slice_param)
}

// optional .caffe.TanHParameter tanh_param = 37;
inline bool V1LayerParameter::has_tanh_param() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void V1LayerParameter::set_has_tanh_param() {
  _has_bits_[1] |= 0x00000040u;
}
inline void V1LayerParameter::clear_has_tanh_param() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void V1LayerParameter::clear_tanh_param() {
  if (tanh_param_ != NULL) tanh_param_->::caffe::TanHParameter::Clear();
  clear_has_tanh_param();
}
inline const ::caffe::TanHParameter& V1LayerParameter::tanh_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.tanh_param)
  return tanh_param_ != NULL ? *tanh_param_ : *default_instance_->tanh_param_;
}
inline ::caffe::TanHParameter* V1LayerParameter::mutable_tanh_param() {
  set_has_tanh_param();
  if (tanh_param_ == NULL) tanh_param_ = new ::caffe::TanHParameter;
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.tanh_param)
  return tanh_param_;
}
inline ::caffe::TanHParameter* V1LayerParameter::release_tanh_param() {
  clear_has_tanh_param();
  ::caffe::TanHParameter* temp = tanh_param_;
  tanh_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_tanh_param(::caffe::TanHParameter* tanh_param) {
  delete tanh_param_;
  tanh_param_ = tanh_param;
  if (tanh_param) {
    set_has_tanh_param();
  } else {
    clear_has_tanh_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.tanh_param)
}

// optional .caffe.ThresholdParameter threshold_param = 25;
inline bool V1LayerParameter::has_threshold_param() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void V1LayerParameter::set_has_threshold_param() {
  _has_bits_[1] |= 0x00000080u;
}
inline void V1LayerParameter::clear_has_threshold_param() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void V1LayerParameter::clear_threshold_param() {
  if (threshold_param_ != NULL) threshold_param_->::caffe::ThresholdParameter::Clear();
  clear_has_threshold_param();
}
inline const ::caffe::ThresholdParameter& V1LayerParameter::threshold_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.threshold_param)
  return threshold_param_ != NULL ? *threshold_param_ : *default_instance_->threshold_param_;
}
inline ::caffe::ThresholdParameter* V1LayerParameter::mutable_threshold_param() {
  set_has_threshold_param();
  if (threshold_param_ == NULL) threshold_param_ = new ::caffe::ThresholdParameter;
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.threshold_param)
  return threshold_param_;
}
inline ::caffe::ThresholdParameter* V1LayerParameter::release_threshold_param() {
  clear_has_threshold_param();
  ::caffe::ThresholdParameter* temp = threshold_param_;
  threshold_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_threshold_param(::caffe::ThresholdParameter* threshold_param) {
  delete threshold_param_;
  threshold_param_ = threshold_param;
  if (threshold_param) {
    set_has_threshold_param();
  } else {
    clear_has_threshold_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.threshold_param)
}

// optional .caffe.WindowDataParameter window_data_param = 20;
inline bool V1LayerParameter::has_window_data_param() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void V1LayerParameter::set_has_window_data_param() {
  _has_bits_[1] |= 0x00000100u;
}
inline void V1LayerParameter::clear_has_window_data_param() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void V1LayerParameter::clear_window_data_param() {
  if (window_data_param_ != NULL) window_data_param_->::caffe::WindowDataParameter::Clear();
  clear_has_window_data_param();
}
inline const ::caffe::WindowDataParameter& V1LayerParameter::window_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.window_data_param)
  return window_data_param_ != NULL ? *window_data_param_ : *default_instance_->window_data_param_;
}
inline ::caffe::WindowDataParameter* V1LayerParameter::mutable_window_data_param() {
  set_has_window_data_param();
  if (window_data_param_ == NULL) window_data_param_ = new ::caffe::WindowDataParameter;
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.window_data_param)
  return window_data_param_;
}
inline ::caffe::WindowDataParameter* V1LayerParameter::release_window_data_param() {
  clear_has_window_data_param();
  ::caffe::WindowDataParameter* temp = window_data_param_;
  window_data_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_window_data_param(::caffe::WindowDataParameter* window_data_param) {
  delete window_data_param_;
  window_data_param_ = window_data_param;
  if (window_data_param) {
    set_has_window_data_param();
  } else {
    clear_has_window_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.window_data_param)
}

// optional .caffe.TransformationParameter transform_param = 36;
inline bool V1LayerParameter::has_transform_param() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void V1LayerParameter::set_has_transform_param() {
  _has_bits_[1] |= 0x00000200u;
}
inline void V1LayerParameter::clear_has_transform_param() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void V1LayerParameter::clear_transform_param() {
  if (transform_param_ != NULL) transform_param_->::caffe::TransformationParameter::Clear();
  clear_has_transform_param();
}
inline const ::caffe::TransformationParameter& V1LayerParameter::transform_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.transform_param)
  return transform_param_ != NULL ? *transform_param_ : *default_instance_->transform_param_;
}
inline ::caffe::TransformationParameter* V1LayerParameter::mutable_transform_param() {
  set_has_transform_param();
  if (transform_param_ == NULL) transform_param_ = new ::caffe::TransformationParameter;
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.transform_param)
  return transform_param_;
}
inline ::caffe::TransformationParameter* V1LayerParameter::release_transform_param() {
  clear_has_transform_param();
  ::caffe::TransformationParameter* temp = transform_param_;
  transform_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_transform_param(::caffe::TransformationParameter* transform_param) {
  delete transform_param_;
  transform_param_ = transform_param;
  if (transform_param) {
    set_has_transform_param();
  } else {
    clear_has_transform_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.transform_param)
}

// optional .caffe.LossParameter loss_param = 42;
inline bool V1LayerParameter::has_loss_param() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void V1LayerParameter::set_has_loss_param() {
  _has_bits_[1] |= 0x00000400u;
}
inline void V1LayerParameter::clear_has_loss_param() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void V1LayerParameter::clear_loss_param() {
  if (loss_param_ != NULL) loss_param_->::caffe::LossParameter::Clear();
  clear_has_loss_param();
}
inline const ::caffe::LossParameter& V1LayerParameter::loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.loss_param)
  return loss_param_ != NULL ? *loss_param_ : *default_instance_->loss_param_;
}
inline ::caffe::LossParameter* V1LayerParameter::mutable_loss_param() {
  set_has_loss_param();
  if (loss_param_ == NULL) loss_param_ = new ::caffe::LossParameter;
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.loss_param)
  return loss_param_;
}
inline ::caffe::LossParameter* V1LayerParameter::release_loss_param() {
  clear_has_loss_param();
  ::caffe::LossParameter* temp = loss_param_;
  loss_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_loss_param(::caffe::LossParameter* loss_param) {
  delete loss_param_;
  loss_param_ = loss_param;
  if (loss_param) {
    set_has_loss_param();
  } else {
    clear_has_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.loss_param)
}

// optional .caffe.V0LayerParameter layer = 1;
inline bool V1LayerParameter::has_layer() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void V1LayerParameter::set_has_layer() {
  _has_bits_[1] |= 0x00000800u;
}
inline void V1LayerParameter::clear_has_layer() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void V1LayerParameter::clear_layer() {
  if (layer_ != NULL) layer_->::caffe::V0LayerParameter::Clear();
  clear_has_layer();
}
inline const ::caffe::V0LayerParameter& V1LayerParameter::layer() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.layer)
  return layer_ != NULL ? *layer_ : *default_instance_->layer_;
}
inline ::caffe::V0LayerParameter* V1LayerParameter::mutable_layer() {
  set_has_layer();
  if (layer_ == NULL) layer_ = new ::caffe::V0LayerParameter;
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.layer)
  return layer_;
}
inline ::caffe::V0LayerParameter* V1LayerParameter::release_layer() {
  clear_has_layer();
  ::caffe::V0LayerParameter* temp = layer_;
  layer_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_layer(::caffe::V0LayerParameter* layer) {
  delete layer_;
  layer_ = layer;
  if (layer) {
    set_has_layer();
  } else {
    clear_has_layer();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.layer)
}

// -------------------------------------------------------------------

// V0LayerParameter

// optional string name = 1;
inline bool V0LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void V0LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void V0LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void V0LayerParameter::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& V0LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.name)
  return *name_;
}
inline void V0LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.name)
}
inline void V0LayerParameter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.name)
}
inline void V0LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.name)
}
inline ::std::string* V0LayerParameter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.name)
  return name_;
}
inline ::std::string* V0LayerParameter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void V0LayerParameter::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.name)
}

// optional string type = 2;
inline bool V0LayerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void V0LayerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void V0LayerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void V0LayerParameter::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& V0LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.type)
  return *type_;
}
inline void V0LayerParameter::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.type)
}
inline void V0LayerParameter::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.type)
}
inline void V0LayerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.type)
}
inline ::std::string* V0LayerParameter::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.type)
  return type_;
}
inline ::std::string* V0LayerParameter::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void V0LayerParameter::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.type)
}

// optional uint32 num_output = 3;
inline bool V0LayerParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void V0LayerParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000004u;
}
inline void V0LayerParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void V0LayerParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 V0LayerParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.num_output)
  return num_output_;
}
inline void V0LayerParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.num_output)
}

// optional bool biasterm = 4 [default = true];
inline bool V0LayerParameter::has_biasterm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void V0LayerParameter::set_has_biasterm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void V0LayerParameter::clear_has_biasterm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void V0LayerParameter::clear_biasterm() {
  biasterm_ = true;
  clear_has_biasterm();
}
inline bool V0LayerParameter::biasterm() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.biasterm)
  return biasterm_;
}
inline void V0LayerParameter::set_biasterm(bool value) {
  set_has_biasterm();
  biasterm_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.biasterm)
}

// optional .caffe.FillerParameter weight_filler = 5;
inline bool V0LayerParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void V0LayerParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000010u;
}
inline void V0LayerParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void V0LayerParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& V0LayerParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
inline ::caffe::FillerParameter* V0LayerParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) weight_filler_ = new ::caffe::FillerParameter;
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.weight_filler)
  return weight_filler_;
}
inline ::caffe::FillerParameter* V0LayerParameter::release_weight_filler() {
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void V0LayerParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 6;
inline bool V0LayerParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void V0LayerParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000020u;
}
inline void V0LayerParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void V0LayerParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& V0LayerParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
inline ::caffe::FillerParameter* V0LayerParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) bias_filler_ = new ::caffe::FillerParameter;
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.bias_filler)
  return bias_filler_;
}
inline ::caffe::FillerParameter* V0LayerParameter::release_bias_filler() {
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void V0LayerParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.bias_filler)
}

// optional uint32 pad = 7 [default = 0];
inline bool V0LayerParameter::has_pad() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void V0LayerParameter::set_has_pad() {
  _has_bits_[0] |= 0x00000040u;
}
inline void V0LayerParameter::clear_has_pad() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void V0LayerParameter::clear_pad() {
  pad_ = 0u;
  clear_has_pad();
}
inline ::google::protobuf::uint32 V0LayerParameter::pad() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.pad)
  return pad_;
}
inline void V0LayerParameter::set_pad(::google::protobuf::uint32 value) {
  set_has_pad();
  pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.pad)
}

// optional uint32 kernelsize = 8;
inline bool V0LayerParameter::has_kernelsize() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void V0LayerParameter::set_has_kernelsize() {
  _has_bits_[0] |= 0x00000080u;
}
inline void V0LayerParameter::clear_has_kernelsize() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void V0LayerParameter::clear_kernelsize() {
  kernelsize_ = 0u;
  clear_has_kernelsize();
}
inline ::google::protobuf::uint32 V0LayerParameter::kernelsize() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.kernelsize)
  return kernelsize_;
}
inline void V0LayerParameter::set_kernelsize(::google::protobuf::uint32 value) {
  set_has_kernelsize();
  kernelsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.kernelsize)
}

// optional uint32 group = 9 [default = 1];
inline bool V0LayerParameter::has_group() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void V0LayerParameter::set_has_group() {
  _has_bits_[0] |= 0x00000100u;
}
inline void V0LayerParameter::clear_has_group() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void V0LayerParameter::clear_group() {
  group_ = 1u;
  clear_has_group();
}
inline ::google::protobuf::uint32 V0LayerParameter::group() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.group)
  return group_;
}
inline void V0LayerParameter::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.group)
}

// optional uint32 stride = 10 [default = 1];
inline bool V0LayerParameter::has_stride() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void V0LayerParameter::set_has_stride() {
  _has_bits_[0] |= 0x00000200u;
}
inline void V0LayerParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void V0LayerParameter::clear_stride() {
  stride_ = 1u;
  clear_has_stride();
}
inline ::google::protobuf::uint32 V0LayerParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.stride)
  return stride_;
}
inline void V0LayerParameter::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.stride)
}

// optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
inline bool V0LayerParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void V0LayerParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000400u;
}
inline void V0LayerParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void V0LayerParameter::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
inline ::caffe::V0LayerParameter_PoolMethod V0LayerParameter::pool() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.pool)
  return static_cast< ::caffe::V0LayerParameter_PoolMethod >(pool_);
}
inline void V0LayerParameter::set_pool(::caffe::V0LayerParameter_PoolMethod value) {
  assert(::caffe::V0LayerParameter_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.pool)
}

// optional float dropout_ratio = 12 [default = 0.5];
inline bool V0LayerParameter::has_dropout_ratio() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void V0LayerParameter::set_has_dropout_ratio() {
  _has_bits_[0] |= 0x00000800u;
}
inline void V0LayerParameter::clear_has_dropout_ratio() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void V0LayerParameter::clear_dropout_ratio() {
  dropout_ratio_ = 0.5f;
  clear_has_dropout_ratio();
}
inline float V0LayerParameter::dropout_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.dropout_ratio)
  return dropout_ratio_;
}
inline void V0LayerParameter::set_dropout_ratio(float value) {
  set_has_dropout_ratio();
  dropout_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.dropout_ratio)
}

// optional uint32 local_size = 13 [default = 5];
inline bool V0LayerParameter::has_local_size() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void V0LayerParameter::set_has_local_size() {
  _has_bits_[0] |= 0x00001000u;
}
inline void V0LayerParameter::clear_has_local_size() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void V0LayerParameter::clear_local_size() {
  local_size_ = 5u;
  clear_has_local_size();
}
inline ::google::protobuf::uint32 V0LayerParameter::local_size() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.local_size)
  return local_size_;
}
inline void V0LayerParameter::set_local_size(::google::protobuf::uint32 value) {
  set_has_local_size();
  local_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.local_size)
}

// optional float alpha = 14 [default = 1];
inline bool V0LayerParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void V0LayerParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00002000u;
}
inline void V0LayerParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void V0LayerParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
inline float V0LayerParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.alpha)
  return alpha_;
}
inline void V0LayerParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.alpha)
}

// optional float beta = 15 [default = 0.75];
inline bool V0LayerParameter::has_beta() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void V0LayerParameter::set_has_beta() {
  _has_bits_[0] |= 0x00004000u;
}
inline void V0LayerParameter::clear_has_beta() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void V0LayerParameter::clear_beta() {
  beta_ = 0.75f;
  clear_has_beta();
}
inline float V0LayerParameter::beta() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.beta)
  return beta_;
}
inline void V0LayerParameter::set_beta(float value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.beta)
}

// optional float k = 22 [default = 1];
inline bool V0LayerParameter::has_k() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void V0LayerParameter::set_has_k() {
  _has_bits_[0] |= 0x00008000u;
}
inline void V0LayerParameter::clear_has_k() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void V0LayerParameter::clear_k() {
  k_ = 1;
  clear_has_k();
}
inline float V0LayerParameter::k() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.k)
  return k_;
}
inline void V0LayerParameter::set_k(float value) {
  set_has_k();
  k_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.k)
}

// optional string source = 16;
inline bool V0LayerParameter::has_source() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void V0LayerParameter::set_has_source() {
  _has_bits_[0] |= 0x00010000u;
}
inline void V0LayerParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void V0LayerParameter::clear_source() {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& V0LayerParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.source)
  return *source_;
}
inline void V0LayerParameter::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.source)
}
inline void V0LayerParameter::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.source)
}
inline void V0LayerParameter::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.source)
}
inline ::std::string* V0LayerParameter::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.source)
  return source_;
}
inline ::std::string* V0LayerParameter::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void V0LayerParameter::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.source)
}

// optional float scale = 17 [default = 1];
inline bool V0LayerParameter::has_scale() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void V0LayerParameter::set_has_scale() {
  _has_bits_[0] |= 0x00020000u;
}
inline void V0LayerParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void V0LayerParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float V0LayerParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.scale)
  return scale_;
}
inline void V0LayerParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.scale)
}

// optional string meanfile = 18;
inline bool V0LayerParameter::has_meanfile() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void V0LayerParameter::set_has_meanfile() {
  _has_bits_[0] |= 0x00040000u;
}
inline void V0LayerParameter::clear_has_meanfile() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void V0LayerParameter::clear_meanfile() {
  if (meanfile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    meanfile_->clear();
  }
  clear_has_meanfile();
}
inline const ::std::string& V0LayerParameter::meanfile() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.meanfile)
  return *meanfile_;
}
inline void V0LayerParameter::set_meanfile(const ::std::string& value) {
  set_has_meanfile();
  if (meanfile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    meanfile_ = new ::std::string;
  }
  meanfile_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.meanfile)
}
inline void V0LayerParameter::set_meanfile(const char* value) {
  set_has_meanfile();
  if (meanfile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    meanfile_ = new ::std::string;
  }
  meanfile_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.meanfile)
}
inline void V0LayerParameter::set_meanfile(const char* value, size_t size) {
  set_has_meanfile();
  if (meanfile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    meanfile_ = new ::std::string;
  }
  meanfile_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.meanfile)
}
inline ::std::string* V0LayerParameter::mutable_meanfile() {
  set_has_meanfile();
  if (meanfile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    meanfile_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.meanfile)
  return meanfile_;
}
inline ::std::string* V0LayerParameter::release_meanfile() {
  clear_has_meanfile();
  if (meanfile_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = meanfile_;
    meanfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void V0LayerParameter::set_allocated_meanfile(::std::string* meanfile) {
  if (meanfile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete meanfile_;
  }
  if (meanfile) {
    set_has_meanfile();
    meanfile_ = meanfile;
  } else {
    clear_has_meanfile();
    meanfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.meanfile)
}

// optional uint32 batchsize = 19;
inline bool V0LayerParameter::has_batchsize() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void V0LayerParameter::set_has_batchsize() {
  _has_bits_[0] |= 0x00080000u;
}
inline void V0LayerParameter::clear_has_batchsize() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void V0LayerParameter::clear_batchsize() {
  batchsize_ = 0u;
  clear_has_batchsize();
}
inline ::google::protobuf::uint32 V0LayerParameter::batchsize() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.batchsize)
  return batchsize_;
}
inline void V0LayerParameter::set_batchsize(::google::protobuf::uint32 value) {
  set_has_batchsize();
  batchsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.batchsize)
}

// optional uint32 cropsize = 20 [default = 0];
inline bool V0LayerParameter::has_cropsize() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void V0LayerParameter::set_has_cropsize() {
  _has_bits_[0] |= 0x00100000u;
}
inline void V0LayerParameter::clear_has_cropsize() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void V0LayerParameter::clear_cropsize() {
  cropsize_ = 0u;
  clear_has_cropsize();
}
inline ::google::protobuf::uint32 V0LayerParameter::cropsize() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.cropsize)
  return cropsize_;
}
inline void V0LayerParameter::set_cropsize(::google::protobuf::uint32 value) {
  set_has_cropsize();
  cropsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.cropsize)
}

// optional bool mirror = 21 [default = false];
inline bool V0LayerParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void V0LayerParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00200000u;
}
inline void V0LayerParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void V0LayerParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool V0LayerParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.mirror)
  return mirror_;
}
inline void V0LayerParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.mirror)
}

// repeated .caffe.BlobProto blobs = 50;
inline int V0LayerParameter::blobs_size() const {
  return blobs_.size();
}
inline void V0LayerParameter::clear_blobs() {
  blobs_.Clear();
}
inline const ::caffe::BlobProto& V0LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.blobs)
  return blobs_.Get(index);
}
inline ::caffe::BlobProto* V0LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.blobs)
  return blobs_.Mutable(index);
}
inline ::caffe::BlobProto* V0LayerParameter::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.V0LayerParameter.blobs)
  return blobs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
V0LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.V0LayerParameter.blobs)
  return blobs_;
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
V0LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V0LayerParameter.blobs)
  return &blobs_;
}

// repeated float blobs_lr = 51;
inline int V0LayerParameter::blobs_lr_size() const {
  return blobs_lr_.size();
}
inline void V0LayerParameter::clear_blobs_lr() {
  blobs_lr_.Clear();
}
inline float V0LayerParameter::blobs_lr(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.blobs_lr)
  return blobs_lr_.Get(index);
}
inline void V0LayerParameter::set_blobs_lr(int index, float value) {
  blobs_lr_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.blobs_lr)
}
inline void V0LayerParameter::add_blobs_lr(float value) {
  blobs_lr_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V0LayerParameter.blobs_lr)
}
inline const ::google::protobuf::RepeatedField< float >&
V0LayerParameter::blobs_lr() const {
  // @@protoc_insertion_point(field_list:caffe.V0LayerParameter.blobs_lr)
  return blobs_lr_;
}
inline ::google::protobuf::RepeatedField< float >*
V0LayerParameter::mutable_blobs_lr() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V0LayerParameter.blobs_lr)
  return &blobs_lr_;
}

// repeated float weight_decay = 52;
inline int V0LayerParameter::weight_decay_size() const {
  return weight_decay_.size();
}
inline void V0LayerParameter::clear_weight_decay() {
  weight_decay_.Clear();
}
inline float V0LayerParameter::weight_decay(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.weight_decay)
  return weight_decay_.Get(index);
}
inline void V0LayerParameter::set_weight_decay(int index, float value) {
  weight_decay_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.weight_decay)
}
inline void V0LayerParameter::add_weight_decay(float value) {
  weight_decay_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V0LayerParameter.weight_decay)
}
inline const ::google::protobuf::RepeatedField< float >&
V0LayerParameter::weight_decay() const {
  // @@protoc_insertion_point(field_list:caffe.V0LayerParameter.weight_decay)
  return weight_decay_;
}
inline ::google::protobuf::RepeatedField< float >*
V0LayerParameter::mutable_weight_decay() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V0LayerParameter.weight_decay)
  return &weight_decay_;
}

// optional uint32 rand_skip = 53 [default = 0];
inline bool V0LayerParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void V0LayerParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x02000000u;
}
inline void V0LayerParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void V0LayerParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
inline ::google::protobuf::uint32 V0LayerParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.rand_skip)
  return rand_skip_;
}
inline void V0LayerParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.rand_skip)
}

// optional float det_fg_threshold = 54 [default = 0.5];
inline bool V0LayerParameter::has_det_fg_threshold() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void V0LayerParameter::set_has_det_fg_threshold() {
  _has_bits_[0] |= 0x04000000u;
}
inline void V0LayerParameter::clear_has_det_fg_threshold() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void V0LayerParameter::clear_det_fg_threshold() {
  det_fg_threshold_ = 0.5f;
  clear_has_det_fg_threshold();
}
inline float V0LayerParameter::det_fg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_fg_threshold)
  return det_fg_threshold_;
}
inline void V0LayerParameter::set_det_fg_threshold(float value) {
  set_has_det_fg_threshold();
  det_fg_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_fg_threshold)
}

// optional float det_bg_threshold = 55 [default = 0.5];
inline bool V0LayerParameter::has_det_bg_threshold() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void V0LayerParameter::set_has_det_bg_threshold() {
  _has_bits_[0] |= 0x08000000u;
}
inline void V0LayerParameter::clear_has_det_bg_threshold() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void V0LayerParameter::clear_det_bg_threshold() {
  det_bg_threshold_ = 0.5f;
  clear_has_det_bg_threshold();
}
inline float V0LayerParameter::det_bg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_bg_threshold)
  return det_bg_threshold_;
}
inline void V0LayerParameter::set_det_bg_threshold(float value) {
  set_has_det_bg_threshold();
  det_bg_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_bg_threshold)
}

// optional float det_fg_fraction = 56 [default = 0.25];
inline bool V0LayerParameter::has_det_fg_fraction() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void V0LayerParameter::set_has_det_fg_fraction() {
  _has_bits_[0] |= 0x10000000u;
}
inline void V0LayerParameter::clear_has_det_fg_fraction() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void V0LayerParameter::clear_det_fg_fraction() {
  det_fg_fraction_ = 0.25f;
  clear_has_det_fg_fraction();
}
inline float V0LayerParameter::det_fg_fraction() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_fg_fraction)
  return det_fg_fraction_;
}
inline void V0LayerParameter::set_det_fg_fraction(float value) {
  set_has_det_fg_fraction();
  det_fg_fraction_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_fg_fraction)
}

// optional uint32 det_context_pad = 58 [default = 0];
inline bool V0LayerParameter::has_det_context_pad() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void V0LayerParameter::set_has_det_context_pad() {
  _has_bits_[0] |= 0x20000000u;
}
inline void V0LayerParameter::clear_has_det_context_pad() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void V0LayerParameter::clear_det_context_pad() {
  det_context_pad_ = 0u;
  clear_has_det_context_pad();
}
inline ::google::protobuf::uint32 V0LayerParameter::det_context_pad() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_context_pad)
  return det_context_pad_;
}
inline void V0LayerParameter::set_det_context_pad(::google::protobuf::uint32 value) {
  set_has_det_context_pad();
  det_context_pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_context_pad)
}

// optional string det_crop_mode = 59 [default = "warp"];
inline bool V0LayerParameter::has_det_crop_mode() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void V0LayerParameter::set_has_det_crop_mode() {
  _has_bits_[0] |= 0x40000000u;
}
inline void V0LayerParameter::clear_has_det_crop_mode() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void V0LayerParameter::clear_det_crop_mode() {
  if (det_crop_mode_ != _default_det_crop_mode_) {
    det_crop_mode_->assign(*_default_det_crop_mode_);
  }
  clear_has_det_crop_mode();
}
inline const ::std::string& V0LayerParameter::det_crop_mode() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_crop_mode)
  return *det_crop_mode_;
}
inline void V0LayerParameter::set_det_crop_mode(const ::std::string& value) {
  set_has_det_crop_mode();
  if (det_crop_mode_ == _default_det_crop_mode_) {
    det_crop_mode_ = new ::std::string;
  }
  det_crop_mode_->assign(value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_crop_mode)
}
inline void V0LayerParameter::set_det_crop_mode(const char* value) {
  set_has_det_crop_mode();
  if (det_crop_mode_ == _default_det_crop_mode_) {
    det_crop_mode_ = new ::std::string;
  }
  det_crop_mode_->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.det_crop_mode)
}
inline void V0LayerParameter::set_det_crop_mode(const char* value, size_t size) {
  set_has_det_crop_mode();
  if (det_crop_mode_ == _default_det_crop_mode_) {
    det_crop_mode_ = new ::std::string;
  }
  det_crop_mode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.det_crop_mode)
}
inline ::std::string* V0LayerParameter::mutable_det_crop_mode() {
  set_has_det_crop_mode();
  if (det_crop_mode_ == _default_det_crop_mode_) {
    det_crop_mode_ = new ::std::string(*_default_det_crop_mode_);
  }
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.det_crop_mode)
  return det_crop_mode_;
}
inline ::std::string* V0LayerParameter::release_det_crop_mode() {
  clear_has_det_crop_mode();
  if (det_crop_mode_ == _default_det_crop_mode_) {
    return NULL;
  } else {
    ::std::string* temp = det_crop_mode_;
    det_crop_mode_ = const_cast< ::std::string*>(_default_det_crop_mode_);
    return temp;
  }
}
inline void V0LayerParameter::set_allocated_det_crop_mode(::std::string* det_crop_mode) {
  if (det_crop_mode_ != _default_det_crop_mode_) {
    delete det_crop_mode_;
  }
  if (det_crop_mode) {
    set_has_det_crop_mode();
    det_crop_mode_ = det_crop_mode;
  } else {
    clear_has_det_crop_mode();
    det_crop_mode_ = const_cast< ::std::string*>(_default_det_crop_mode_);
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.det_crop_mode)
}

// optional int32 new_num = 60 [default = 0];
inline bool V0LayerParameter::has_new_num() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void V0LayerParameter::set_has_new_num() {
  _has_bits_[0] |= 0x80000000u;
}
inline void V0LayerParameter::clear_has_new_num() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void V0LayerParameter::clear_new_num() {
  new_num_ = 0;
  clear_has_new_num();
}
inline ::google::protobuf::int32 V0LayerParameter::new_num() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_num)
  return new_num_;
}
inline void V0LayerParameter::set_new_num(::google::protobuf::int32 value) {
  set_has_new_num();
  new_num_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_num)
}

// optional int32 new_channels = 61 [default = 0];
inline bool V0LayerParameter::has_new_channels() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void V0LayerParameter::set_has_new_channels() {
  _has_bits_[1] |= 0x00000001u;
}
inline void V0LayerParameter::clear_has_new_channels() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void V0LayerParameter::clear_new_channels() {
  new_channels_ = 0;
  clear_has_new_channels();
}
inline ::google::protobuf::int32 V0LayerParameter::new_channels() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_channels)
  return new_channels_;
}
inline void V0LayerParameter::set_new_channels(::google::protobuf::int32 value) {
  set_has_new_channels();
  new_channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_channels)
}

// optional int32 new_height = 62 [default = 0];
inline bool V0LayerParameter::has_new_height() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void V0LayerParameter::set_has_new_height() {
  _has_bits_[1] |= 0x00000002u;
}
inline void V0LayerParameter::clear_has_new_height() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void V0LayerParameter::clear_new_height() {
  new_height_ = 0;
  clear_has_new_height();
}
inline ::google::protobuf::int32 V0LayerParameter::new_height() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_height)
  return new_height_;
}
inline void V0LayerParameter::set_new_height(::google::protobuf::int32 value) {
  set_has_new_height();
  new_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_height)
}

// optional int32 new_width = 63 [default = 0];
inline bool V0LayerParameter::has_new_width() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void V0LayerParameter::set_has_new_width() {
  _has_bits_[1] |= 0x00000004u;
}
inline void V0LayerParameter::clear_has_new_width() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void V0LayerParameter::clear_new_width() {
  new_width_ = 0;
  clear_has_new_width();
}
inline ::google::protobuf::int32 V0LayerParameter::new_width() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_width)
  return new_width_;
}
inline void V0LayerParameter::set_new_width(::google::protobuf::int32 value) {
  set_has_new_width();
  new_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_width)
}

// optional bool shuffle_images = 64 [default = false];
inline bool V0LayerParameter::has_shuffle_images() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void V0LayerParameter::set_has_shuffle_images() {
  _has_bits_[1] |= 0x00000008u;
}
inline void V0LayerParameter::clear_has_shuffle_images() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void V0LayerParameter::clear_shuffle_images() {
  shuffle_images_ = false;
  clear_has_shuffle_images();
}
inline bool V0LayerParameter::shuffle_images() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.shuffle_images)
  return shuffle_images_;
}
inline void V0LayerParameter::set_shuffle_images(bool value) {
  set_has_shuffle_images();
  shuffle_images_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.shuffle_images)
}

// optional uint32 concat_dim = 65 [default = 1];
inline bool V0LayerParameter::has_concat_dim() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void V0LayerParameter::set_has_concat_dim() {
  _has_bits_[1] |= 0x00000010u;
}
inline void V0LayerParameter::clear_has_concat_dim() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void V0LayerParameter::clear_concat_dim() {
  concat_dim_ = 1u;
  clear_has_concat_dim();
}
inline ::google::protobuf::uint32 V0LayerParameter::concat_dim() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.concat_dim)
  return concat_dim_;
}
inline void V0LayerParameter::set_concat_dim(::google::protobuf::uint32 value) {
  set_has_concat_dim();
  concat_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.concat_dim)
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
inline bool V0LayerParameter::has_hdf5_output_param() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void V0LayerParameter::set_has_hdf5_output_param() {
  _has_bits_[1] |= 0x00000020u;
}
inline void V0LayerParameter::clear_has_hdf5_output_param() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void V0LayerParameter::clear_hdf5_output_param() {
  if (hdf5_output_param_ != NULL) hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
  clear_has_hdf5_output_param();
}
inline const ::caffe::HDF5OutputParameter& V0LayerParameter::hdf5_output_param() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.hdf5_output_param)
  return hdf5_output_param_ != NULL ? *hdf5_output_param_ : *default_instance_->hdf5_output_param_;
}
inline ::caffe::HDF5OutputParameter* V0LayerParameter::mutable_hdf5_output_param() {
  set_has_hdf5_output_param();
  if (hdf5_output_param_ == NULL) hdf5_output_param_ = new ::caffe::HDF5OutputParameter;
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.hdf5_output_param)
  return hdf5_output_param_;
}
inline ::caffe::HDF5OutputParameter* V0LayerParameter::release_hdf5_output_param() {
  clear_has_hdf5_output_param();
  ::caffe::HDF5OutputParameter* temp = hdf5_output_param_;
  hdf5_output_param_ = NULL;
  return temp;
}
inline void V0LayerParameter::set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param) {
  delete hdf5_output_param_;
  hdf5_output_param_ = hdf5_output_param;
  if (hdf5_output_param) {
    set_has_hdf5_output_param();
  } else {
    clear_has_hdf5_output_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.hdf5_output_param)
}

// -------------------------------------------------------------------

// PReLUParameter

// optional .caffe.FillerParameter filler = 1;
inline bool PReLUParameter::has_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PReLUParameter::set_has_filler() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PReLUParameter::clear_has_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PReLUParameter::clear_filler() {
  if (filler_ != NULL) filler_->::caffe::FillerParameter::Clear();
  clear_has_filler();
}
inline const ::caffe::FillerParameter& PReLUParameter::filler() const {
  // @@protoc_insertion_point(field_get:caffe.PReLUParameter.filler)
  return filler_ != NULL ? *filler_ : *default_instance_->filler_;
}
inline ::caffe::FillerParameter* PReLUParameter::mutable_filler() {
  set_has_filler();
  if (filler_ == NULL) filler_ = new ::caffe::FillerParameter;
  // @@protoc_insertion_point(field_mutable:caffe.PReLUParameter.filler)
  return filler_;
}
inline ::caffe::FillerParameter* PReLUParameter::release_filler() {
  clear_has_filler();
  ::caffe::FillerParameter* temp = filler_;
  filler_ = NULL;
  return temp;
}
inline void PReLUParameter::set_allocated_filler(::caffe::FillerParameter* filler) {
  delete filler_;
  filler_ = filler;
  if (filler) {
    set_has_filler();
  } else {
    clear_has_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.PReLUParameter.filler)
}

// optional bool channel_shared = 2 [default = false];
inline bool PReLUParameter::has_channel_shared() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PReLUParameter::set_has_channel_shared() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PReLUParameter::clear_has_channel_shared() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PReLUParameter::clear_channel_shared() {
  channel_shared_ = false;
  clear_has_channel_shared();
}
inline bool PReLUParameter::channel_shared() const {
  // @@protoc_insertion_point(field_get:caffe.PReLUParameter.channel_shared)
  return channel_shared_;
}
inline void PReLUParameter::set_channel_shared(bool value) {
  set_has_channel_shared();
  channel_shared_ = value;
  // @@protoc_insertion_point(field_set:caffe.PReLUParameter.channel_shared)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::caffe::EmitConstraint_EmitType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::EmitConstraint_EmitType>() {
  return ::caffe::EmitConstraint_EmitType_descriptor();
}
template <> struct is_proto_enum< ::caffe::AnnotatedDatum_AnnotationType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::AnnotatedDatum_AnnotationType>() {
  return ::caffe::AnnotatedDatum_AnnotationType_descriptor();
}
template <> struct is_proto_enum< ::caffe::FillerParameter_VarianceNorm> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::FillerParameter_VarianceNorm>() {
  return ::caffe::FillerParameter_VarianceNorm_descriptor();
}
template <> struct is_proto_enum< ::caffe::SolverParameter_SnapshotFormat> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SolverParameter_SnapshotFormat>() {
  return ::caffe::SolverParameter_SnapshotFormat_descriptor();
}
template <> struct is_proto_enum< ::caffe::SolverParameter_SolverMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SolverParameter_SolverMode>() {
  return ::caffe::SolverParameter_SolverMode_descriptor();
}
template <> struct is_proto_enum< ::caffe::SolverParameter_SolverType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SolverParameter_SolverType>() {
  return ::caffe::SolverParameter_SolverType_descriptor();
}
template <> struct is_proto_enum< ::caffe::ParamSpec_DimCheckMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ParamSpec_DimCheckMode>() {
  return ::caffe::ParamSpec_DimCheckMode_descriptor();
}
template <> struct is_proto_enum< ::caffe::ResizeParameter_Resize_mode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ResizeParameter_Resize_mode>() {
  return ::caffe::ResizeParameter_Resize_mode_descriptor();
}
template <> struct is_proto_enum< ::caffe::ResizeParameter_Pad_mode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ResizeParameter_Pad_mode>() {
  return ::caffe::ResizeParameter_Pad_mode_descriptor();
}
template <> struct is_proto_enum< ::caffe::ResizeParameter_Interp_mode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ResizeParameter_Interp_mode>() {
  return ::caffe::ResizeParameter_Interp_mode_descriptor();
}
template <> struct is_proto_enum< ::caffe::DetectNetGroundTruthParameter_GridboxType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::DetectNetGroundTruthParameter_GridboxType>() {
  return ::caffe::DetectNetGroundTruthParameter_GridboxType_descriptor();
}
template <> struct is_proto_enum< ::caffe::DetectNetGroundTruthParameter_CoverageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::DetectNetGroundTruthParameter_CoverageType>() {
  return ::caffe::DetectNetGroundTruthParameter_CoverageType_descriptor();
}
template <> struct is_proto_enum< ::caffe::LossParameter_NormalizationMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::LossParameter_NormalizationMode>() {
  return ::caffe::LossParameter_NormalizationMode_descriptor();
}
template <> struct is_proto_enum< ::caffe::BatchNormParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::BatchNormParameter_Engine>() {
  return ::caffe::BatchNormParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::ConvolutionParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ConvolutionParameter_Engine>() {
  return ::caffe::ConvolutionParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker>() {
  return ::caffe::ConvolutionParameter_CuDNNConvolutionAlgorithmSeeker_descriptor();
}
template <> struct is_proto_enum< ::caffe::DataParameter_DB> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::DataParameter_DB>() {
  return ::caffe::DataParameter_DB_descriptor();
}
template <> struct is_proto_enum< ::caffe::DropoutParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::DropoutParameter_Engine>() {
  return ::caffe::DropoutParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::EltwiseParameter_EltwiseOp> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::EltwiseParameter_EltwiseOp>() {
  return ::caffe::EltwiseParameter_EltwiseOp_descriptor();
}
template <> struct is_proto_enum< ::caffe::HingeLossParameter_Norm> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::HingeLossParameter_Norm>() {
  return ::caffe::HingeLossParameter_Norm_descriptor();
}
template <> struct is_proto_enum< ::caffe::LRNParameter_NormRegion> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::LRNParameter_NormRegion>() {
  return ::caffe::LRNParameter_NormRegion_descriptor();
}
template <> struct is_proto_enum< ::caffe::LRNParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::LRNParameter_Engine>() {
  return ::caffe::LRNParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::MultiBoxLossParameter_LocLossType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::MultiBoxLossParameter_LocLossType>() {
  return ::caffe::MultiBoxLossParameter_LocLossType_descriptor();
}
template <> struct is_proto_enum< ::caffe::MultiBoxLossParameter_ConfLossType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::MultiBoxLossParameter_ConfLossType>() {
  return ::caffe::MultiBoxLossParameter_ConfLossType_descriptor();
}
template <> struct is_proto_enum< ::caffe::MultiBoxLossParameter_MatchType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::MultiBoxLossParameter_MatchType>() {
  return ::caffe::MultiBoxLossParameter_MatchType_descriptor();
}
template <> struct is_proto_enum< ::caffe::MultiBoxLossParameter_MiningType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::MultiBoxLossParameter_MiningType>() {
  return ::caffe::MultiBoxLossParameter_MiningType_descriptor();
}
template <> struct is_proto_enum< ::caffe::PoolingParameter_PoolMethod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::PoolingParameter_PoolMethod>() {
  return ::caffe::PoolingParameter_PoolMethod_descriptor();
}
template <> struct is_proto_enum< ::caffe::PoolingParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::PoolingParameter_Engine>() {
  return ::caffe::PoolingParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::PriorBoxParameter_CodeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::PriorBoxParameter_CodeType>() {
  return ::caffe::PriorBoxParameter_CodeType_descriptor();
}
template <> struct is_proto_enum< ::caffe::ReductionParameter_ReductionOp> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ReductionParameter_ReductionOp>() {
  return ::caffe::ReductionParameter_ReductionOp_descriptor();
}
template <> struct is_proto_enum< ::caffe::ReLUParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ReLUParameter_Engine>() {
  return ::caffe::ReLUParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::SigmoidParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SigmoidParameter_Engine>() {
  return ::caffe::SigmoidParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::SoftmaxParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SoftmaxParameter_Engine>() {
  return ::caffe::SoftmaxParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::TanHParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::TanHParameter_Engine>() {
  return ::caffe::TanHParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::SPPParameter_PoolMethod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SPPParameter_PoolMethod>() {
  return ::caffe::SPPParameter_PoolMethod_descriptor();
}
template <> struct is_proto_enum< ::caffe::SPPParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SPPParameter_Engine>() {
  return ::caffe::SPPParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::V1LayerParameter_LayerType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::V1LayerParameter_LayerType>() {
  return ::caffe::V1LayerParameter_LayerType_descriptor();
}
template <> struct is_proto_enum< ::caffe::V1LayerParameter_DimCheckMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::V1LayerParameter_DimCheckMode>() {
  return ::caffe::V1LayerParameter_DimCheckMode_descriptor();
}
template <> struct is_proto_enum< ::caffe::V0LayerParameter_PoolMethod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::V0LayerParameter_PoolMethod>() {
  return ::caffe::V0LayerParameter_PoolMethod_descriptor();
}
template <> struct is_proto_enum< ::caffe::Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::Type>() {
  return ::caffe::Type_descriptor();
}
template <> struct is_proto_enum< ::caffe::Phase> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::Phase>() {
  return ::caffe::Phase_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_src_2fcaffe_2fproto_2fcaffe_2eproto__INCLUDED
